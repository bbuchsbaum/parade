[{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/AGENTS.html","id":"project-structure--modules","dir":"","previous_headings":"","what":"Project Structure & Modules","title":"Repository Guidelines","text":"R/: Package source (functions, S3 methods). Keep files small cohesive. tests/testthat/: Unit tests (test-*.R) helpers (helper-*.R). man/: Auto-generated Rd docs roxygen comments. vignettes/: R Markdown articles long-form examples. inst/: Installed extras (e.g., templates, example data). DESCRIPTION, NAMESPACE: Package metadata; NAMESPACE roxygen-managed. doc/, Meta/: Built site artifacts (pkgdown); edit manually.","code":""},{"path":"https://bbuchsbaum.github.io/parade/AGENTS.html","id":"build-test-and-dev-commands","dir":"","previous_headings":"","what":"Build, Test, and Dev Commands","title":"Repository Guidelines","text":"Build & check: R -q -e \"devtools::document(); devtools::check()\" Run tests: R -q -e \"devtools::test()\" Full CRAN check: R CMD build . && R CMD check parade_*.tar.gz Build docs site: R -q -e \"pkgdown::build_site()\" Lint/format: R -q -e \"lintr::lint_package(); styler::style_pkg()\"","code":""},{"path":"https://bbuchsbaum.github.io/parade/AGENTS.html","id":"coding-style--naming","dir":"","previous_headings":"","what":"Coding Style & Naming","title":"Repository Guidelines","text":"Follow tidyverse style: 2-space indents, tabs, 80–100 cols. Functions objects: snake_case; S3 methods generic.class. Document roxygen2; export via @export; keep examples runnable/fast. Prefer pure functions, explicit arguments, typed schemas user-facing APIs.","code":""},{"path":"https://bbuchsbaum.github.io/parade/AGENTS.html","id":"testing-guidelines","dir":"","previous_headings":"","what":"Testing Guidelines","title":"Repository Guidelines","text":"Framework: testthat. Place tests tests/testthat/ test-*.R. Add tests new behavior bug fixes; keep deterministic fast. Run devtools::test() locally; CI uses devtools::check() semantics. Use helpers HPC/SLURM skips (see existing helper-skip.R).","code":""},{"path":"https://bbuchsbaum.github.io/parade/AGENTS.html","id":"commit--pull-requests","dir":"","previous_headings":"","what":"Commit & Pull Requests","title":"Repository Guidelines","text":"Commits: short, imperative, scoped (e.g., “Fix test failures”, “Add mirai backend”). PRs must include: summary, motivation, minimal repro examples, tests. Reference issues Fixes #NNN applicable. Include /output CLI/text UI changes.","code":""},{"path":"https://bbuchsbaum.github.io/parade/AGENTS.html","id":"continuous-integration","dir":"","previous_headings":"","what":"Continuous Integration","title":"Repository Guidelines","text":"GitHub Actions: keep pkgdown workflow .github/workflows/pkgdown.yaml site deploys. uses: r-lib/actions/setup-r@v2, setup-pandoc@v2, setup-r-dependencies@v2, check-r-package@v2. Cache dependencies run ---cran checks; fail NOTES matter CRAN. Example steps snippet:","code":"- uses: r-lib/actions/setup-r@v2     - uses: r-lib/actions/setup-pandoc@v2     - uses: r-lib/actions/setup-r-dependencies@v2     - uses: r-lib/actions/check-r-package@v2"},{"path":"https://bbuchsbaum.github.io/parade/AGENTS.html","id":"test-coverage","dir":"","previous_headings":"","what":"Test Coverage","title":"Repository Guidelines","text":"Local HTML report: R -q -e \"covr::report()\" (opens coverage package). CI upload (optional): R -q -e \"covr::codecov()\" CODECOV_TOKEN secret private repos. Target: maintain ≥80% coverage user-facing code; exclude intentionally slow/SLURM paths (already skipped tests).","code":""},{"path":"https://bbuchsbaum.github.io/parade/AGENTS.html","id":"security--configuration","dir":"","previous_headings":"","what":"Security & Configuration","title":"Repository Guidelines","text":"commit credentials site-specific paths. Use paths_init() path aliases (artifacts://, data://, …). Site defaults: prefer NA--omit semantics SLURM flags; configure via package APIs env vars (PARADE_*). Test locally first (engine = \"future\"), scale (SLURM/mirai) code.","code":""},{"path":"https://bbuchsbaum.github.io/parade/CLAUDE.html","id":null,"dir":"","previous_headings":"","what":"CLAUDE.md","title":"CLAUDE.md","text":"file provides guidance Claude Code (claude.ai/code) working code repository.","code":""},{"path":"https://bbuchsbaum.github.io/parade/CLAUDE.html","id":"project-overview","dir":"","previous_headings":"","what":"Project Overview","title":"CLAUDE.md","text":"Parade R package declarative parallel dataflow processing built top future/furrr, specialized support HPC environments (particularly SLURM). package provides typed schemas, artifacts, diagnostics, HPC-friendly distribution capabilities.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/CLAUDE.html","id":"build-and-install-package","dir":"","previous_headings":"Common Development Commands","what":"Build and Install Package","title":"CLAUDE.md","text":"","code":"# Build and install from source devtools::install()  # Build documentation devtools::document()  # Check package for CRAN compliance devtools::check()  # Run tests (if available) devtools::test()"},{"path":"https://bbuchsbaum.github.io/parade/CLAUDE.html","id":"testing-single-functions","dir":"","previous_headings":"Common Development Commands","what":"Testing Single Functions","title":"CLAUDE.md","text":"","code":"# Load development version devtools::load_all()  # Test individual functions example_function()"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/CLAUDE.html","id":"core-components","dir":"","previous_headings":"Code Architecture","what":"Core Components","title":"CLAUDE.md","text":"JSON-based configuration system SLURM defaults profiles Configuration search precedence: PARADE_CONFIG env var → <project>/parade.json → <project>/.parade/parade.json NA/omit semantics resource management (NA values drop flags) Profile-based defaults session persistent storage options Generic script submission interface via submit_slurm() Integration batchtools registry management Automatic resource merging defaults Job handle persistence metadata tracking Live CPU/memory metrics via SLURM commands (squeue, sstat, sacct) Metric parsing formatting utilities Job status tracking log management script_top(): Single job interactive monitor jobs_top(): Multi-job dashboard live updates Log tailing status visualization Project-relative path resolution Registry artifact directory management","code":""},{"path":"https://bbuchsbaum.github.io/parade/CLAUDE.html","id":"key-design-patterns","dir":"","previous_headings":"Code Architecture","what":"Key Design Patterns","title":"CLAUDE.md","text":"Null coalescing operator: %||% used throughout default values Error handling: Graceful degradation SLURM tools unavailable Registry pattern: batchtools registries job state persistence Resource merging: Hierarchical defaults explicit override semantics","code":""},{"path":"https://bbuchsbaum.github.io/parade/CLAUDE.html","id":"dependencies","dir":"","previous_headings":"Code Architecture","what":"Dependencies","title":"CLAUDE.md","text":"Core dependencies: - future, furrr: Parallel processing backend - batchtools, future.batchtools: SLURM integration - tibble, tidyr, purrr: Data manipulation - jsonlite: Configuration persistence - digest: Hash generation unique IDs","code":""},{"path":"https://bbuchsbaum.github.io/parade/CLAUDE.html","id":"recent-changes-v0110","dir":"","previous_headings":"","what":"Recent Changes (v0.11.0)","title":"CLAUDE.md","text":"NA omit() values resources now explicitly drop SLURM flags Configurable defaults system JSON persistence Profile support different compute environments New jobs_top() multi-job monitoring dashboard Template path configuration via slurm_template_set()","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Parade Unified API Implementation Plan","text":"Unifying script function submission consistent syntactic sugar across parade v0.12.0+","code":""},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"current-status","dir":"","previous_headings":"","what":"Current Status","title":"Parade Unified API Implementation Plan","text":"Basic slurm_call() implementation (R/slurm_call.R) Tests slurm_call() (tests/testthat/test-slurm_call.R) Documentation vignette (vignettes/parade-scripts-monitoring.Rmd)","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"enhanced-slurm_call","dir":"","previous_headings":"Phase 1: Core Infrastructure (Foundation)","what":"Enhanced slurm_call()","title":"Parade Unified API Implementation Plan","text":"Add name_by parameter dynamic naming (stem, index, digest) Add package auto-detection via codetools::findGlobals() Add engine = c(\"slurm\", \"local\") local execution Implement path macro expansion write_result ({stem}, {run}, name) Add guard_packages() explicit package validation","code":""},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"argument-helpers","dir":"","previous_headings":"Phase 1: Core Infrastructure (Foundation)","what":"Argument Helpers","title":"Parade Unified API Implementation Plan","text":"Create args_cli() - Build character vectors scripts Create args_call() - Build named lists functions Create args() - Auto-detect based context Add tests argument helpers Document argument helper usage","code":""},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"unified-job-object","dir":"","previous_headings":"Phase 1: Core Infrastructure (Foundation)","what":"Unified Job Object","title":"Parade Unified API Implementation Plan","text":"Create parade_job S3 class parent class Refactor parade_script_job inherit parade_job Add job_type field (“script” “function”) Implement consistent print.parade_job() method Implement [.parade_job subsetting method Implement c.parade_job combining method","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"core-map-implementation","dir":"","previous_headings":"Phase 2: Map Functions (High-Value) ✅","what":"Core Map Implementation","title":"Parade Unified API Implementation Plan","text":"Create R/slurm_map.R file String path → submit_slurm() Function → slurm_call() Formula notation support (~ .x + 1) Implement slurm_pmap() parallel mapping Create parade_jobset S3 class Add as_jobset() coercion function","code":""},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"jobset-methods","dir":"","previous_headings":"Phase 2: Map Functions (High-Value) ✅","what":"Jobset Methods","title":"Parade Unified API Implementation Plan","text":"await.parade_jobset() - Wait jobs status.parade_jobset() - Get status jobs progress.parade_jobset() - Show progress bar cancel.parade_jobset() - Cancel jobs tail.parade_jobset() - Tail logs jobs top.parade_jobset() - Interactive monitor collect.parade_jobset() - Gather results print.parade_jobset() - Pretty printing [.parade_jobset - Subsetting length.parade_jobset() - Number jobs c.parade_jobset() - Combining jobsets as_tibble.parade_jobset() - Convert tibble completed.parade_jobset() - Filter completed jobs failed.parade_jobset() - Filter failed jobs running.parade_jobset() - Filter running jobs pending.parade_jobset() - Filter pending jobs","code":""},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"name-helpers","dir":"","previous_headings":"Phase 2: Map Functions (High-Value) ✅","what":"Name Helpers","title":"Parade Unified API Implementation Plan","text":"stem() - Extract file stem naming index() - Use numeric index digest() - Use content hash glue_name() - Template-based naming","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"resource-profiles","dir":"","previous_headings":"Phase 3: Resource Management (Ergonomics) ✅","what":"Resource Profiles","title":"Parade Unified API Implementation Plan","text":"Create R/resource_profiles.R file Implement profile() function Chain modifiers: time(), mem(), cpus(), gpus() String shorthand resolution (e.g., “cpu8” → profile) Profile validation merging logic Additional modifiers: partition(), account()","code":""},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"profile-registry","dir":"","previous_headings":"Phase 3: Resource Management (Ergonomics) ✅","what":"Profile Registry","title":"Parade Unified API Implementation Plan","text":"profile_register() - Define named profiles profile_list() - Show available profiles profile_get() - Retrieve profile definition profile_remove() - Remove profiles profile_clear() - Clear profiles profile_init_defaults() - Initialize default profiles Store profiles internal environment Add profile examples vignette Integration slurm_resources()","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"wave-execution","dir":"","previous_headings":"Phase 4: Flow Control (Advanced) ✅","what":"Wave Execution","title":"Parade Unified API Implementation Plan","text":"Create R/waves.R file in_waves_of() - Submit batches max_in_flight() - Limit concurrent jobs Internal queue management apply_waves() Concurrency control apply_concurrency_limit() Flow control combination flow_control() Tests wave execution","code":""},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"error-handling","dir":"","previous_headings":"Phase 4: Flow Control (Advanced) ✅","what":"Error Handling","title":"Parade Unified API Implementation Plan","text":"Create R/error_policy.R file on_error() policy builder on_error_retry() shorthand retry() method backoff (linear, exponential) calculate_backoff() delay computation Error collection get_errors() Integration jobset methods Tests error policies","code":""},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"grid-expansion","dir":"","previous_headings":"Phase 4: Flow Control (Advanced) ✅","what":"Grid Expansion","title":"Parade Unified API Implementation Plan","text":"Create R/grid.R file grid() helper Parameter filtering formulas functions param_grid() alternative interface lhs_grid() Latin hypercube sampling combine_grids() multi-resolution exploration Integration slurm_map() (via .options .error_policy) Tests grid expansion","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"enhanced-monitoring","dir":"","previous_headings":"Phase 5: Monitoring & Diagnostics (Polish) ✅","what":"Enhanced Monitoring","title":"Parade Unified API Implementation Plan","text":"open_logs() - Quick log file access explain() - Show executed dry_run() - Preview without submission jobs_top() enhancement jobsets use_registry() registry_ls() registry_clean()","code":""},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"path-macros","dir":"","previous_headings":"Phase 5: Monitoring & Diagnostics (Polish) ✅","what":"Path Macros","title":"Parade Unified API Implementation Plan","text":"Create path object methods path$artifacts() implementation path$data() implementation path$registry() implementation Macro expansion: {stem}, name, {run}, {date} Integration existing resolve_path() Tests path macros","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"stage-based-workflows","dir":"","previous_headings":"Phase 6: Flow DSL (Optional Future)","what":"Stage-based Workflows","title":"Parade Unified API Implementation Plan","text":"Create R/flow.R file flow() constructor stage() method adding stages distribute() execution strategy Stage dependency resolution Tests flow DSL","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"vignettes","dir":"","previous_headings":"Documentation & Examples","what":"Vignettes","title":"Parade Unified API Implementation Plan","text":"Create “parade-unified-api.Rmd” vignette Update existing vignettes new patterns Add comparison table (old vs new API) Performance tuning guide Migration guide v0.11 v0.12","code":""},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"examples","dir":"","previous_headings":"Documentation & Examples","what":"Examples","title":"Parade Unified API Implementation Plan","text":"Parameter sweep example Image processing pipeline Monte Carlo simulation Cross-validation workflow Error recovery patterns","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"unit-tests","dir":"","previous_headings":"Testing Strategy","what":"Unit Tests","title":"Parade Unified API Implementation Plan","text":"Test file: test-slurm_map.R Test file: test-jobset.R Test file: test-resource_profiles.R Test file: test-flow_control.R (waves, errors, grids) Test file: test-path_macros.R","code":""},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"integration-tests","dir":"","previous_headings":"Testing Strategy","what":"Integration Tests","title":"Parade Unified API Implementation Plan","text":"End--end workflow tests Resource profile integration Wave execution real delays Error recovery scenarios Result collection validation","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"before-release","dir":"","previous_headings":"Release Checklist","what":"Before Release","title":"Parade Unified API Implementation Plan","text":"tests passing R CMD check clean Documentation complete Vignettes build successfully NEWS.md updated Version bumped 0.12.0","code":""},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"compatibility","dir":"","previous_headings":"Release Checklist","what":"Compatibility","title":"Parade Unified API Implementation Plan","text":"Backward compatibility verified Migration guide written Deprecation warnings added (needed) Examples updated","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"week-1-current","dir":"","previous_headings":"Timeline","what":"Week 1 (Current)","title":"Parade Unified API Implementation Plan","text":"Complete Phase 1 infrastructure Begin Phase 2 map functions","code":""},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"week-2","dir":"","previous_headings":"Timeline","what":"Week 2","title":"Parade Unified API Implementation Plan","text":"Complete Phase 2 map functions Begin Phase 3 resource management","code":""},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"week-3","dir":"","previous_headings":"Timeline","what":"Week 3","title":"Parade Unified API Implementation Plan","text":"Complete Phase 3 resource management Begin Phase 4 flow control","code":""},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"week-4","dir":"","previous_headings":"Timeline","what":"Week 4","title":"Parade Unified API Implementation Plan","text":"Complete Phase 4 flow control Phase 5 monitoring & diagnostics Documentation testing","code":""},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"week-5-buffer","dir":"","previous_headings":"Timeline","what":"Week 5 (Buffer)","title":"Parade Unified API Implementation Plan","text":"Polish refinement Performance optimization Release preparation","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"design-principles","dir":"","previous_headings":"Notes","what":"Design Principles","title":"Parade Unified API Implementation Plan","text":"Backward Compatibility: Existing code must continue working Progressive Disclosure: Simple things simple, complex things possible Consistent Semantics: behavior scripts functions Type Safety: Clear distinction CLI function arguments Ergonomics First: Optimize common use cases","code":""},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"key-decisions-made","dir":"","previous_headings":"Notes","what":"Key Decisions Made","title":"Parade Unified API Implementation Plan","text":"slurm_call() already implemented foundation ✓ Unified job object hierarchy chosen Formula notation (~) anonymous functions String shortcuts resource profiles Path macros common patterns","code":""},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"open-questions","dir":"","previous_headings":"Notes","what":"Open Questions","title":"Parade Unified API Implementation Plan","text":"collect() simplify default return list? handle large closure serialization warnings? wave execution synchronous async default? Integration future/promises async patterns? CLI interface priority?","code":""},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"dependencies-to-consider","dir":"","previous_headings":"Notes","what":"Dependencies to Consider","title":"Parade Unified API Implementation Plan","text":"codetools package detection glue string interpolation (already imported) cli progress bars (optional) withr temporary state management","code":""},{"path":"https://bbuchsbaum.github.io/parade/IMPLEMENTATION_PLAN.html","id":"current-focus","dir":"","previous_headings":"","what":"Current Focus","title":"Parade Unified API Implementation Plan","text":"Active: Implementation Complete - Ready documentation examples Next: Phase 6 - Flow DSL (Optional Future) Blocked: None Completed: - Phase 1: Core Infrastructure ✓ - Enhanced slurm_call() name_by engine support ✓ - Argument helpers (args_cli, args_call, args) ✓ - Unified job class hierarchy ✓ - Test suite slurm_call() ✓ - Phase 2: Map Functions ✓ - slurm_map() slurm_pmap() implementation ✓ - Complete jobset class 15+ methods ✓ - Name helpers (stem, index, digest, glue_name) ✓ - Test suite map functions ✓ - Vignette documentation ✓ - Phase 3: Resource Management ✓ - Resource profile system fluent interface ✓ - Profile registry defaults ✓ - Chain modifiers (time, mem, cpus, gpus, partition, account) ✓ - Integration slurm_resources() ✓ - Test suite profiles ✓ - Documentation examples ✓ - Phase 4: Flow Control ✓ - Wave execution in_waves_of() max_in_flight() ✓ - Error policies retry backoff strategies ✓ - Grid expansion parameter sweeps ✓ - Latin hypercube sampling ✓ - Integration slurm_map() ✓ - Test suite flow control ✓ - Phase 5: Monitoring & Diagnostics ✓ - Enhanced monitoring functions (explain, dry_run, open_logs) ✓ - Registry management (use_registry, registry_ls, registry_clean) ✓ - Path macro system convenient accessors ✓ - Enhanced path expansion templates ✓ - Test suite monitoring features ✓","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-artifacts.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Artifacts: Managing Large Analysis Outputs","text":"vignette assumes understand: - Smart Path Management - portable paths work - Core Concepts - Basic flow stage structure","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-artifacts.html","id":"the-problem-large-outputs-overwhelm-your-system","dir":"Articles","previous_headings":"","what":"The Problem: Large Outputs Overwhelm Your System","title":"Artifacts: Managing Large Analysis Outputs","text":"analysis produces large outputs, several problems arise: Even worse HPC clusters:","code":"# Typical neuroimaging analysis - each model is ~500MB results <- lapply(subjects, function(subj) {   brain_data <- load_brain(subj)   model <- fit_complex_model(brain_data)  # 500MB object   return(model) })  # Problems: # 1. Memory explosion - 100 subjects = 50GB in RAM # 2. Can't save intermediate results - all or nothing # 3. Can't resume if job fails after 80 subjects # 4. Can't share specific models with collaborators # 5. Results object becomes unwieldy to work with # This WILL get your account suspended on most clusters: saveRDS(huge_results, \"~/my_home_dir/results.rds\")  # NO! Home has quota!"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-artifacts.html","id":"the-solution-artifacts---smart-file-management","dir":"Articles","previous_headings":"","what":"The Solution: Artifacts - Smart File Management","title":"Artifacts: Managing Large Analysis Outputs","text":"Artifacts automatically save large outputs disk processing, returning just file references:","code":"library(parade) paths_init()  # Initialize smart path aliases (artifacts://, etc.)  # Define what should go to disk results <- flow(subjects) |>   stage(\"fit_model\",     f = function(subject) {       brain_data <- load_brain(subject)       model <- fit_complex_model(brain_data)  # 500MB object       list(model = model, subject = subject)     },     schema = returns(       model = artifact(),    # This becomes a file on disk       subject = chr()        # This stays in memory     ),     sink = sink_spec(       fields = \"model\",       dir = \"artifacts://brain_models\"  # Smart, portable path     )   ) |>   collect()  # Now results$model contains file paths, not huge objects! print(results$model[[1]]) #> $path: \"/scratch/alice/parade-artifacts/brain_models/model_1.rds\" #> $bytes: 524288000 #> $sha256: \"abc123...\"  # Load a specific model when needed model_50 <- readRDS(results$model[[50]]$path)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-artifacts.html","id":"quick-start-your-first-artifact-workflow","dir":"Articles","previous_headings":"","what":"Quick Start: Your First Artifact Workflow","title":"Artifacts: Managing Large Analysis Outputs","text":"Reproducibility tip: examples use random data (rnorm(), sampling, etc.), set seed (e.g., set.seed(42)) printed outputs deterministic.","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-artifacts.html","id":"step-1-initialize-parades-path-system","dir":"Articles","previous_headings":"Quick Start: Your First Artifact Workflow","what":"Step 1: Initialize parade’s path system","title":"Artifacts: Managing Large Analysis Outputs","text":"","code":"library(parade) paths_init()  # Sets up smart paths for your environment"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-artifacts.html","id":"step-2-create-an-analysis-with-artifacts","dir":"Articles","previous_headings":"Quick Start: Your First Artifact Workflow","what":"Step 2: Create an analysis with artifacts","title":"Artifacts: Managing Large Analysis Outputs","text":"","code":"# Small example with built-in data data <- data.frame(   sample = paste0(\"sample_\", 1:10),   size = sample(100:1000, 10) )  results <- flow(data) |>   stage(\"analyze\",     f = function(sample, size) {       set.seed(42)  # reproducible example output       # Simulate some analysis       model <- lm(rnorm(size) ~ 1:size)       metrics <- summary(model)$r.squared              list(         model = model,       # Large object         metrics = metrics,   # Small value         sample = sample      # Identifier       )     },     schema = returns(       model = artifact(),    # Save to disk       metrics = dbl(),       # Keep in memory       sample = chr()         # Keep in memory     ),     sink = sink_spec(       fields = \"model\",       dir = \"artifacts://analysis/models\"     )   ) |>   collect()  # Results contain paths for models, values for metrics print(results) #> # A tibble: 10 × 3 #>    sample    model                    metrics #>    <chr>     <list>                     <dbl> #>  1 sample_1  <tibble [1 × 4]>          0.023 #>  2 sample_2  <tibble [1 × 4]>          0.045 #>  ..."},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-artifacts.html","id":"step-3-work-with-artifacts-efficiently","dir":"Articles","previous_headings":"Quick Start: Your First Artifact Workflow","what":"Step 3: Work with artifacts efficiently","title":"Artifacts: Managing Large Analysis Outputs","text":"","code":"# Get just the metrics without loading models high_r2 <- results[results$metrics > 0.05, ]  # Load specific models as needed best_model <- readRDS(high_r2$model[[1]]$path)  # Share a specific result cat(\"Model for sample_5 is at:\", results$model[[5]]$path)"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-artifacts.html","id":"where-do-artifacts-go","dir":"Articles","previous_headings":"Understanding Artifact Storage","what":"Where Do Artifacts Go?","title":"Artifacts: Managing Large Analysis Outputs","text":"artifacts:// prefix smart alias adapts environment:","code":"# Check where artifacts will go paths_get()$artifacts #> \"/scratch/alice/parade-artifacts\"  # on HPC #> \"/var/folders/xy/temp/parade-artifacts\"  # on Mac  # Configure custom location if needed paths_set(artifacts = \"/fast/storage/my_outputs\")"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-artifacts.html","id":"directory-organization","dir":"Articles","previous_headings":"Understanding Artifact Storage","what":"Directory Organization","title":"Artifacts: Managing Large Analysis Outputs","text":"Artifacts organized hierarchically based sink specification:","code":"sink_spec(   fields = \"model\",   dir = \"artifacts://project_x/models\",   template = \"{subject}/{session}_{task}.rds\" )  # Creates structure like: # /scratch/alice/parade-artifacts/ #   └── project_x/ #       └── models/ #           ├── subj01/ #           │   ├── session1_rest.rds #           │   └── session2_task.rds #           └── subj02/ #               ├── session1_rest.rds #               └── session2_task.rds"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-artifacts.html","id":"scenario-1-neuroimaging-pipeline-with-mixed-output-sizes","dir":"Articles","previous_headings":"Real-World Scenarios","what":"Scenario 1: Neuroimaging Pipeline with Mixed Output Sizes","title":"Artifacts: Managing Large Analysis Outputs","text":"Different stages produce different sized outputs - keep small stuff memory, large stuff disk:","code":"neuro_pipeline <- flow(subjects) |>      # Stage 1: Preprocessing (large outputs)   stage(\"preprocess\",     f = function(subject) {       # Simulate loading brain data (in production, use actual neuroimaging tools)       # raw <- oro.nifti::readNIfTI(sprintf(\"data/%s_T1.nii.gz\", subject))              # For this example, simulate with a large matrix       set.seed(as.numeric(factor(subject)))       raw <- matrix(rnorm(256 * 256 * 176), nrow = 256)  # ~46MB              # Simulate preprocessing       cleaned <- raw / max(abs(raw))  # Normalize to [-1, 1]              # Calculate quality control metrics       qc_metrics <- list(         snr = 20 * runif(1, 0.5, 1.5),  # Signal-to-noise ratio         motion = runif(1, 0, 2),         # Motion estimate in mm         outliers = rpois(1, 3)           # Number of outlier voxels       )              list(         cleaned_brain = cleaned,         qc = qc_metrics       )     },     schema = returns(       cleaned_brain = artifact(),  # Too big for memory       qc = struct()                 # Small, keep in memory     ),     sink = sink_spec(       fields = \"cleaned_brain\",       dir = \"artifacts://preprocessing\",       format = \"rds\"  # Use RDS here to match readRDS() below     )   ) |>      # Stage 2: Analysis (moderate outputs)     stage(\"analyze\",     needs = \"preprocess\",  # Declare dependency     f = function(preprocess.cleaned_brain, preprocess.qc) {       # Load the artifact (matches format = \"rds\" above)       brain <- readRDS(preprocess.cleaned_brain$path)              # Only process if QC passed       if (preprocess.qc$snr > 10) {         # Simulate GLM fitting on brain data         # In production: model <- fsl.glm(brain, design_matrix)                  # For this example, fit simple model on flattened data         y <- as.vector(brain[1:100, 1:100])  # Use subset         x <- seq_along(y)         model <- lm(y ~ x)                  # Extract statistics         stats <- list(           beta = coef(model)[2],           t_stat = summary(model)$coefficients[2, \"t value\"],           p_value = summary(model)$coefficients[2, \"Pr(>|t|)\"]         )                  list(model = model, stats = stats)       } else {         list(model = NULL, stats = NULL)       }     },     schema = returns(       model = maybe(artifact()),  # Might be NULL       stats = maybe(struct())     ),     sink = sink_spec(       fields = \"model\",       dir = \"artifacts://models\",       format = \"rds\"     )   )  results <- collect(neuro_pipeline)  # Memory usage stays manageable even with 1000 subjects! # Only paths and small summaries in memory"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-artifacts.html","id":"registering-custom-formats-e-g--nifti","dir":"Articles","previous_headings":"Real-World Scenarios","what":"Registering custom formats (e.g., NIfTI)","title":"Artifacts: Managing Large Analysis Outputs","text":"prefer domain formats (like NIfTI), register reader/writer pair reference name sink_spec():","code":"# Requires the RNifti package if (requireNamespace(\"RNifti\", quietly = TRUE)) {   register_sink_format(     \"nii\",  # format name used in sink_spec(format = \"nii\")     writer = function(x, path, ...) { RNifti::writeNifti(x, path, ...); invisible(path) },     reader = function(path, ...) RNifti::readNifti(path, ...),     ext = \".nii.gz\"  # ensures files end with .nii.gz   ) }  # Then in your sink, use the registered format name: sink_spec(   fields = \"cleaned_brain\",   dir = \"artifacts://preprocessing\",   format = \"nii\" )  # Reading later (if autoload = FALSE): # brain <- RNifti::readNifti(cleaned_brain$path)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-artifacts.html","id":"scenario-2-machine-learning-with-checkpointing","dir":"Articles","previous_headings":"Real-World Scenarios","what":"Scenario 2: Machine Learning with Checkpointing","title":"Artifacts: Managing Large Analysis Outputs","text":"Save models epoch resume capability:","code":"ml_training <- flow(param_grid(   epoch = 1:100,   fold = 1:5 )) |>   stage(\"train\",     f = function(epoch, fold) {       # Check if already completed       checkpoint_path <- sprintf(\"artifacts://ml/checkpoints/fold%d_epoch%03d.rds\",                                  fold, epoch)              if (file.exists(resolve_path(checkpoint_path))) {         # Resume from checkpoint         model <- readRDS(resolve_path(checkpoint_path))         message(\"Resumed from checkpoint\")       } else {         # Train from scratch or previous epoch         if (epoch > 1) {           prev_path <- sprintf(\"artifacts://ml/checkpoints/fold%d_epoch%03d.rds\",                               fold, epoch - 1)           model <- readRDS(resolve_path(prev_path))         } else {           # Initialize a new model (simple linear model for demo)           model <- list(             weights = rnorm(10),             bias = 0,             learning_rate = 0.01           )         }                  # Simulate one epoch of training         set.seed(fold * 1000 + epoch)                  # Get mock training data for this fold         n_samples <- 100         X <- matrix(rnorm(n_samples * 10), ncol = 10)         y <- X %*% rnorm(10) + rnorm(n_samples)                  # Simple gradient descent update (mock training)         predictions <- X %*% model$weights + model$bias         errors <- predictions - y         gradient_w <- t(X) %*% errors / n_samples         gradient_b <- mean(errors)                  # Update model         model$weights <- model$weights - model$learning_rate * gradient_w         model$bias <- model$bias - model$learning_rate * gradient_b       }              # Calculate loss on validation data       val_X <- matrix(rnorm(50 * 10), ncol = 10)       val_y <- val_X %*% rnorm(10) + rnorm(50)       val_pred <- val_X %*% model$weights + model$bias       loss <- mean((val_pred - val_y)^2)  # MSE loss              list(         model = model,         fold = fold,         epoch = epoch,         loss = loss       )     },     schema = returns(       model = artifact(),       fold = int(),       epoch = int(),       loss = dbl()     ),     sink = sink_spec(       fields = \"model\",       dir = \"artifacts://ml/checkpoints\",       template = \"fold{fold}_epoch{epoch:03d}\",       overwrite = \"skip\"  # Don't recompute existing     )   )  # Can interrupt and resume training! results <- collect(ml_training)  # Plot training curves without loading models library(ggplot2) ggplot(results, aes(x = epoch, y = loss, color = factor(fold))) +   geom_line() +   labs(title = \"Training Progress\")"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-artifacts.html","id":"scenario-3-collaborative-analysis-with-selective-sharing","dir":"Articles","previous_headings":"Real-World Scenarios","what":"Scenario 3: Collaborative Analysis with Selective Sharing","title":"Artifacts: Managing Large Analysis Outputs","text":"Different team members work different parts:","code":"# Setup: Create subject list all_subjects <- data.frame(   subject_id = sprintf(\"sub_%03d\", 1:100),   group = rep(c(\"control\", \"treatment\"), 50) )  # Alice runs preprocessing preprocessing <- flow(all_subjects[1:50, ]) |>   stage(\"clean\",     f = function(subject_id, group) {       # Simulate data cleaning       set.seed(as.numeric(factor(subject_id)))       raw_data <- data.frame(         value = rnorm(1000, mean = ifelse(group == \"control\", 100, 110)),         time = 1:1000       )              # Remove outliers and normalize       cleaned <- raw_data[abs(scale(raw_data$value)) < 3, ]       cleaned$value <- scale(cleaned$value)              list(cleaned = cleaned)     },     schema = returns(cleaned = artifact()),     sink = sink_spec(       fields = \"cleaned\",       dir = \"artifacts://shared/preprocessing\"     ))  alice_results <- collect(preprocessing)  # Bob runs models on Alice's outputs modeling <- flow(alice_results) |>   stage(\"model\",     needs = \"clean\",  # Reference Alice's stage     f = function(clean.cleaned) {       # Load preprocessed data       data <- readRDS(clean.cleaned$path)              # Fit a simple time series model       model <- lm(value ~ poly(time, 3), data = data)              list(model = model)     },     schema = returns(model = artifact()),     sink = sink_spec(       fields = \"model\",       dir = \"artifacts://shared/models\"     ))  bob_results <- collect(modeling)  # Carol visualizes without needing full models visualization <- flow(bob_results) |>   stage(\"plot\",     needs = \"model\",  # Reference Bob's stage     f = function(model.model) {       # Load just the coefficients, not full model       m <- readRDS(model.model$path)       coefs <- coef(m)              # Create a simple coefficient plot       # In production, use ggplot2 for better visualizations       pdf(NULL)  # Start null device to capture plot       barplot(coefs[-1],                names.arg = paste0(\"Term\", 1:(length(coefs)-1)),               main = \"Model Coefficients\",               col = \"steelblue\")       plot_obj <- recordPlot()  # Capture the plot       dev.off()              list(plot = plot_obj)     },     schema = returns(plot = artifact()),     sink = sink_spec(       fields = \"plot\",       dir = \"artifacts://shared/figures\",       format = \"rds\"  # Save R plot objects as RDS     ))"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-artifacts.html","id":"pattern-1-mixed-storage-strategies","dir":"Articles","previous_headings":"Advanced Patterns","what":"Pattern 1: Mixed Storage Strategies","title":"Artifacts: Managing Large Analysis Outputs","text":"Different data types need different formats locations:","code":"# Configure different sinks for different data types model_sink <- sink_spec(   fields = \"model\",   dir = \"artifacts://models\",   format = \"rds\",   compress = \"gzip\"  # Compress large R objects )  image_sink <- sink_spec(   fields = \"brain_image\",   dir = \"artifacts://images\",   format = \"nii.gz\",  # Standard neuroimaging format   compress = FALSE    # Already compressed )  summary_sink <- sink_spec(   fields = \"summary\",   dir = \"project://summaries\",  # Small files stay with project   format = \"json\"     # Human-readable )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-artifacts.html","id":"pattern-2-conditional-artifacts","dir":"Articles","previous_headings":"Advanced Patterns","what":"Pattern 2: Conditional Artifacts","title":"Artifacts: Managing Large Analysis Outputs","text":"Save artifacts meet criteria:","code":"stage(\"process\",   f = function(data) {     model <- fit_model(data)     size <- object.size(model)          if (size > 10*1024*1024) {  # > 10MB       list(model = model, stored = TRUE)     } else {       list(model = model, stored = FALSE)     }   },   schema = returns(     model = maybe(artifact()),  # Conditional artifact     stored = lgl()   ),   sink = sink_spec(     fields = \"model\",     dir = \"artifacts://conditional\",     when = ~ stored  # Only sink when stored = TRUE   ) )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-artifacts.html","id":"pattern-3-artifact-versioning","dir":"Articles","previous_headings":"Advanced Patterns","what":"Pattern 3: Artifact Versioning","title":"Artifacts: Managing Large Analysis Outputs","text":"Track different versions analyses:","code":"version <- format(Sys.Date(), \"%Y%m%d\")  sink_spec(   fields = \"model\",   dir = sprintf(\"artifacts://models/v_%s\", version),   template = \"{subject}_{session}_{.row_key}\" )  # Creates versioned paths: # artifacts://models/v_20240315/subj01_ses1_abc123.rds # artifacts://models/v_20240316/subj01_ses1_def456.rds"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-artifacts.html","id":"issue-no-space-left-on-device","dir":"Articles","previous_headings":"Troubleshooting","what":"Issue: “No space left on device”","title":"Artifacts: Managing Large Analysis Outputs","text":"","code":"# Check where artifacts are going paths_get()$artifacts  # Switch to larger storage paths_set(artifacts = \"/large/storage/partition\")"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-artifacts.html","id":"issue-permission-denied","dir":"Articles","previous_headings":"Troubleshooting","what":"Issue: “Permission denied”","title":"Artifacts: Managing Large Analysis Outputs","text":"","code":"# Ensure write permissions dir <- resolve_path(\"artifacts://test\") dir.create(dir, recursive = TRUE, mode = \"0755\")"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-artifacts.html","id":"issue-cant-find-artifact-files","dir":"Articles","previous_headings":"Troubleshooting","what":"Issue: Can’t find artifact files","title":"Artifacts: Managing Large Analysis Outputs","text":"","code":"# Check if paths match between systems artifact_path <- results$model[[1]]$path file.exists(artifact_path)  # Use relative paths in portable code relative_path <- sub(paths_get()$artifacts, \"artifacts://\", artifact_path)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-artifacts.html","id":"best-practices","dir":"Articles","previous_headings":"","what":"Best Practices","title":"Artifacts: Managing Large Analysis Outputs","text":"Use artifacts outputs > 10MB Organize artifacts hierarchically Include metadata artifacts Clean old artifacts periodically","code":"# Good: Large objects as artifacts schema = returns(big_model = artifact(), summary = dbl())  # Bad: Everything as artifact (unnecessary I/O) schema = returns(tiny_value = artifact()) # Good: Clear organization \"artifacts://preprocessing/cleaned/\" \"artifacts://models/fitted/\" \"artifacts://results/figures/\"  # Bad: Flat structure \"artifacts://everything/\" sink_spec(   fields = \"model\",   dir = \"artifacts://models\",   sidecar = \"json\"  # Creates .json with metadata ) # Remove artifacts older than 30 days old_files <- list.files(   resolve_path(\"artifacts://temp\"),   full.names = TRUE,   recursive = TRUE ) file.remove(old_files[file.mtime(old_files) < Sys.Date() - 30])"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-artifacts.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Artifacts: Managing Large Analysis Outputs","text":"Now understand artifacts, learn : Advanced Sinks - Format-specific writers multi-file patterns SLURM Distribution - Running artifact pipelines clusters Script Monitoring - Tracking artifact generation progress","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-artifacts.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Artifacts: Managing Large Analysis Outputs","text":"Artifacts solve large output problem : Automatically saving large objects disk processing Returning references instead loading everything memory Using portable paths work across different systems Enabling selective loading data need Start using artifacts outputs exceed ~10MB per item total memory usage becomes concern. RAM (cluster admin) thank !","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"quick-start-5-minutes","dir":"Articles","previous_headings":"","what":"Quick Start (5 minutes)","title":"Parade core: declarative flows, types, and execution","text":"Want see parade action? ’s complete working example: ’s ! ’ve just run 6 analyses automatically. Read understand parade can scale simple example complex, multi-stage pipelines HPC clusters.","code":"library(parade)  # 1. Define what varies (3 subjects × 2 conditions = 6 analyses) grid <- param_grid(   subject = c(\"s01\", \"s02\", \"s03\"),   condition = c(\"A\", \"B\") )  # 2. Create workflow with one analysis step workflow <- flow(grid) |>   stage(     id = \"analyze\",     f = function(subject, condition) {       # Your analysis code here       score <- rnorm(1, mean = 100, sd = 15)       list(score = score)     },     schema = returns(score = dbl())   )  # 3. Run it! results <- collect(workflow) print(results) # A tibble: 6 × 4 #   subject condition score   .ok #   <chr>   <chr>     <dbl> <lgl> # 1 s01     A          98.2  TRUE # 2 s01     B         102.4  TRUE # ... (4 more rows)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"why-parade-a-simple-research-scenario","dir":"Articles","previous_headings":"","what":"Why parade? A simple research scenario","title":"Parade core: declarative flows, types, and execution","text":"Imagine ’re analyzing experimental data multiple participants. need : Load participant’s data file Clean preprocess data Run analysis Generate summary statistics 20 participants 3 experimental conditions, ’s 60 separate analyses. write nested loops, manage file paths manually, hope nothing crashes halfway . use parade declare workflow let handle complexity.","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"what-is-parade","dir":"Articles","previous_headings":"","what":"What is parade?","title":"Parade core: declarative flows, types, and execution","text":"parade helps build reproducible analysis pipelines can run everything laptop computing cluster. Instead writing loops managing files manually, : Declare want compute Define steps relationships Execute locally parallel Collect validated, organized results Let’s see works concrete example.","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"your-first-parade-workflow","dir":"Articles","previous_headings":"","what":"Your first parade workflow","title":"Parade core: declarative flows, types, and execution","text":"Reproducibility tip: generating synthetic data examples, always use set.seed() ensure outputs remain consistent across runs. production code, typically wouldn’t set seeds unless need reproducible randomization.","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"step-1-define-your-parameter-space","dir":"Articles","previous_headings":"Your first parade workflow","what":"Step 1: Define your parameter space","title":"Parade core: declarative flows, types, and execution","text":"Every parade workflow starts parameter grid - table defines analyses want run: row grid represents one analysis need run. Parade handle 6 automatically.","code":"library(parade) library(progressr)  # For progress bars  # Initialize parade's path system for managing artifacts and registries # This creates directories for storing intermediate results and job metadata paths_init()  # Define what varies in your analysis grid <- param_grid(   participant = c(\"p01\", \"p02\", \"p03\"),  # 3 participants   condition = c(\"control\", \"treatment\")   # 2 conditions )  print(grid) # A tibble: 6 × 2 #   participant condition #   <chr>       <chr>     # 1 p01         control   # 2 p01         treatment # 3 p02         control   # 4 p02         treatment # 5 p03         control   # 6 p03         treatment"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"step-2-define-your-analysis-pipeline","dir":"Articles","previous_headings":"Your first parade workflow","what":"Step 2: Define your analysis pipeline","title":"Parade core: declarative flows, types, and execution","text":"Now create flow - series computational steps applied row: Let’s break : - flow(grid) creates workflow process row grid - stage() adds computational step workflow - id gives stage name stages can reference - f function actual work - schema tells parade kind data stage produces","code":"# Create a flow from our parameter grid results_flow <- flow(grid) |>      # First stage: Load the data   stage(     id = \"load\",  # Give this stage a name for reference     f = function(participant, condition) {       # This function receives parameters for one row of the grid       # In production, you would typically:       # data <- read.csv(sprintf(\"data/%s_%s.csv\", participant, condition))              # For this example, we simulate data       # Use participant/condition as seed components for reproducible but varied data       seed_val <- as.numeric(factor(participant)) * 100 +                    as.numeric(factor(condition))       set.seed(seed_val)              n_trials <- 100       # Simulate reaction time experiment data       data <- data.frame(         participant = participant,         condition = condition,         trial = 1:n_trials,         response_time = rnorm(n_trials,                               mean = ifelse(condition == \"control\", 500, 450),                               sd = 50),         accuracy = rbinom(n_trials, 1,                           prob = ifelse(condition == \"control\", 0.8, 0.9))       )              # Stages must return a list       list(data = data)     },     # Tell parade what type of output to expect     schema = returns(data = lst())   )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"step-3-add-analysis-stages","dir":"Articles","previous_headings":"Your first parade workflow","what":"Step 3: Add analysis stages","title":"Parade core: declarative flows, types, and execution","text":"Let’s add stage analyzes loaded data: Key points: - needs = \"load\" creates dependency - stage waits “load” complete - load.data access output previous stage - naming convention : [stage_name].[output_field]","code":"results_flow <- results_flow |>      # Second stage: Analyze the data   stage(     id = \"analyze\",     needs = \"load\",  # This stage needs the output from \"load\"     f = function(load.data) {       # Notice: load.data refers to the 'data' output from the 'load' stage              # Calculate summary statistics       mean_rt <- mean(load.data$response_time)       sd_rt <- sd(load.data$response_time)       accuracy <- mean(load.data$accuracy)       n_trials <- nrow(load.data)              list(         mean_rt = mean_rt,         sd_rt = sd_rt,         accuracy = accuracy,         n_trials = n_trials       )     },     # Specify the types of our outputs     schema = returns(       mean_rt = dbl(),   # Double/numeric       sd_rt = dbl(),       accuracy = dbl(),       n_trials = int()   # Integer     )   )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"step-4-execute-and-collect-results","dir":"Articles","previous_headings":"Your first parade workflow","what":"Step 4: Execute and collect results","title":"Parade core: declarative flows, types, and execution","text":"Now run entire workflow: results include: - original parameters (participant, condition) - outputs analysis stage (mean_rt, sd_rt, accuracy, n_trials) - .ok column indicating whether row succeeded","code":"# Execute the workflow results <- collect(results_flow)  print(results) # A tibble: 6 × 7 #   participant condition mean_rt  sd_rt accuracy n_trials  .ok #   <chr>       <chr>       <dbl>  <dbl>    <dbl>    <int> <lgl> # 1 p01         control      498.   48.2     0.79      100 TRUE # 2 p01         treatment    451.   51.3     0.91      100 TRUE # 3 p02         control      502.   49.8     0.81      100 TRUE # 4 p02         treatment    449.   50.1     0.88      100 TRUE # 5 p03         control      499.   52.1     0.80      100 TRUE # 6 p03         treatment    448.   47.9     0.92      100 TRUE"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"understanding-schemas-and-types","dir":"Articles","previous_headings":"","what":"Understanding schemas and types","title":"Parade core: declarative flows, types, and execution","text":"might wonder specify schemas. serve three important purposes:","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"early-error-detection","dir":"Articles","previous_headings":"Understanding schemas and types","what":"1. Early error detection","title":"Parade core: declarative flows, types, and execution","text":"","code":"# This will fail immediately if your function returns the wrong type stage(   id = \"bad_stage\",   f = function() {     list(result = \"not a number\")  # Oops, returning string instead of number   },   schema = returns(result = dbl())  # Expected a number! )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"memory-optimization","dir":"Articles","previous_headings":"Understanding schemas and types","what":"2. Memory optimization","title":"Parade core: declarative flows, types, and execution","text":"Parade pre-allocates memory based schemas, making execution efficient.","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"documentation","dir":"Articles","previous_headings":"Understanding schemas and types","what":"3. Documentation","title":"Parade core: declarative flows, types, and execution","text":"Schemas make pipeline’s expectations explicit - anyone reading code knows exactly stage produces.","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"available-types","dir":"Articles","previous_headings":"Understanding schemas and types","what":"Available types","title":"Parade core: declarative flows, types, and execution","text":"","code":"# Basic types dbl()    # Double/numeric values int()    # Integers chr()    # Character strings lgl()    # Logical (TRUE/FALSE)  # Container types lst()    # Lists (for complex objects) tbl()    # Tibbles/data frames  # Special types artifact()  # File references (for large data saved to disk)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"parallel-execution","dir":"Articles","previous_headings":"","what":"Parallel execution","title":"Parade core: declarative flows, types, and execution","text":"far, workflow runs sequentially. Let’s make parallel: Parade automatically distributes 6 analyses across 3 workers, handling complexity parallel execution .","code":"# Run with parallel workers results_parallel <- collect(   results_flow,    engine = \"future\",  # Use parallel execution   workers = 3         # Use 3 parallel workers )"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"handling-failures-gracefully","dir":"Articles","previous_headings":"","what":"Handling failures gracefully","title":"Parade core: declarative flows, types, and execution","text":"Real analyses sometimes fail. Parade provides several strategies:","code":"# Option 1: Keep failed rows in results (default) flow_robust <- flow(grid, error = \"keep\")  # Option 2: Stop on first error (for debugging) flow_strict <- flow(grid, error = \"stop\")  # Option 3: Silently remove failed rows flow_filter <- flow(grid, error = \"omit\")  # Check which rows failed failed_rows <- failed(results)  # Get detailed error information diagnostics(results, stage = \"analyze\")"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"building-complex-pipelines","dir":"Articles","previous_headings":"","what":"Building complex pipelines","title":"Parade core: declarative flows, types, and execution","text":"Stages can depend multiple previous stages, creating directed acyclic graph (DAG): Parade automatically figures execution order based dependencies.","code":"complex_flow <- flow(grid) |>      stage(id = \"load\",          f = function(participant, condition) {           # Load raw data from CSV files           # Using resolve_path() for parade's path management           file_path <- sprintf(\"data/%s_%s.csv\", participant, condition)                      # For this example, simulate loading data           set.seed(as.numeric(factor(participant)) * 100 +                     as.numeric(factor(condition)))                      raw_data <- data.frame(             x = rnorm(100),             y = rnorm(100),             participant = participant,             condition = condition           )                      list(raw_data = raw_data)         },         schema = returns(raw_data = lst())) |>      stage(id = \"clean\",         needs = \"load\",         f = function(load.raw_data) {           # Remove outliers: values > 3 SD from mean           clean_data <- load.raw_data                      # Remove outliers from x variable           x_mean <- mean(clean_data$x, na.rm = TRUE)           x_sd <- sd(clean_data$x, na.rm = TRUE)           clean_data <- clean_data[abs(clean_data$x - x_mean) <= 3 * x_sd, ]                      # Remove outliers from y variable             y_mean <- mean(clean_data$y, na.rm = TRUE)           y_sd <- sd(clean_data$y, na.rm = TRUE)           clean_data <- clean_data[abs(clean_data$y - y_mean) <= 3 * y_sd, ]                      list(clean_data = clean_data)         },         schema = returns(clean_data = lst())) |>      stage(id = \"model\",         needs = \"clean\",         f = function(clean.clean_data) {           # Fit a linear model           model <- lm(y ~ x, data = clean.clean_data)           list(model = model)         },         schema = returns(model = lst())) |>      stage(id = \"validate\",         needs = \"model\",         f = function(model.model) {           # Simple cross-validation: calculate R-squared           # In production, use caret::train() or mlr3 for proper CV                      # Extract R-squared as a simple validation metric           cv_score <- summary(model.model)$r.squared                      list(cv_score = cv_score)         },         schema = returns(cv_score = dbl())) |>      stage(id = \"report\",         needs = c(\"model\", \"validate\"),  # Depends on TWO stages         f = function(model.model, validate.cv_score) {           # Generate summary report combining model and validation           summary_report <- list(             coefficients = coef(model.model),             r_squared = cv_score,             n_obs = length(model.model$fitted.values),             rmse = sqrt(mean(model.model$residuals^2))           )                      list(summary = summary_report)         },         schema = returns(summary = lst()))"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"debugging-workflows","dir":"Articles","previous_headings":"","what":"Debugging workflows","title":"Parade core: declarative flows, types, and execution","text":"Start small build :","code":"# 1. Test with just 2 rows first test_results <- collect(results_flow, limit = 2)  # Check if everything worked if (all(test_results$.ok)) {   message(\"Test successful! Now try full dataset.\") } else {   # Find which rows failed   failed_rows <- test_results[!test_results$.ok, ]   print(failed_rows) }  # 2. Run sequentially for easier debugging debug_results <- collect(results_flow, engine = \"sequential\")  # 3. Check intermediate outputs from specific stages stage_outputs <- diagnostics(test_results)  # Examine what the load stage produced for the first row print(stage_outputs$load[[1]])   # $data # A data frame with 100 rows and 5 columns  # Check analyze stage output print(stage_outputs$analyze[[1]]) # $mean_rt # [1] 498.2 # $sd_rt   # [1] 48.2 # ... etc  # 4. Inspect the flow structure explain(results_flow)   # Shows DAG with stages and dependencies: # Stage 'load' (no dependencies) # Stage 'analyze' (depends on: load)  # 5. Debug a specific failure if (!test_results$.ok[1]) {   # Get detailed error for first row   error_info <- diagnostics(test_results, row = 1)   print(error_info$.error)  # See exact error message }"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"pattern-1-conditional-execution","dir":"Articles","previous_headings":"Common patterns and tips","what":"Pattern 1: Conditional execution","title":"Parade core: declarative flows, types, and execution","text":"Skip stages based conditions:","code":"flow_with_skip <- flow(grid) |>   stage(id = \"load\", ...) |>   stage(     id = \"optional_analysis\",     needs = \"load\",     f = function(load.data) {       # Complex analysis       list(result = complex_calculation(load.data))     },     skip_when = function(load.data) {       nrow(load.data) < 10  # Skip if too little data     },     schema = returns(result = dbl())   )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"pattern-2-reproducible-randomness","dir":"Articles","previous_headings":"Common patterns and tips","what":"Pattern 2: Reproducible randomness","title":"Parade core: declarative flows, types, and execution","text":"Use seed column reproducible random operations:","code":"# Create grid with unique seeds for each analysis grid_with_seeds <- param_grid(   participant = c(\"p01\", \"p02\"),   replicate = 1:10 ) |>   mutate(seed = 1000 + row_number())  # Add unique seed column  # Tell flow to use the seed column flow_reproducible <- flow(grid_with_seeds, seed_col = \"seed\") |>   stage(     id = \"bootstrap\",     f = function(participant, replicate) {       # No need to call set.seed() - parade handles it!       # Each row gets its designated seed automatically              # Simulate some data for this participant       original_data <- rnorm(100, mean = 100, sd = 15)              # Bootstrap sampling (will be reproducible)       sample_data <- sample(original_data, replace = TRUE)              list(bootstrap_mean = mean(sample_data))     },     schema = returns(bootstrap_mean = dbl())   )  # Results will be identical every time you run this results1 <- collect(flow_reproducible) results2 <- collect(flow_reproducible) identical(results1$bootstrap_mean, results2$bootstrap_mean)  # TRUE"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"pattern-3-working-with-complex-objects","dir":"Articles","previous_headings":"Common patterns and tips","what":"Pattern 3: Working with complex objects","title":"Parade core: declarative flows, types, and execution","text":"complex objects (models, custom classes, neuroimaging data), use lst():","code":"model_flow <- flow(grid) |>   stage(     id = \"fit_model\",     f = function(participant) {       # Simulate loading participant data       # In production: data <- read.csv(sprintf(\"data/%s.csv\", participant))       set.seed(as.numeric(factor(participant)))       n <- 100       data <- data.frame(         x1 = rnorm(n),         x2 = rnorm(n),         x3 = rnorm(n),         y = rnorm(n)       )              # Fit a complex model       model <- lm(y ~ x1 + x2 + x3, data = data)              # Return both the model object and extracted metrics       list(         model = model,                          # Complex object stored as list         r_squared = summary(model)$r.squared,   # Simple numeric value         n_params = length(coef(model))          # Simple integer value       )     },     schema = returns(       model = lst(),      # List column for complex object       r_squared = dbl(),  # Regular column for numeric       n_params = int()    # Regular column for integer     )   )"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"schema-mismatches","dir":"Articles","previous_headings":"Troubleshooting common issues","what":"Schema mismatches","title":"Parade core: declarative flows, types, and execution","text":"","code":"# Error: Expected <dbl>, got <int> # Solution: Use the correct type or convert in your function schema = returns(value = dbl())  # Not int() # Or in your function: as.double(your_integer)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"cant-find-stage-output","dir":"Articles","previous_headings":"Troubleshooting common issues","what":"Can’t find stage output","title":"Parade core: declarative flows, types, and execution","text":"","code":"# Error: Can't find prep.df # Check: # 1. Stage name: needs = \"prep\"  (must match stage id) # 2. Output name: function(prep.df)  (format: stage.field) # 3. The prep stage must output a field called \"df\""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"memory-issues-with-parallel-execution","dir":"Articles","previous_headings":"Troubleshooting common issues","what":"Memory issues with parallel execution","title":"Parade core: declarative flows, types, and execution","text":"","code":"# If you run out of memory with many workers results <- collect(flow, workers = 2)  # Reduce worker count  # Or process in batches batch1 <- collect(flow[1:100, ])   # First 100 rows batch2 <- collect(flow[101:200, ]) # Next 100 rows"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"debugging-failed-rows","dir":"Articles","previous_headings":"Troubleshooting common issues","what":"Debugging failed rows","title":"Parade core: declarative flows, types, and execution","text":"","code":"# Get detailed information about failures results <- collect(flow, error = \"keep\")  # Which rows failed? failed_rows <- results[!results$.ok, ]  # Why did they fail? error_details <- diagnostics(results) print(error_details$.error)  # See error messages"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next steps","title":"Parade core: declarative flows, types, and execution","text":"Now understand basics: Paths System: Learn parade’s URI-based path management system Sinks Artifacts: Save intermediate results disk automatically Artifacts Guide: Practical guide portable scratch-first storage Parallel Execution: Scale hundreds workers mirai backend SLURM Distribution: Run HPC clusters Remember: start simple, test small parameter grids, gradually scale . Parade grows needs - code runs laptop can scale supercomputer just configuration change.","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Parade core: declarative flows, types, and execution","text":"parade helps : - Define , run many: Write analysis , run across parameter combinations - Handle complexity: Automatically manage dependencies analysis steps - Scale effortlessly: sequential laptop execution parallel cluster computing - Catch errors early: Type checking prevents silent failures - Stay organized: results clean, typed tibble Start simple sequential workflows, add types safety, scale parallel execution needed. analysis code stays - execution strategy changes.","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"SLURM Profiles: One Size Doesn't Fit All Jobs","text":"vignette assumes understand: - Basic SLURM defaults - set single default configurations - Core concepts - Flow stage basics","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"the-problem-different-jobs-need-different-resources","dir":"Articles","previous_headings":"","what":"The Problem: Different Jobs Need Different Resources","title":"SLURM Profiles: One Size Doesn't Fit All Jobs","text":"research workflow likely involves many different types computing tasks: tedious error-prone. ’re repeating resource specifications everywhere, ’s easy accidentally submit big job debug partition request wrong resources.","code":"# Quick test with 5 samples - needs 30 minutes, 4 CPUs test_job <- submit_slurm(\"test.R\",    resources = list(partition = \"debug\", time = \"30m\", cpus_per_task = 4, mem = \"8G\"))  # Full analysis with 1000 samples - needs 8 hours, 32 CPUs   prod_job <- submit_slurm(\"full_analysis.R\",   resources = list(partition = \"compute\", time = \"8h\", cpus_per_task = 32, mem = \"64G\"))  # GPU model training - needs 12 hours, 2 GPUs gpu_job <- submit_slurm(\"train_model.R\",   resources = list(partition = \"gpu\", time = \"12h\", cpus_per_task = 16, mem = \"32G\", gres = \"gpu:2\"))"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"the-solution-named-resource-templates-profiles","dir":"Articles","previous_headings":"","what":"The Solution: Named Resource Templates (Profiles)","title":"SLURM Profiles: One Size Doesn't Fit All Jobs","text":"Profiles let define resource “recipes” , reference name: Much cleaner! need adjust resources, change one place.","code":"library(parade)  # Define your resource templates once slurm_defaults_set(partition = \"debug\", time = \"30m\", cpus_per_task = 4, mem = \"8G\",                     profile = \"testing\", persist = TRUE)  slurm_defaults_set(partition = \"compute\", time = \"8h\", cpus_per_task = 32, mem = \"64G\",                    profile = \"production\", persist = TRUE)  slurm_defaults_set(partition = \"gpu\", time = \"12h\", cpus_per_task = 16, mem = \"32G\", gres = \"gpu:2\",                    profile = \"gpu_training\", persist = TRUE)  # Now use them anywhere with just the profile name # Note: slurm_resources() uses named parameters: resources and profile test_job <- submit_slurm(\"test.R\", resources = slurm_resources(profile = \"testing\")) prod_job <- submit_slurm(\"full_analysis.R\", resources = slurm_resources(profile = \"production\")) gpu_job <- submit_slurm(\"train_model.R\", resources = slurm_resources(profile = \"gpu_training\"))"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"step-1-initialize-parade","dir":"Articles","previous_headings":"Quick Start: Setting Up Your First Profiles","what":"Step 1: Initialize parade","title":"SLURM Profiles: One Size Doesn't Fit All Jobs","text":"","code":"library(parade) paths_init()  # Initialize parade's path system for artifact and registry management"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"step-2-define-profiles-for-your-common-job-types","dir":"Articles","previous_headings":"Quick Start: Setting Up Your First Profiles","what":"Step 2: Define profiles for your common job types","title":"SLURM Profiles: One Size Doesn't Fit All Jobs","text":"","code":"# Quick testing profile - for debugging and development slurm_defaults_set(   partition = \"debug\",   time = \"30m\",   cpus_per_task = 4,   mem = \"8G\",   profile = \"quick\",      # Name this profile \"quick\"   persist = TRUE          # Save to config file )  # Standard analysis profile - for regular jobs slurm_defaults_set(   partition = \"compute\",   time = \"4h\",   cpus_per_task = 16,   mem = \"32G\",   profile = \"standard\",   persist = TRUE )  # Heavy computation profile - for big analyses slurm_defaults_set(   partition = \"compute\",   time = \"24h\",   cpus_per_task = 64,   mem = \"128G\",   profile = \"heavy\",   persist = TRUE )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"step-3-use-profiles-in-your-workflows","dir":"Articles","previous_headings":"Quick Start: Setting Up Your First Profiles","what":"Step 3: Use profiles in your workflows","title":"SLURM Profiles: One Size Doesn't Fit All Jobs","text":"","code":"# Quick test run test_results <- flow(small_grid) |>   stage(\"analyze\", analyze_function) |>   distribute(dist_slurm(resources = slurm_resources(profile = \"quick\")))  # Production run production_results <- flow(full_grid) |>   stage(\"analyze\", analyze_function) |>   distribute(dist_slurm(resources = slurm_resources(profile = \"heavy\")))"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"understanding-profiles-vs--defaults","dir":"Articles","previous_headings":"","what":"Understanding Profiles vs. Defaults","title":"SLURM Profiles: One Size Doesn't Fit All Jobs","text":"Think relationship way: Defaults: use slurm_defaults_set() without profile parameter, ’re setting “default” profile Profiles: Named sets SLURM parameters can switch reality, “defaults” “profiles” use underlying mechanism - defaults just profile named “default”.","code":"# These are equivalent - both set the \"default\" profile slurm_defaults_set(partition = \"compute\", time = \"2h\") slurm_defaults_set(partition = \"compute\", time = \"2h\", profile = \"default\")  # These create named profiles slurm_defaults_set(partition = \"debug\", time = \"30m\", profile = \"testing\") slurm_defaults_set(partition = \"gpu\", time = \"8h\", profile = \"gpu\")  # When you don't specify a profile, you get \"default\" slurm_resources()                    # Uses \"default\" profile slurm_resources(profile = \"default\") # Explicitly uses \"default\" profile (same as above) slurm_resources(profile = \"testing\") # Uses \"testing\" profile"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"scenario-1-development-testing-production-pipeline","dir":"Articles","previous_headings":"Real-World Scenarios","what":"Scenario 1: Development → Testing → Production Pipeline","title":"SLURM Profiles: One Size Doesn't Fit All Jobs","text":"’re developing analysis eventually run thousands samples:","code":"# Development: Work with 5 samples locally slurm_defaults_set(   partition = \"debug\",   time = \"30m\",   cpus_per_task = 2,   mem = \"4G\",   profile = \"dev\",   persist = TRUE )  # Testing: Validate with 100 samples slurm_defaults_set(   partition = \"compute\",   time = \"2h\",   cpus_per_task = 8,   mem = \"16G\",   profile = \"test\",   persist = TRUE )  # Production: Process all 5000 samples slurm_defaults_set(   partition = \"compute\",   time = \"24h\",   cpus_per_task = 64,   mem = \"256G\",   profile = \"prod\",   persist = TRUE )  # Your analysis code stays the same! run_analysis <- function(samples, profile_name) {   flow(samples) |>     stage(\"process\", process_sample) |>     stage(\"analyze\", analyze_results) |>     distribute(dist_slurm(resources = slurm_resources(profile = profile_name))) }  # Progress through phases dev_results <- run_analysis(samples[1:5], \"dev\")        # Quick iteration test_results <- run_analysis(samples[1:100], \"test\")    # Validation prod_results <- run_analysis(samples, \"prod\")           # Full run"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"scenario-2-mixed-workload-types","dir":"Articles","previous_headings":"Real-World Scenarios","what":"Scenario 2: Mixed Workload Types","title":"SLURM Profiles: One Size Doesn't Fit All Jobs","text":"project involves different types computations:","code":"# CPU-intensive statistical analysis slurm_defaults_set(   partition = \"compute\",   time = \"8h\",   cpus_per_task = 32,   mem = \"64G\",   profile = \"stats\",   persist = TRUE )  # Memory-intensive data preprocessing   slurm_defaults_set(   partition = \"highmem\",   time = \"4h\",   cpus_per_task = 16,   mem = \"256G\",   profile = \"preprocessing\",   persist = TRUE )  # GPU-accelerated machine learning slurm_defaults_set(   partition = \"gpu\",   time = \"12h\",   cpus_per_task = 8,   mem = \"32G\",   gres = \"gpu:v100:2\",  # Request 2 V100 GPUs   profile = \"ml_training\",   persist = TRUE )  # I/O-intensive file processing slurm_defaults_set(   partition = \"io\",   time = \"6h\",   cpus_per_task = 4,   mem = \"16G\",   profile = \"file_io\",   persist = TRUE )  # Use the right profile for each task preprocess_job <- submit_slurm(\"clean_data.R\",                                 resources = slurm_resources(profile = \"preprocessing\")) stats_job <- submit_slurm(\"run_stats.R\",                           resources = slurm_resources(profile = \"stats\")) ml_job <- submit_slurm(\"train_model.R\",                        resources = slurm_resources(profile = \"ml_training\"))"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"scenario-3-cross-cluster-portability","dir":"Articles","previous_headings":"Real-World Scenarios","what":"Scenario 3: Cross-Cluster Portability","title":"SLURM Profiles: One Size Doesn't Fit All Jobs","text":"work multiple HPC systems different configurations:","code":"# University cluster - uses partition names slurm_defaults_set(   partition = \"general\",   time = \"4h\",   cpus_per_task = 16,   mem = \"32G\",   account = \"lab_account\",   profile = \"uni_cluster\",   persist = TRUE )  # National supercomputer - uses QOS instead of partitions slurm_defaults_set(   partition = omit(),      # Explicitly omit partition flag (NA also works)   qos = \"normal\",          # Use QOS instead   time = \"4h\",   cpus_per_task = 16,   mem = \"32G\",   account = \"allocation_code\",   profile = \"supercomputer\",   persist = TRUE ) # Note: Use omit() or NA to prevent a SLURM flag from being set # This is useful when your cluster uses different resource specifications  # Cloud HPC - different resource limits slurm_defaults_set(   partition = \"cloud\",   time = \"2h\",            # Shorter time limits   cpus_per_task = 32,     # More CPUs available   mem = \"64G\",   profile = \"cloud_hpc\",   persist = TRUE )  # Same code runs on any cluster! run_on_cluster <- function(cluster_profile) {   resources <- slurm_resources(profile = cluster_profile)   submit_slurm(\"analysis.R\", resources = resources) }  # Choose cluster at runtime job <- run_on_cluster(\"uni_cluster\")     # or \"supercomputer\" or \"cloud_hpc\""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"overriding-profile-settings","dir":"Articles","previous_headings":"Advanced Profile Management","what":"Overriding Profile Settings","title":"SLURM Profiles: One Size Doesn't Fit All Jobs","text":"Start profile override specific settings:","code":"# Base profile has 8 hour time limit slurm_defaults_set(time = \"8h\", cpus_per_task = 32, profile = \"standard\", persist = TRUE)  # Override just the time for a longer job # Note: slurm_resources() takes 'resources' as first parameter, 'profile' as second long_job_resources <- slurm_resources(   resources = list(time = \"24h\"),   # Override time   profile = \"standard\"              # Keep other settings from profile ) # Results in: time = \"24h\", cpus_per_task = 32 (from profile)  # Override multiple settings custom_resources <- slurm_resources(   resources = list(time = \"2h\", mem = \"128G\"),  # Override time and memory   profile = \"standard\"                            # Keep cpus from profile ) # Results in: time = \"2h\", mem = \"128G\", cpus_per_task = 32 (from profile)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"programmatic-profile-selection","dir":"Articles","previous_headings":"Advanced Profile Management","what":"Programmatic Profile Selection","title":"SLURM Profiles: One Size Doesn't Fit All Jobs","text":"Choose profiles based runtime conditions:","code":"select_profile <- function(n_samples, needs_gpu = FALSE) {   if (needs_gpu) {     return(\"gpu_training\")   } else if (n_samples < 10) {     return(\"quick\")   } else if (n_samples < 100) {     return(\"standard\")   } else {     return(\"heavy\")   } }  # Automatically choose appropriate resources analyze_dataset <- function(data) {   n <- nrow(data)   has_images <- \"images\" %in% names(data)      profile <- select_profile(n, needs_gpu = has_images)   message(sprintf(\"Using profile '%s' for %d samples\", profile, n))      flow(data) |>     stage(\"process\", process_function) |>     distribute(resources = slurm_resources(profile = profile)) }"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"viewing-and-testing-profiles","dir":"Articles","previous_headings":"Advanced Profile Management","what":"Viewing and Testing Profiles","title":"SLURM Profiles: One Size Doesn't Fit All Jobs","text":"Check profiles configured:","code":"# Get specific profile settings dev_settings <- slurm_defaults_get(profile = \"dev\") print(dev_settings)  # Test all your profiles test_all_profiles <- function() {   profiles <- c(\"dev\", \"test\", \"prod\", \"gpu\")      for (prof in profiles) {     cat(\"\\nProfile:\", prof, \"\\n\")     tryCatch({       defaults <- slurm_defaults_get(profile = prof)       cat(\"  Partition:\", defaults$partition, \"\\n\")       cat(\"  Time:\", defaults$time, \"\\n\")       cat(\"  CPUs:\", defaults$cpus_per_task, \"\\n\")       cat(\"  Memory:\", defaults$mem, \"\\n\")     }, error = function(e) {       cat(\"  ERROR: Profile not found\\n\")     })   } }  test_all_profiles()"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"configuration-file-structure","dir":"Articles","previous_headings":"","what":"Configuration File Structure","title":"SLURM Profiles: One Size Doesn't Fit All Jobs","text":"Profiles stored parade.json configuration file: Location: <project>/.parade/parade.json (created automatically)","code":"{   \"slurm\": {     \"defaults\": {       \"default\": {         \"partition\": \"compute\",         \"time\": \"2h\",         \"cpus_per_task\": 8       },       \"quick\": {         \"partition\": \"debug\",         \"time\": \"30m\",         \"cpus_per_task\": 4,         \"mem\": \"8G\"       },       \"standard\": {         \"partition\": \"compute\",         \"time\": \"4h\",         \"cpus_per_task\": 16,         \"mem\": \"32G\"       },       \"heavy\": {         \"partition\": \"compute\",         \"time\": \"24h\",         \"cpus_per_task\": 64,         \"mem\": \"128G\"       },       \"gpu_training\": {         \"partition\": \"gpu\",         \"time\": \"12h\",         \"cpus_per_task\": 8,         \"mem\": \"32G\",         \"gres\": \"gpu:2\"       }     }   } }"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"use-descriptive-profile-names","dir":"Articles","previous_headings":"Best Practices","what":"1. Use Descriptive Profile Names","title":"SLURM Profiles: One Size Doesn't Fit All Jobs","text":"","code":"# Good: Clear purpose slurm_defaults_set(..., profile = \"quick_test\") slurm_defaults_set(..., profile = \"full_analysis\") slurm_defaults_set(..., profile = \"gpu_training\")  # Bad: Vague names slurm_defaults_set(..., profile = \"config1\") slurm_defaults_set(..., profile = \"new\")"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"document-your-profiles","dir":"Articles","previous_headings":"Best Practices","what":"2. Document Your Profiles","title":"SLURM Profiles: One Size Doesn't Fit All Jobs","text":"","code":"# Document profile purpose when creating slurm_defaults_set(   partition = \"debug\",   time = \"30m\",   cpus_per_task = 4,   mem = \"8G\",   profile = \"dev\",   persist = TRUE ) message(\"Created 'dev' profile for quick testing with small datasets\")"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"establish-team-conventions","dir":"Articles","previous_headings":"Best Practices","what":"3. Establish Team Conventions","title":"SLURM Profiles: One Size Doesn't Fit All Jobs","text":"Agree standard profile names across team: - dev - Development debugging - test - Testing moderate data - prod - Production runs - gpu - GPU-accelerated tasks - highmem - Memory-intensive tasks","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"handle-missing-profiles-gracefully","dir":"Articles","previous_headings":"Best Practices","what":"4. Handle Missing Profiles Gracefully","title":"SLURM Profiles: One Size Doesn't Fit All Jobs","text":"","code":"safe_submit <- function(script, profile_name) {   tryCatch({     resources <- slurm_resources(profile = profile_name)     submit_slurm(script, resources = resources)   }, error = function(e) {     message(sprintf(\"Profile '%s' not found, using defaults\", profile_name))     submit_slurm(script)  # Falls back to default profile   }) }"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"issue-profile-not-found","dir":"Articles","previous_headings":"Troubleshooting","what":"Issue: “Profile not found”","title":"SLURM Profiles: One Size Doesn't Fit All Jobs","text":"","code":"# Check available profiles slurm_defaults_get(profile = \"default\")  # Should always work  # Verify profile was saved slurm_defaults_set(..., profile = \"myprofile\", persist = TRUE)  # Note: persist = TRUE"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"issue-profile-settings-not-applying","dir":"Articles","previous_headings":"Troubleshooting","what":"Issue: Profile settings not applying","title":"SLURM Profiles: One Size Doesn't Fit All Jobs","text":"","code":"# Explicitly pass profile to resources resources <- slurm_resources(profile = \"production\")  # Correct  # NOT just: resources <- slurm_resources()  # Uses \"default\" profile"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"issue-different-clusters-need-different-profiles","dir":"Articles","previous_headings":"Troubleshooting","what":"Issue: Different clusters need different profiles","title":"SLURM Profiles: One Size Doesn't Fit All Jobs","text":"","code":"# Detect cluster and choose profile get_cluster_profile <- function() {   hostname <- Sys.info()[\"nodename\"]   if (grepl(\"uni-cluster\", hostname)) {     return(\"uni_profile\")   } else if (grepl(\"super\", hostname)) {     return(\"supercomputer_profile\")   } else {     return(\"default\")   } }  profile <- get_cluster_profile() resources <- slurm_resources(profile = profile)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"SLURM Profiles: One Size Doesn't Fit All Jobs","text":"Now understand profiles, learn : Basic SLURM defaults haven’t already Distributed execution running parallel workloads Script monitoring tracking job progress","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"SLURM Profiles: One Size Doesn't Fit All Jobs","text":"Profiles transform SLURM resource management repetitive error-prone clean maintainable: profiles: Repeat resource specifications everywhere profiles: Define , use anywhere name Key insight: Profiles just named sets SLURM defaults Start 2-3 profiles common job types, add needed. future self (collaborators) thank !","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults.html","id":"what-are-defaults-and-why-use-them","dir":"Articles","previous_headings":"","what":"What are defaults and why use them?","title":"Using SLURM Defaults in parade","text":"parade package allows set site/project defaults SLURM job submission, making R code portable across different clusters reducing repetitive resource specifications. Instead specifying SLURM parameters (partition, memory, CPU count, etc.) every job submission, can configure reuse throughout project. Key benefits using defaults: Portability: R scripts work across different clusters without modification Consistency: Ensure jobs use appropriate resource allocations environment Flexibility: Selectively omit problematic flags clusters reject (e.g., --mem) Maintainability: Update resource requirements one place rather throughout codebase Defaults stored JSON configuration file accessible R simple functions.","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick start","title":"Using SLURM Defaults in parade","text":"call submit_slurm(), automatically merges call’s resources parameter configured defaults, normalizes time specifications, drops NA omit() fields constructing #SBATCH directives SLURM job. Note flows: run flow SLURM defaults, build resource set slurm_resources() pass via dist_slurm() inside distribute(), e.g.:","code":"library(parade) paths_init()  # Set up defaults for your cluster environment slurm_defaults_set(   partition = \"general\",     # Default partition to use   time = \"2h\",              # Default time limit   cpus_per_task = 16,       # Default CPU allocation   mem = NA,                 # <- omit --mem entirely (some clusters reject this flag)   omp_num_threads = 1,      # Default OpenMP thread count   persist = TRUE            # Save these defaults to config file )  # Optionally set a default template path slurm_template_set(\"registry://templates/parade-slurm.tmpl\")  # Now submit jobs using your defaults job <- submit_slurm(\"script.R\") flow(grid) |>   stage(\"analyze\", analyze_fn) |>   distribute(dist_slurm(resources = slurm_resources(profile = \"standard\")))"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults.html","id":"configuration-file","dir":"Articles","previous_headings":"","what":"Configuration file","title":"Using SLURM Defaults in parade","text":"Parade searches configuration files following order: PARADE_CONFIG environment variable (exact file path), set <project>/parade.json, present <project>/.parade/parade.json (created automatically needed) configuration file uses JSON format. ’s example showing typical defaults research cluster: Note null JSON corresponds NA R, tells parade omit parameter entirely SLURM submission.","code":"{   \"slurm\": {     \"template\": \"registry://templates/parade-slurm.tmpl\",     \"defaults\": {       \"partition\": \"general\",       \"time\": \"2h\",        \"cpus_per_task\": 16,       \"mem\": null,       \"omp_num_threads\": 1     }   } }"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults.html","id":"inspecting-current-defaults","dir":"Articles","previous_headings":"Working with defaults programmatically","what":"Inspecting current defaults","title":"Using SLURM Defaults in parade","text":"","code":"# View all current defaults slurm_defaults_get()  # Check specific default values defaults <- slurm_defaults_get() defaults$time        # \"2h\" defaults$partition   # \"general\""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults.html","id":"building-resource-lists-with-overrides","dir":"Articles","previous_headings":"Working with defaults programmatically","what":"Building resource lists with overrides","title":"Using SLURM Defaults in parade","text":"slurm_resources() function combines defaults job-specific overrides:","code":"# Use defaults but override time and explicitly omit memory resources <- slurm_resources(list(time = \"90min\", mem = omit()))  # Submit job with these specific resources job <- submit_slurm(\"analysis.R\", resources = resources)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults.html","id":"updating-defaults-during-your-session","dir":"Articles","previous_headings":"Working with defaults programmatically","what":"Updating defaults during your session","title":"Using SLURM Defaults in parade","text":"","code":"# Change defaults temporarily (session only) slurm_defaults_set(mem = NA)           # omit --mem flag slurm_defaults_set(cpus_per_task = 8)  # reduce CPU count  # Make changes permanent by saving to config file slurm_defaults_set(time = \"1h\", persist = TRUE)  # Set multiple defaults at once slurm_defaults_set(   partition = \"gpu\",   time = \"4h\",    gres = \"gpu:1\",   persist = TRUE )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults.html","id":"overriding-defaults-in-job-submission","dir":"Articles","previous_headings":"","what":"Overriding defaults in job submission","title":"Using SLURM Defaults in parade","text":"can override defaults per-job basis passing resources argument submit_slurm():","code":"# Use defaults for most parameters, but need more time and memory for this job big_job <- submit_slurm(\"big_analysis.R\",                          resources = list(time = \"12h\", mem = \"32G\"))  # For a quick test job, use minimal resources test_job <- submit_slurm(\"test.R\",                           resources = list(time = \"5min\", cpus_per_task = 1))  # Submit to a different partition while keeping other defaults gpu_job <- submit_slurm(\"model_training.R\",                         resources = list(partition = \"gpu\", gres = \"gpu:2\"))"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults.html","id":"setting-up-defaults-for-different-cluster-environments","dir":"Articles","previous_headings":"Common use cases and examples","what":"Setting up defaults for different cluster environments","title":"Using SLURM Defaults in parade","text":"cluster rejects memory specifications: GPU cluster: high-memory jobs:","code":"slurm_defaults_set(   partition = \"compute\",   time = \"2h\",   cpus_per_task = 16,   mem = NA,              # Omit memory specification   persist = TRUE ) slurm_defaults_set(   partition = \"gpu\",   time = \"4h\",    cpus_per_task = 8,   mem = \"16G\",   gres = \"gpu:1\",   persist = TRUE ) slurm_defaults_set(   partition = \"highmem\",   time = \"8h\",   cpus_per_task = 32,   mem = \"128G\",   persist = TRUE )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults.html","id":"best-practices","dir":"Articles","previous_headings":"Common use cases and examples","what":"Best practices","title":"Using SLURM Defaults in parade","text":"Set defaults early: Configure defaults beginning project initializing paths_init() Use meaningful time limits: Set reasonable default time limits avoid jobs sitting queue unnecessarily Consider cluster policies: clusters reject certain flags (like --mem) - use NA omit Environment-specific configs: Use different config files PARADE_CONFIG environment variable different clusters Version control: Consider committing parade.json file version control team members share defaults approach keeps R code portable across clusters different SLURM policies resource requirements.","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"why-mirai","dir":"Articles","previous_headings":"","what":"Why mirai?","title":"Mirai backend: fast, scalable parallel execution","text":"mirai backend brings several powerful advantages parade workflows: connection limits: Scale beyond R’s 125 connection limit Low-latency execution: Persistent daemons dispatcher minimal overhead Secure remote execution: Built-TLS SSH tunneling support HPC compliance: Launch daemons SLURM maintaining scheduler policies Simple local development: Drop-replacement multisession better performance","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"local-development","dir":"Articles","previous_headings":"Quick Start","what":"Local development","title":"Mirai backend: fast, scalable parallel execution","text":"simplest way use mirai replacement standard multisession backend: provides instant parallelism without configuration, often better performance traditional backends many small tasks.","code":"library(parade)  # Initialize mirai with auto-detected cores mirai_init()  # Or use the distribution interface fl <- flow(grid) |>   stage(\"process\", function(x) x^2, schema = returns(y = dbl())) |>   distribute(use_mirai_local()) |>   collect()"},{"path":[]},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"local-daemons","dir":"Articles","previous_headings":"Distribution Patterns","what":"1. Local Daemons","title":"Mirai backend: fast, scalable parallel execution","text":"development single-machine workflows:","code":"# Basic local setup dist <- dist_mirai(n = 8)  # With explicit configuration dist <- dist_mirai(   n = parallel::detectCores(),   dispatcher = TRUE,  # Enable load balancing   within = \"mirai\",   # Use mirai for nested parallelization   workers_within = 4  # Nested workers per daemon )  # Apply to flow fl |> distribute(dist) |> collect()"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"slurm-managed-daemon-pools","dir":"Articles","previous_headings":"Distribution Patterns","what":"2. SLURM-Managed Daemon Pools","title":"Mirai backend: fast, scalable parallel execution","text":"Launch mirai daemons SLURM HPC-compliant distributed execution: daemons run SLURM jobs, ensuring compliance cluster policies providing low-latency task execution.","code":"# Configure SLURM-launched daemons dist <- use_mirai_slurm(   n = 16,                    # Number of daemon jobs   partition = \"compute\",     # SLURM partition   time = \"2:00:00\",         # Wall time   mem = \"32G\",              # Memory per daemon   cpus = 8,                 # CPUs per daemon   tls = TRUE,               # Use TLS encryption   port = 5555               # TLS port )  # Submit flow with SLURM daemons fl |>    distribute(dist) |>   submit()  # Returns immediately  # Monitor status deferred_status(handle) results <- deferred_collect(handle)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"ssh-tunneling-for-firewalled-clusters","dir":"Articles","previous_headings":"Distribution Patterns","what":"3. SSH Tunneling for Firewalled Clusters","title":"Mirai backend: fast, scalable parallel execution","text":"Connect remote nodes SSH, even direct connections blocked: SSH tunneling allows secure connections even restricted network environments.","code":"# SSH with tunneling (for firewalled nodes) dist <- use_mirai_ssh(   remotes = c(\"ssh://node1\", \"ssh://node2\", \"ssh://node3\"),   tunnel = TRUE,      # Use SSH tunneling   port = 40491       # Local port for tunnel )  # Direct SSH (when ports are open) dist <- use_mirai_ssh(   remotes = c(\"ssh://compute1\", \"ssh://compute2\"),   tunnel = FALSE )  fl |> distribute(dist) |> collect()"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"manual-daemon-setup","dir":"Articles","previous_headings":"Advanced Configuration","what":"Manual Daemon Setup","title":"Mirai backend: fast, scalable parallel execution","text":"full control mirai configuration:","code":"library(mirai) library(future)  # Set up custom TLS-secured daemons url <- host_url(tls = TRUE, port = 5555)  # Configure SLURM submission opts <- paste(   \"#SBATCH --partition=highmem\",   \"#SBATCH --time=04:00:00\",   \"#SBATCH --mem=64G\",   \"#SBATCH --job-name=my-analysis\",   sep = \"\\n\" )  cfg <- cluster_config(command = \"sbatch\", options = opts)  # Launch daemons daemons(n = 32, url = url, remote = cfg, dispatcher = TRUE)  # Use with parade via future plan(future.mirai::mirai_cluster) fl |> collect()"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"dynamic-scaling","dir":"Articles","previous_headings":"Advanced Configuration","what":"Dynamic Scaling","title":"Mirai backend: fast, scalable parallel execution","text":"Adjust daemon count based workload:","code":"# Start with a few daemons mirai_init(n = 4)  # Scale up for intensive processing mirai_scale(16) results <- collect(heavy_flow)  # Scale down when done mirai_scale(4)  # Check status mirai_status() mirai_dispatcher_status()"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"chunking-strategies","dir":"Articles","previous_headings":"Advanced Configuration","what":"Chunking Strategies","title":"Mirai backend: fast, scalable parallel execution","text":"Optimize task distribution mirai’s dispatcher:","code":"# Fine-grained parallelism (many small tasks) dist_mirai(   n = 16,   dispatcher = TRUE,     # Essential for load balancing   chunks_per_job = 1     # One group per task )  # Coarse-grained parallelism (fewer large tasks) dist_mirai(   n = 8,   dispatcher = FALSE,    # Direct task assignment   chunks_per_job = 10    # Bundle groups together )"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"example-1-large-scale-simulation-on-local-machine","dir":"Articles","previous_headings":"Practical Examples","what":"Example 1: Large-scale simulation on local machine","title":"Mirai backend: fast, scalable parallel execution","text":"","code":"library(parade)  # Parameter grid with 10,000 combinations grid <- expand.grid(   alpha = seq(0.1, 1, by = 0.1),   beta = seq(0.5, 5, by = 0.5),   n_sim = 1:100 )  # Use mirai to bypass connection limits fl <- flow(grid) |>   stage(\"simulate\", function(alpha, beta, n_sim) {     set.seed(n_sim)     data <- rgamma(1000, shape = alpha, rate = beta)     list(       mean = mean(data),       var = var(data),       ks_p = ks.test(data, \"pgamma\", alpha, beta)$p.value     )   }, schema = returns(mean = dbl(), var = dbl(), ks_p = dbl())) |>   distribute(dist_mirai(n = 200))  # 200 workers!  results <- collect(fl)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"example-2-remote-execution-on-hpc-cluster","dir":"Articles","previous_headings":"Practical Examples","what":"Example 2: Remote execution on HPC cluster","title":"Mirai backend: fast, scalable parallel execution","text":"","code":"# Development: test locally fl_dev <- fl |>    distribute(use_mirai_local(n = 4))  test_results <- fl_dev |> collect(limit = 100)  # Production: scale to cluster fl_prod <- fl |>   distribute(use_mirai_slurm(     n = 64,     partition = \"compute\",     time = \"12:00:00\",     mem = \"256G\",     account = \"project-123\"   ))  handle <- submit(fl_prod)  # Monitor progress while (!all(deferred_status(handle)$done)) {   status <- deferred_status(handle)   print(status)   Sys.sleep(30) }  final_results <- deferred_collect(handle)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"example-3-cross-platform-workflow","dir":"Articles","previous_headings":"Practical Examples","what":"Example 3: Cross-platform workflow","title":"Mirai backend: fast, scalable parallel execution","text":"","code":"# Detect environment and choose appropriate backend get_distribution <- function() {   if (Sys.getenv(\"SLURM_JOB_ID\") != \"\") {     # Running on SLURM     use_mirai_slurm(n = 32, partition = \"compute\")   } else if (file.exists(\"~/.ssh/compute_nodes\")) {     # Has SSH access to compute nodes     nodes <- readLines(\"~/.ssh/compute_nodes\")     use_mirai_ssh(remotes = nodes, tunnel = TRUE)   } else {     # Local development     use_mirai_local()   } }  # Portable workflow fl |>    distribute(get_distribution()) |>   collect()"},{"path":[]},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"optimizing-dispatcher-performance","dir":"Articles","previous_headings":"Performance Considerations","what":"Optimizing dispatcher performance","title":"Mirai backend: fast, scalable parallel execution","text":"dispatcher provides automatic load balancing adds slight overhead:","code":"# For homogeneous tasks (similar runtime) dist_mirai(n = 16, dispatcher = FALSE)  # For heterogeneous tasks (varying runtime) dist_mirai(n = 16, dispatcher = TRUE)  # For embarrassingly parallel workflows dist_mirai(   n = 32,   dispatcher = TRUE,   chunks_per_job = 1  # Maximum parallelism )"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"common-issues-and-solutions","dir":"Articles","previous_headings":"Troubleshooting","what":"Common issues and solutions","title":"Mirai backend: fast, scalable parallel execution","text":"Issue: “connect daemons” Issue: “Tasks distributing evenly” Issue: “SSH connection fails” Issue: “SLURM daemons starting”","code":"# Check daemon status mirai_status()  # Restart daemons mirai_stop() mirai_init() # Ensure dispatcher is enabled dist_mirai(n = 16, dispatcher = TRUE)  # Check dispatcher status mirai_dispatcher_status() # Test SSH manually first system(\"ssh node1 echo 'connected'\")  # Use verbose mode for debugging Sys.setenv(MIRAI_DEBUG = \"TRUE\") # Check SLURM submission manually mirai::daemons(   n = 1,   url = mirai::host_url(tls = TRUE),   remote = mirai::cluster_config(     command = \"sbatch\",     options = \"#SBATCH --partition=debug\\n#SBATCH --time=00:05:00\"   ) )  # Check SLURM queue system(\"squeue -u $USER\")"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"best-practices","dir":"Articles","previous_headings":"","what":"Best Practices","title":"Mirai backend: fast, scalable parallel execution","text":"Always cleanup daemons: Use stop_on_exit = TRUE (default) explicitly call mirai_stop() Choose appropriate daemon count: Local: number cores Remote: 2-4x number physical machines SLURM: Based partition limits Use TLS production: Enable encryption sensitive data Monitor resource usage: Track daemon performance Test locally scaling: Verify workflow correctness","code":"dist_mirai(n = 16, tls = TRUE, port = 5555) # During execution mirai_dispatcher_status()  # After completion mirai_status() # Development fl |> distribute(use_mirai_local(n = 2)) |> collect(limit = 10)  # Production fl |> distribute(use_mirai_slurm(n = 64)) |> submit()"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Mirai backend: fast, scalable parallel execution","text":"mirai backend extends parade’s capabilities : Unlimited parallelism: connection limits Flexible deployment: Local, SSH, SLURM Enhanced security: TLS SSH tunneling Better performance: Low-latency task execution Simple interface: Drop-replacement existing backends Whether ’re developing locally scaling hundreds nodes, mirai provides performance flexibility needed modern parallel computing workflows.","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"the-problem-hardcoded-paths-break-your-code","dir":"Articles","previous_headings":"","what":"The Problem: Hardcoded Paths Break Your Code","title":"Smart Path Management: Write Once, Run Anywhere","text":"Imagine ’re developing neuroimaging analysis laptop. code might look like : collaborator runs code HPC cluster, breaks immediately: /Users/alice/ doesn’t exist Linux clusters Different clusters completely different filesystem layouts Writing large files home directories often violates cluster policies collaborator Bob can’t run code without rewriting paths","code":"# Works on your laptop model <- readRDS(\"/Users/alice/projects/brain_study/models/brain_model.rds\") results <- analyze_brain(model) saveRDS(results, \"/Users/alice/projects/brain_study/outputs/results.rds\")"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"the-solution-portable-path-aliases","dir":"Articles","previous_headings":"","what":"The Solution: Portable Path Aliases","title":"Smart Path Management: Write Once, Run Anywhere","text":"parade solves smart path aliases automatically adapt environment: artifacts:// prefix portable alias parade automatically translates: laptop: → /var/folders/.../parade-artifacts/ SLURM cluster: → /scratch/$USER/parade-artifacts/ collaborator’s machine: → whatever appropriate storage location broken paths. rewriting code different systems.","code":"library(parade)  # Same code works everywhere model <- readRDS(resolve_path(\"artifacts://models/brain_model.rds\")) results <- analyze_brain(model) saveRDS(results, resolve_path(\"artifacts://outputs/results.rds\"))"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"quick-start-your-first-portable-analysis","dir":"Articles","previous_headings":"","what":"Quick Start: Your First Portable Analysis","title":"Smart Path Management: Write Once, Run Anywhere","text":"Let’s make simple analysis portable three steps:","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"step-1-initialize-parades-path-system","dir":"Articles","previous_headings":"Quick Start: Your First Portable Analysis","what":"Step 1: Initialize parade’s path system","title":"Smart Path Management: Write Once, Run Anywhere","text":"","code":"library(parade)  # Auto-detect your environment and set up paths paths_init()  # See where your aliases point paths_get() #> project:   /home/alice/myproject #> data:      /home/alice/myproject/data #> artifacts: /tmp/RtmpXYZ/parade-artifacts #> registry:  /tmp/RtmpXYZ/parade-registry"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"step-2-use-aliases-instead-of-hardcoded-paths","dir":"Articles","previous_headings":"Quick Start: Your First Portable Analysis","what":"Step 2: Use aliases instead of hardcoded paths","title":"Smart Path Management: Write Once, Run Anywhere","text":"","code":"# Before (breaks on different systems): data <- read.csv(\"/home/alice/myproject/data/experiment.csv\") saveRDS(model, \"/home/alice/myproject/outputs/model.rds\")  # After (works everywhere): data <- read.csv(resolve_path(\"data://experiment.csv\")) saveRDS(model, resolve_path(\"artifacts://model.rds\"))"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"step-3-run-the-same-code-anywhere","dir":"Articles","previous_headings":"Quick Start: Your First Portable Analysis","what":"Step 3: Run the same code anywhere","title":"Smart Path Management: Write Once, Run Anywhere","text":"’s ! code now works system without modification.","code":"# On your laptop paths_init() saveRDS(big_model, resolve_path(\"artifacts://models/final.rds\")) # Saves to: /var/folders/temp/parade-artifacts/models/final.rds  # On HPC cluster (same code!) paths_init() saveRDS(big_model, resolve_path(\"artifacts://models/final.rds\")) # Saves to: /scratch/alice/parade-artifacts/models/final.rds"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"understanding-the-seven-path-aliases","dir":"Articles","previous_headings":"","what":"Understanding the Seven Path Aliases","title":"Smart Path Management: Write Once, Run Anywhere","text":"parade provides seven aliases, designed specific type data workflow:","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"core-data-aliases","dir":"Articles","previous_headings":"Understanding the Seven Path Aliases","what":"Core Data Aliases","title":"Smart Path Management: Write Once, Run Anywhere","text":"data:// - Input datasets (read-) artifacts:// - Analysis outputs (large files) project:// - code scripts","code":"# Your raw data, reference files, shared datasets brain_atlas <- readRDS(resolve_path(\"data://references/MNI_atlas.rds\")) subjects <- read.csv(resolve_path(\"data://participants.csv\")) # Models, results, processed data - goes to fast scratch storage saveRDS(fitted_model, resolve_path(\"artifacts://models/model_v2.rds\")) write.csv(results, resolve_path(\"artifacts://results/final_results.csv\")) # Source files, small configuration files source(\"project://R/analysis_functions.R\") params <- yaml::read_yaml(\"project://config/params.yaml\")"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"system-aliases","dir":"Articles","previous_headings":"Understanding the Seven Path Aliases","what":"System Aliases","title":"Smart Path Management: Write Once, Run Anywhere","text":"scratch:// - Temporary files (deleted jobs) registry:// - Job management files config:// - parade configuration cache:// - Downloaded/cached data","code":"# Intermediate files, working data temp_file <- \"scratch://temp_processing.rds\" # SLURM templates, job scripts (managed by parade) template <- \"registry://templates/my_slurm.tmpl\" # Settings, profiles (usually automatic) \"config://profiles/production.json\" # Reusable downloads, package data \"cache://downloaded/large_dataset.tar.gz\""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"scenario-1-laptop-development-hpc-production","dir":"Articles","previous_headings":"Common Scenarios","what":"Scenario 1: Laptop Development → HPC Production","title":"Smart Path Management: Write Once, Run Anywhere","text":"’re developing laptop small test data, running full analysis cluster:","code":"# During development (laptop) paths_init() paths_set(   data = \"~/projects/test_data\",      # Small test dataset   artifacts = \"~/projects/outputs\"     # Local outputs )  # Your analysis code (unchanged!) run_analysis <- function() {   data <- readRDS(\"data://brain_scans.rds\")   model <- fit_model(data)   saveRDS(model, \"artifacts://fitted_model.rds\") }  # In production (HPC cluster)  paths_init() paths_set(   data = \"/shared/datasets/full_data\",     # Full dataset   artifacts = \"/scratch/$USER/outputs\"     # Fast scratch storage )  # Same analysis code still works! run_analysis()"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"scenario-2-collaboration-with-different-systems","dir":"Articles","previous_headings":"Common Scenarios","what":"Scenario 2: Collaboration with Different Systems","title":"Smart Path Management: Write Once, Run Anywhere","text":"Alice Bob collaborating different setups:","code":"# Alice's setup (Mac laptop) paths_init() #> artifacts: /var/folders/abc/temp/parade-artifacts  # Bob's setup (Linux workstation)  paths_init() #> artifacts: /tmp/bob/parade-artifacts  # Shared analysis code (works for both!) analyze_subjects <- function(subjects) {   for (subj in subjects) {     data <- readRDS(resolve_path(sprintf(\"data://subjects/%s.rds\", subj)))     results <- process_subject(data)     saveRDS(results, resolve_path(sprintf(\"artifacts://results/%s.rds\", subj)))   } }"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"scenario-3-multi-stage-pipeline-with-different-storage-needs","dir":"Articles","previous_headings":"Common Scenarios","what":"Scenario 3: Multi-stage Pipeline with Different Storage Needs","title":"Smart Path Management: Write Once, Run Anywhere","text":"Different stages pipeline need different storage strategies:","code":"library(parade)  # Configure storage for each data type paths_init() paths_set(   data = \"/shared/readonly/inputs\",       # Shared input data   scratch = Sys.getenv(\"SLURM_TMPDIR\"),  # Fast local SSD   artifacts = \"/scratch/$USER/outputs\"    # Persistent scratch )  # Pipeline uses appropriate storage for each stage flow(subjects) |>      # Stage 1: Load from shared storage   stage(\"load\", function(subject) {     readRDS(sprintf(\"data://raw/%s.rds\", subject))   }) |>      # Stage 2: Process using fast local storage   stage(\"process\", function(data) {     temp_file <- sprintf(\"scratch://processing_%s.rds\", data$id)     # ... heavy processing using temp_file ...   }) |>      # Stage 3: Save results to scratch   stage(\"save\", function(results) {     saveRDS(results, sprintf(\"artifacts://final/%s.rds\", results$id))   })"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"automatic-detection","dir":"Articles","previous_headings":"Configuring for Your HPC System","what":"Automatic Detection","title":"Smart Path Management: Write Once, Run Anywhere","text":"parade automatically detects common HPC environments:","code":"# Auto-detects SLURM paths_init() # Automatically uses $SLURM_TMPDIR for scratch  # Auto-detects PBS paths_init()   # Automatically uses $PBS_O_WORKDIR  # Auto-detects SGE paths_init() # Automatically uses $TMPDIR"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"manual-configuration","dir":"Articles","previous_headings":"Configuring for Your HPC System","what":"Manual Configuration","title":"Smart Path Management: Write Once, Run Anywhere","text":"custom HPC setups, explicitly set paths:","code":"# Configure once for your HPC system paths_set(   scratch = \"/fast/local/$USER\",           # Fast local SSD   artifacts = \"/lustre/$USER/outputs\",     # Parallel filesystem   registry = \"/lustre/$USER/jobs\",         # Shared job storage   data = \"/projects/shared/datasets\"       # Readonly shared data )  # Save configuration for future sessions paths_set(..., persist = TRUE)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"environment-variables","dir":"Articles","previous_headings":"Configuring for Your HPC System","what":"Environment Variables","title":"Smart Path Management: Write Once, Run Anywhere","text":"Set system-wide defaults via environment variables:","code":"# In ~/.bashrc or job scripts export PARADE_SCRATCH=\"/fast/scratch/$USER\" export PARADE_ARTIFACTS=\"/fast/scratch/$USER/outputs\" export PARADE_DATA=\"/projects/shared/data\""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"pattern-1-dynamic-environment-switching","dir":"Articles","previous_headings":"Advanced Patterns","what":"Pattern 1: Dynamic Environment Switching","title":"Smart Path Management: Write Once, Run Anywhere","text":"","code":"# Detect and configure based on environment setup_paths <- function() {   if (interactive()) {     # Development settings     paths_set(artifacts = \"~/temp/dev_outputs\")     message(\"Using development paths\")        } else if (Sys.getenv(\"SLURM_JOB_ID\") != \"\") {     # Production SLURM settings     paths_set(       scratch = Sys.getenv(\"SLURM_TMPDIR\"),       artifacts = sprintf(\"/scratch/%s/prod_outputs\", Sys.getenv(\"USER\"))     )     message(\"Using SLURM production paths\")        } else {     # Default settings     paths_init()     message(\"Using default paths\")   } }"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"pattern-2-project-specific-organization","dir":"Articles","previous_headings":"Advanced Patterns","what":"Pattern 2: Project-Specific Organization","title":"Smart Path Management: Write Once, Run Anywhere","text":"","code":"# Organize outputs by analysis phase paths_set(   artifacts = \"/scratch/$USER/project_X\" )  # Create structured output directories save_results <- function(phase, name, object) {   path <- sprintf(\"artifacts://%s/%s.rds\", phase, name)   saveRDS(object, path) }  # Usage save_results(\"preprocessing\", \"cleaned_data\", cleaned) save_results(\"modeling\", \"final_model\", model) save_results(\"validation\", \"cv_results\", cv)  # Results in: # /scratch/$USER/project_X/preprocessing/cleaned_data.rds # /scratch/$USER/project_X/modeling/final_model.rds # /scratch/$USER/project_X/validation/cv_results.rds"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"pattern-3-integration-with-sinks","dir":"Articles","previous_headings":"Advanced Patterns","what":"Pattern 3: Integration with Sinks","title":"Smart Path Management: Write Once, Run Anywhere","text":"","code":"# Sinks automatically use path aliases sink_spec(   fields = c(\"model\", \"predictions\"),   dir = \"artifacts://models\",  # Portable path   template = \"{subject}/{session}_{task}.rds\" )  # Different storage for different output types model_sink <- sink_spec(   fields = \"model\",   dir = \"artifacts://large_models\",  # Goes to scratch   format = \"rds\" )  config_sink <- sink_spec(   fields = \"params\",   dir = \"project://configs\",  # Stays with code   format = \"json\" )"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"resolve_path---convert-aliases-to-absolute-paths","dir":"Articles","previous_headings":"Path Resolution Functions","what":"resolve_path() - Convert aliases to absolute paths","title":"Smart Path Management: Write Once, Run Anywhere","text":"","code":"# Resolve any path with an alias resolve_path(\"artifacts://model.rds\") #> \"/scratch/alice/parade-artifacts/model.rds\"  resolve_path(\"data://raw/scan.nii\") #> \"/shared/datasets/raw/scan.nii\"  # Works with regular paths too resolve_path(\"/absolute/path.txt\")   # Already absolute resolve_path(\"relative/path.txt\")    # Made absolute"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"path_here---build-paths-from-components","dir":"Articles","previous_headings":"Path Resolution Functions","what":"path_here() - Build paths from components","title":"Smart Path Management: Write Once, Run Anywhere","text":"","code":"# Construct paths programmatically model_dir <- path_here(\"artifacts\", \"models\", \"v2\") #> \"/scratch/alice/parade-artifacts/models/v2\"  # Automatically creates directories output_dir <- path_here(\"artifacts\", \"results\", create = TRUE)  # Skip auto-creation if needed temp_path <- path_here(\"scratch\", \"temp\", create = FALSE)"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"issue-cannot-find-path-alias","dir":"Articles","previous_headings":"Troubleshooting","what":"Issue: “Cannot find path alias”","title":"Smart Path Management: Write Once, Run Anywhere","text":"","code":"# Check your current configuration paths_get()  # Re-initialize if needed paths_init()"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"issue-permission-denied-when-writing","dir":"Articles","previous_headings":"Troubleshooting","what":"Issue: “Permission denied” when writing","title":"Smart Path Management: Write Once, Run Anywhere","text":"","code":"# Check that your aliases point to writable locations paths_get()  # Update to writable directory paths_set(artifacts = \"/tmp/my_outputs\")"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"issue-different-paths-on-different-nodes","dir":"Articles","previous_headings":"Troubleshooting","what":"Issue: Different paths on different nodes","title":"Smart Path Management: Write Once, Run Anywhere","text":"","code":"# Use node-local storage for better performance paths_set(   scratch = ifelse(     Sys.getenv(\"SLURM_TMPDIR\") != \"\",     Sys.getenv(\"SLURM_TMPDIR\"),  # Node-local on SLURM     \"/tmp\"                          # Fallback   ) )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"best-practices","dir":"Articles","previous_headings":"","what":"Best Practices","title":"Smart Path Management: Write Once, Run Anywhere","text":"Initialize paths start every script Use appropriate aliases different data types data:// inputs (read-) artifacts:// outputs (large files) scratch:// temporary files Never hardcode absolute paths Document path configuration","code":"library(parade) paths_init() # Bad saveRDS(model, \"/home/alice/outputs/model.rds\")  # Good saveRDS(model, resolve_path(\"artifacts://model.rds\")) # Show configuration in logs message(\"Parade paths configured:\") print(paths_get())"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Smart Path Management: Write Once, Run Anywhere","text":"Now understand portable paths, learn : Using Artifacts Sinks automatic data management SLURM Integration cluster computing Core Workflow Concepts building complete pipelines","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"SLURM script submission and monitoring from R","text":"parade provides comprehensive suite tools submit R script SLURM monitor interactively within R—shell access required. approach gives full power SLURM job scheduling maintaining convenience R-based workflow management.","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"key-monitoring-capabilities","dir":"Articles","previous_headings":"","what":"Key monitoring capabilities","title":"SLURM script submission and monitoring from R","text":"Live resource monitoring: Real-time CPU usage, memory consumption, job status Interactive dashboards: Single job (script_top()) multi-job (jobs_top()) monitoring Log streaming: View live output running jobs (script_tail()) Status checking: Quick job state queries (script_status()) Job management: Cancel, wait , track multiple jobs Error handling: Automatic detection failed jobs error diagnostics","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"quick-start-example","dir":"Articles","previous_headings":"","what":"Quick start example","title":"SLURM script submission and monitoring from R","text":"","code":"library(parade) paths_init()  # Optional: Configure site defaults # Note: mem=NA means use cluster default memory allocation slurm_defaults_set(partition=\"general\", time=\"2h\", cpus_per_task=16, mem=NA, persist=TRUE) slurm_template_set(\"registry://templates/parade-slurm.tmpl\")  # Submit a script file job <- submit_slurm(\"scripts/train.R\", args = c(\"--fold\", \"1\"))  # Or submit a function directly (requires parade ≥ 0.12.0) job <- slurm_call(   function(fold) {     # Your training code here     message(\"Training fold \", fold)     model <- train_model(fold)     return(model)   },   fold = 1,   name = \"train-fold-1\",   write_result = \"artifacts://models/fold1.rds\" )  # Quick status check script_status(job)  # View recent log output script_tail(job, 80)  # Launch interactive monitor script_top(job, refresh = 2, nlog = 40)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"uniform-verbs-with-function-submissions","dir":"Articles","previous_headings":"","what":"Uniform verbs with function submissions","title":"SLURM script submission and monitoring from R","text":"jobset collection one jobs can managed together. default, slurm_call() returns single job object, can request jobset (one-element collection) use workflow verbs work multiple jobs: multiple inputs pattern identical slurm_map():","code":"# Submit a single function job, returned as a one-element jobset jobs <- slurm_call(   function(file) {     # Pretend to do useful work     message(\"Processing \", basename(file))     Sys.sleep(1)     read.csv(file)[1:5, ]   },   file = \"data/example.csv\",   name = \"proc-example\",   write_result = path$artifacts(\"results/{run}/{stem}.rds\"),   .as_jobset = TRUE  # Return as jobset instead of single job )  # Now you can use jobset verbs: # - progress(): Show a progress bar while jobs run # - collect(): Wait for completion and retrieve results # - status(): Check job states # - cancel(): Cancel running jobs jobs |> progress() |> collect()  # Open logs if needed (no-ops for local engine) open_logs(jobs, selection = \"all\") files <- glob(\"data/*.csv\") jobs <- slurm_map(   files,   ~ read.csv(.x)[1:5, ],   .name_by = stem(),   .write_result = path$artifacts(\"results/{run}/{stem}.rds\") )  # Advertise the progress() convenience explicitly jobs |> progress() |> collect()"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"single-job-monitoring-script_top","dir":"Articles","previous_headings":"Core monitoring functions","what":"Single job monitoring: script_top()","title":"SLURM script submission and monitoring from R","text":"script_top() function provides real-time, interactive dashboard monitoring single SLURM job: Features displayed: - Job identification: Name, SLURM job ID, assigned node - Resource usage: CPU percentage visual progress bar, allocated vs. used CPUs - Memory statistics: Average maximum RSS (Resident Set Size), virtual memory usage - Timing information: Elapsed time, CPU time used, uptime since monitoring started - Live log output: recent log lines job (configurable number) - Status tracking: Automatically detects jobs complete fail Parameters: - refresh: Update interval seconds (default: 2) - nlog: Number recent log lines display (default: 30) - clear: Whether clear screen updates smoother display (default: TRUE)","code":"job <- submit_slurm(\"analysis.R\") script_top(job, refresh = 2, nlog = 30, clear = TRUE)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"multi-job-dashboard-jobs_top","dir":"Articles","previous_headings":"Core monitoring functions","what":"Multi-job dashboard: jobs_top()","title":"SLURM script submission and monitoring from R","text":"Monitor multiple jobs simultaneously tabular overview plus detailed logs running jobs: Display format: - Summary line: Count jobs state (PENDING=1, RUNNING=2, etc.) - Job table: Compact view name, job ID, state, CPU%, allocated CPUs, max memory, elapsed time, node - Live log tail: Recent output first running job Flexible input formats:","code":"# Submit multiple jobs job1 <- submit_slurm(\"preprocess.R\", args = c(\"--dataset\", \"A\")) job2 <- submit_slurm(\"preprocess.R\", args = c(\"--dataset\", \"B\")) job3 <- submit_slurm(\"model_train.R\")  # Monitor all jobs together jobs_top(list(job1, job2, job3), refresh = 3, nlog = 20) # List of job objects jobs_top(list(job1, job2, job3))  # Data frame with job column df <- data.frame(name = c(\"job1\", \"job2\"), job = list(job1, job2)) jobs_top(df)  # Registry paths as strings jobs_top(c(\"registry://script-abc123\", \"registry://script-def456\"))"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"status-checking-script_status","dir":"Articles","previous_headings":"Essential job management functions","what":"Status checking: script_status()","title":"SLURM script submission and monitoring from R","text":"Get current job state without launching full monitor:","code":"status <- script_status(job) print(status) # # A tibble: 1 × 5 #   pending started running  done error #     <int>   <int>   <int> <int> <int> #        0       0       1     0     0  # Detailed view includes full batchtools information detailed <- script_status(job, detail = TRUE)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"log-viewing-script_tail","dir":"Articles","previous_headings":"Essential job management functions","what":"Log viewing: script_tail()","title":"SLURM script submission and monitoring from R","text":"Display recent log output job:","code":"# Show last 50 lines script_tail(job, n = 50)  # Quick check of recent output script_tail(job)  # Default: 200 lines"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"resource-metrics-script_metrics","dir":"Articles","previous_headings":"Essential job management functions","what":"Resource metrics: script_metrics()","title":"SLURM script submission and monitoring from R","text":"Get detailed resource usage statistics:","code":"metrics <- script_metrics(job) print(metrics) # $job_id # [1] \"12345\" #  # $state # [1] \"RUNNING\" #  # $cpu_pct # [1] 87.3 #  # $max_rss # [1] 1024000000  # bytes"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"job-completion-script_done","dir":"Articles","previous_headings":"Essential job management functions","what":"Job completion: script_done()","title":"SLURM script submission and monitoring from R","text":"Check job finished (successfully errors):","code":"if (script_done(job)) {   cat(\"Job completed!\\n\")   # Process results... } else {   cat(\"Job still running...\\n\") }"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"waiting-for-completion-script_await","dir":"Articles","previous_headings":"Advanced job management","what":"Waiting for completion: script_await()","title":"SLURM script submission and monitoring from R","text":"Block execution job completes:","code":"# Wait indefinitely script_await(job)  # Wait with timeout (5 minutes) script_await(job, timeout = 300)  # Custom polling interval script_await(job, timeout = 600, poll = 30)  # Check every 30 seconds"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"canceling-jobs-script_cancel","dir":"Articles","previous_headings":"Advanced job management","what":"Canceling jobs: script_cancel()","title":"SLURM script submission and monitoring from R","text":"Stop running jobs:","code":"script_cancel(job)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"finding-recent-jobs-script_find_latest","dir":"Articles","previous_headings":"Advanced job management","what":"Finding recent jobs: script_find_latest()","title":"SLURM script submission and monitoring from R","text":"Locate recently submitted jobs don’t job object:","code":"# Find 5 most recent jobs recent <- script_find_latest(n = 5) print(recent)  # Load a job from its registry path job <- script_load(recent$registry[1])"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"function-submission-with-slurm_call","dir":"Articles","previous_headings":"","what":"Function submission with slurm_call()","title":"SLURM script submission and monitoring from R","text":"New parade 0.12.0, slurm_call() allows submit R functions directly SLURM without creating script files. ideal interactive development, parameter sweeps, functional programming workflows.","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"basic-function-submission","dir":"Articles","previous_headings":"Function submission with slurm_call()","what":"Basic function submission","title":"SLURM script submission and monitoring from R","text":"","code":"# Submit a simple function job <- slurm_call(   function(x, y) {     result <- x^2 + y^2     message(\"Computed: \", result)     return(result)   },   x = 3,   y = 4,   name = \"pythagorean\" )  # Monitor just like any other job script_top(job)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"resource-profiles","dir":"Articles","previous_headings":"Function submission with slurm_call()","what":"Resource profiles","title":"SLURM script submission and monitoring from R","text":"Parade 0.12.0 introduces resource profiles easier resource management:","code":"# Use built-in profiles job <- slurm_call(my_function, x = 1, resources = \"gpu\") job <- slurm_call(my_function, x = 1, resources = \"highmem\")  # Create custom profiles with chaining my_profile <- profile() %>%   time(\"8:00:00\") %>%   mem(\"32G\") %>%   cpus(16) %>%   partition(\"compute\")  job <- slurm_call(my_function, x = 1, resources = my_profile)  # Register profiles for reuse profile_register(\"ml_training\",   profile() %>%     time(\"24:00:00\") %>%     mem(\"64G\") %>%     cpus(32) %>%     gpus(2) )  # Use registered profile by name job <- slurm_call(train_model, data = data, resources = \"ml_training\")"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"working-with-packages","dir":"Articles","previous_headings":"Function submission with slurm_call()","what":"Working with packages","title":"SLURM script submission and monitoring from R","text":"Specify packages load compute node:","code":"job <- slurm_call(   function(n, mu, sigma) {     # Packages are loaded before function execution     data <- rnorm(n, mean = mu, sd = sigma)     model <- lm(data ~ seq_along(data))     return(summary(model))   },   n = 1000,   mu = 100,    sigma = 15,   packages = c(\"stats\"),   name = \"linear-model\" )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"saving-results-to-artifacts","dir":"Articles","previous_headings":"Function submission with slurm_call()","what":"Saving results to artifacts","title":"SLURM script submission and monitoring from R","text":"Use write_result persist function output:","code":"# Results are automatically saved to the specified path job <- slurm_call(   function(size) {     matrix(runif(size * size), nrow = size)   },   size = 1000,   write_result = \"artifacts://matrices/random_1000.rds\",   resources = list(mem = \"8G\") )  # Wait for job to complete script_await(job)  # Check job status and load result safely status <- script_status(job, detail = TRUE) if (status$done == 1 && status$error == 0) {   # Job succeeded - load the result   if (!is.null(job$result_path) && file.exists(job$result_path)) {     mat <- readRDS(job$result_path)     dim(mat)  # [1] 1000 1000   } else {     warning(\"Result file not found at expected path\")   } } else {   # Job failed - check logs for errors   warning(\"Job failed - check logs with script_tail(job)\") }"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"parameter-sweeps","dir":"Articles","previous_headings":"Function submission with slurm_call()","what":"Parameter sweeps","title":"SLURM script submission and monitoring from R","text":"Combine lapply parallel parameter exploration:","code":"# Submit multiple function calls with different parameters parameters <- expand.grid(   alpha = c(0.01, 0.1, 1.0),   beta = c(0.5, 1.0, 2.0) )  jobs <- mapply(function(a, b) {   slurm_call(     function(alpha, beta) {       # Your model fitting code here       result <- fit_model(alpha, beta)       return(list(alpha = alpha, beta = beta, score = result$score))     },     alpha = a,     beta = b,     name = sprintf(\"model-a%.2f-b%.2f\", a, b),     write_result = sprintf(\"artifacts://models/fit_a%.2f_b%.2f.rds\", a, b)   ) }, parameters$alpha, parameters$beta, SIMPLIFY = FALSE)  # Monitor all parameter sweep jobs jobs_top(jobs)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"closures-and-captured-variables","dir":"Articles","previous_headings":"Function submission with slurm_call()","what":"Closures and captured variables","title":"SLURM script submission and monitoring from R","text":"slurm_call() serializes function’s environment, closures work naturally:","code":"# Configuration captured in closure config <- list(   iterations = 1000,   tolerance = 1e-6,   method = \"newton\" )  optimizer <- function(data) {   # config is available here   optimize_with_config(data, config) }  job <- slurm_call(   optimizer,   data = my_dataset,   name = \"optimization\",   resources = list(time = \"4:00:00\") )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"important-considerations","dir":"Articles","previous_headings":"Function submission with slurm_call()","what":"Important considerations","title":"SLURM script submission and monitoring from R","text":"Serialization size: function environment serialized saveRDS(). Large captured objects increase overhead. Working directory: Functions execute temporary staging directory. Use parade’s path system data access: Comparison submit_slurm(): Use submit_slurm() : existing scripts, complex workflows, shell integration Use slurm_call() : interactive development, parameter sweeps, functional pipelines","code":"slurm_call(   function() {     data <- readRDS(resolve_path(\"data://input.rds\"))     result <- process(data)     saveRDS(result, resolve_path(\"artifacts://output.rds\"))   } )"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"scenario-1-long-running-training-job","dir":"Articles","previous_headings":"Practical monitoring scenarios","what":"Scenario 1: Long-running training job","title":"SLURM script submission and monitoring from R","text":"","code":"# Submit training job with generous time limit job <- submit_slurm(\"train_model.R\",                      resources = list(time = \"24:00:00\", mem = \"32G\"))  # Quick status check if (script_status(job)$running > 0) {   cat(\"Training started successfully\\n\")      # Monitor for a few minutes, then leave it running   script_top(job, refresh = 5, nlog = 20) } else {   cat(\"Job may be queued or failed\\n\")   script_tail(job, 100)  # Check for error messages }"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"scenario-2-batch-processing-pipeline","dir":"Articles","previous_headings":"Practical monitoring scenarios","what":"Scenario 2: Batch processing pipeline","title":"SLURM script submission and monitoring from R","text":"","code":"# Submit preprocessing jobs for multiple datasets datasets <- c(\"dataset_A\", \"dataset_B\", \"dataset_C\") prep_jobs <- lapply(datasets, function(d) {   submit_slurm(\"preprocess.R\", args = c(\"--input\", d)) })  # Monitor all preprocessing jobs_top(prep_jobs, refresh = 5)  # Wait for all to complete lapply(prep_jobs, script_await)  # Submit analysis job that depends on preprocessing analysis_job <- submit_slurm(\"analyze_results.R\") script_top(analysis_job)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"scenario-3-troubleshooting-failed-jobs","dir":"Articles","previous_headings":"Practical monitoring scenarios","what":"Scenario 3: Troubleshooting failed jobs","title":"SLURM script submission and monitoring from R","text":"","code":"job <- submit_slurm(\"problematic_script.R\")  # Check if job completed if (script_done(job)) {   status <- script_status(job)      if (status$error > 0) {     cat(\"Job failed! Checking logs...\\n\")          # View full log output for debugging     script_tail(job, n = 500)          # Get log file paths for detailed analysis     logs <- script_logs(job)     cat(\"Log files:\", logs$path, \"\\n\")   } else {     cat(\"Job completed successfully\\n\")   } }"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"resource-optimization","dir":"Articles","previous_headings":"Tips for efficient monitoring","what":"Resource optimization","title":"SLURM script submission and monitoring from R","text":"Monitor CPU usage: Look jobs using less expected CPU% - may indicate /O bottlenecks Track memory patterns: MaxRSS shows peak memory usage; compare requested memory Watch memory leaks: Increasing AveRSS time may indicate memory management issues","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"interactive-monitoring-best-practices","dir":"Articles","previous_headings":"Tips for efficient monitoring","what":"Interactive monitoring best practices","title":"SLURM script submission and monitoring from R","text":"Use appropriate refresh rates: Fast updates (1-2s) active debugging, slower (5-10s) long jobs Adjust log lines: lines (nlog = 100) detailed debugging, fewer (nlog = 10) overview Background monitoring: Use clear = FALSE capturing output running non-interactively","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"multi-job-management","dir":"Articles","previous_headings":"Tips for efficient monitoring","what":"Multi-job management","title":"SLURM script submission and monitoring from R","text":"Group related jobs: Monitor job families together jobs_top() Stagger job submission: Avoid overwhelming scheduler simultaneous submissions Use descriptive names: Job names appear monitoring displays—make informative","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"common-monitoring-issues","dir":"Articles","previous_headings":"Error handling and troubleshooting","what":"Common monitoring issues","title":"SLURM script submission and monitoring from R","text":"“fetch metrics” error: - Ensure SLURM commands (squeue, sstat, sacct) available - Check job ID valid job hasn’t purged SLURM records - Verify SLURM permissions cluster connectivity Empty log output: - Job may started writing output yet - Check job status—may pending queue - Verify output redirection SLURM template Memory metrics showing NA: - metrics unavailable job starts running - SLURM accounting may enabled cluster - Try script_metrics() directly see raw data","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"recovery-strategies","dir":"Articles","previous_headings":"Error handling and troubleshooting","what":"Recovery strategies","title":"SLURM script submission and monitoring from R","text":"Lost job objects: Monitor jobs different R sessions: comprehensive monitoring system makes SLURM job management convenient local R execution providing scalability resource management benefits cluster computing.","code":"# Find recent jobs recent <- script_find_latest(pattern = \"train\") job <- script_load(recent$registry[1]) # Jobs persist across R sessions via registry job_path <- \"registry://script-abc123\" job <- script_load(job_path) script_top(job)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"what-are-sinks-and-artifacts","dir":"Articles","previous_headings":"","what":"What are sinks and artifacts?","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"Sinks parade provide powerful mechanism persisting large computational results disk instead keeping memory. stages produce big objects (models, large datasets, complex results), sinks automatically write files return lightweight file references instead.","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"key-benefits","dir":"Articles","previous_headings":"What are sinks and artifacts?","what":"Key benefits","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"Memory efficiency: Large objects don’t accumulate memory across pipeline stages Format flexibility: Support RDS, CSV, JSON, Parquet, custom formats Persistence: Results survive R session crashes can accessed later Atomic writes: Files written safely without corruption risks Metadata tracking: Optional JSON sidecars checksums (sha256) byte sizes Flexible organization: Configurable directory structures file naming","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"quick-start-sink_quick-for-rapid-prototyping","dir":"Articles","previous_headings":"","what":"Quick start: sink_quick() for rapid prototyping","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"New parade 0.12.0, sink_quick() provides fastest way create sinks:","code":"# One-liner sink using registered format sink <- sink_quick(\"result\", write = \"rds\")  # CSV sink with formula syntax csv_sink <- sink_quick(\"data\",   write = ~ write.csv(.x, .path, row.names = FALSE),   read = ~ read.csv(.path, stringsAsFactors = FALSE),   ext = \".csv\" )  # Temporary sink for testing (writes to tempdir) tmp_sink <- sink_temp(\"output\", write = \"json\")  # Use in a flow fl <- flow(grid) |>   stage(\"process\",     f = function(x) list(result = process_data(x)),     schema = returns(result = artifact()),     sink = sink_quick(\"result\", write = \"parquet\")   )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"formula-syntax-conventions","dir":"Articles","previous_headings":"Quick start: sink_quick() for rapid prototyping","what":"Formula syntax conventions","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"using formulas sink_quick(), three special variables available: - .x - object write (data saved) - .path - full target path (includes file extension, e.g., “data/output.csv”) - .base - target path without extension (e.g., “data/output”) Example:","code":"# Custom write function using formula variables sink_quick(\"output\",   write = ~ {     message(\"Writing \", class(.x)[1], \" to \", .path)  # .x is your data object     if (nrow(.x) > 1000) {       # For large data, write to multiple files       write.csv(.x[1:1000,], paste0(.base, \"_part1.csv\"))     # .base for custom names       write.csv(.x[1001:nrow(.x),], paste0(.base, \"_part2.csv\"))     } else {       write.csv(.x, .path, row.names = FALSE)                 # .path for standard output     }   },   ext = \".csv\" )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"format-agnostic-sinks-beyond-rds","dir":"Articles","previous_headings":"","what":"Format-agnostic sinks: beyond RDS","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"Parade now supports file format flexible registry system. Choose optimal format use case:","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"check-available-formats","dir":"Articles","previous_headings":"Format-agnostic sinks: beyond RDS","what":"Check available formats","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"","code":"# List all registered formats list_sink_formats() # [1] \"csv\" \"feather\" \"json\" \"parquet\" \"qs\" \"rds\" \"readr_csv\" \"tsv\"  # Check if a specific format is available has_sink_format(\"parquet\")  # TRUE if arrow is installed  # Get format details fmt <- get_sink_format(\"parquet\") # List with writer, reader, ext, atomic fields"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"define-a-sink-with-sink_spec","dir":"Articles","previous_headings":"","what":"1) Define a sink with sink_spec()","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"traditional sink_spec() function now supports multiple formats:","code":"# Single format for all fields sink <- sink_spec(   fields   = c(\"model\", \"metrics\"),      # Which fields to persist   dir      = \"artifacts://fits\",         # Base directory   format   = \"parquet\",                   # Use Parquet format   template = \"{.stage}/{subject}/{session}-{.row_key}\",   overwrite = \"skip\" )  # Different format per field (new!) multi_sink <- sink_spec(   fields = c(\"data\", \"model\", \"config\"),   dir = \"artifacts://mixed\",   formats = list(     data = \"parquet\",    # Fast columnar format for data     model = \"qs\",        # Ultra-fast R serialization for models     config = \"json\"      # Human-readable for configuration   ) )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"key-parameters-explained","dir":"Articles","previous_headings":"1) Define a sink with sink_spec()","what":"Key parameters explained","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"fields: Character vector output field names persist dir: Base directory path (can use aliases like artifacts://) format: Single format name custom writer function formats: Named list per-field format specifications (new!) {.stage}: Current stage name {.field}: Field written {.row_key}: Unique hash row parameters Plus columns parameter grid overwrite: “skip” (default), “overwrite”, “error” sidecar: JSON metadata checksums timestamps","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"register-custom-formats","dir":"Articles","previous_headings":"","what":"2) Register custom formats","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"Extend parade formats using registry system:","code":"# Register a custom format globally register_sink_format(\"nifti\",   writer = function(x, path, ...) {     neuroim2::write_vol(x, path)     invisible(path)   },   reader = function(path, ...) {     neuroim2::read_vol(path)   },   ext = \".nii.gz\",   atomic = TRUE  # Use temp-then-rename pattern )  # Now use it anywhere brain_sink <- sink_quick(\"brain_data\", write = \"nifti\")  # Or define inline without registration custom_sink <- sink_quick(\"special\",   write = function(x, path) {     # Your custom write logic     my_special_writer(x, path)   },   read = function(path) {     my_special_reader(path)   },   ext = \".custom\" )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"example-hdf5-format-for-scientific-data","dir":"Articles","previous_headings":"2) Register custom formats","what":"Example: HDF5 format for scientific data","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"","code":"# Register HDF5 support if (requireNamespace(\"hdf5r\", quietly = TRUE)) {   register_sink_format(\"hdf5\",     writer = function(x, path, ...) {       file <- hdf5r::H5File$new(path, mode = \"w\")       tryCatch({         file[[\"data\"]] <- x         invisible(path)       }, error = function(e) {         stop(\"Failed to write HDF5 file: \", e$message)       }, finally = {         # Ensure file is closed even if write fails         if (file$is_valid) file$close()       })     },     reader = function(path, ...) {       file <- hdf5r::H5File$new(path, mode = \"r\")       tryCatch({         data <- file[[\"data\"]][]         data       }, error = function(e) {         stop(\"Failed to read HDF5 file: \", e$message)       }, finally = {         # Ensure file is closed even if read fails         if (file$is_valid) file$close()       })     },     ext = \".h5\"   ) }"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"temporary-sinks-for-development","dir":"Articles","previous_headings":"","what":"3) Temporary sinks for development","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"Use sink_temp() ephemeral storage development testing: Files written tempdir()/parade-quick-TIMESTAMP/. Temporary directories often cleaned OS sessions, guaranteed; use unlink(path, recursive = TRUE) need explicit cleanup.","code":"# Creates sink in tempdir() with timestamp dev_sink <- sink_temp(\"test_output\", write = \"json\")  # Custom prefix for organization test_sink <- sink_temp(\"experiment\",   write = \"csv\",   prefix = \"unittest\" )  # Perfect for iterative development fl <- flow(small_test_data) |>   stage(\"test\",     f = my_experimental_function,     schema = returns(output = artifact()),     sink = sink_temp(\"output\", write = \"rds\")  # No cleanup needed!   )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"using-sinks-in-stages","dir":"Articles","previous_headings":"","what":"4) Using sinks in stages","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"Attach sinks stages declare outputs artifacts:","code":"# Create parameter grid grid <- param_grid(   subject = c(\"s01\", \"s02\", \"s03\"),   session = 1:2,   condition = c(\"control\", \"treatment\") )  # Multi-format workflow fl <- flow(grid, seed_col = \"seed\") |>   stage(\"process\",     f = function(subject, session, condition) {       # Different outputs need different formats       raw_data <- simulate_measurements(n = 10000)  # Large numeric matrix       summary_stats <- summarize_data(raw_data)     # Small data frame       metadata <- list(                             # Nested list         subject = subject,         session = session,         condition = condition,         timestamp = Sys.time(),         parameters = get_analysis_params()       )              list(         raw_data = raw_data,         summary = summary_stats,         metadata = metadata       )     },     schema = schema(       raw_data = artifact(),       summary = artifact(),       metadata = artifact()     ),     sink = sink_spec(       fields = c(\"raw_data\", \"summary\", \"metadata\"),       dir = \"artifacts://analysis\",       formats = list(         raw_data = \"qs\",      # Fast for large matrices         summary = \"csv\",      # Readable, shareable         metadata = \"json\"     # Human-readable config       )     )   )  results <- collect(fl)"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"automatic-loading-in-downstream-stages","dir":"Articles","previous_headings":"5) Reading artifacts back","what":"Automatic loading in downstream stages","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"autoload = TRUE (default), artifacts load automatically:","code":"fl <- fl |>   stage(\"analyze\",     f = function(raw_data, summary, metadata) {       # All three artifacts are loaded automatically       # in their appropriate formats       combined <- merge_with_metadata(raw_data, metadata)       enhanced <- enhance_summary(summary, combined)       list(final = enhanced)     },     schema = returns(final = tbl())   )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"manual-loading","dir":"Articles","previous_headings":"5) Reading artifacts back","what":"Manual loading","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"Access artifacts directly using file references:","code":"results <- collect(fl)  # Each artifact field contains file metadata results$raw_data[[1]] # tibble: path, bytes, sha256, written, existed  # Load manually using the path data <- readRDS(results$raw_data[[1]]$path)  # For RDS data <- read.csv(results$summary[[1]]$path)  # For CSV data <- jsonlite::read_json(results$metadata[[1]]$path)  # For JSON"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"using-the-manifest-system","dir":"Articles","previous_headings":"5) Reading artifacts back","what":"Using the manifest system","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"Query explore artifacts:","code":"# Find all Parquet files manifest(\"artifacts://\") |>   filter(grepl(\"\\\\.parquet$\", path)) |>   arrange(desc(mtime))  # Load recent large files recent_large <- manifest(\"artifacts://analysis\") |>   filter(     mtime > Sys.time() - 86400,  # Last 24 hours     bytes > 1e6                   # Larger than 1MB   ) |>   mutate(     format = tools::file_ext(path),     data = map(path, ~ {       if (grepl(\"\\\\.qs$\", .x)) qs::qread(.x)       else if (grepl(\"\\\\.parquet$\", .x)) arrow::read_parquet(.x)       else readRDS(.x)     })   )"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"when-to-use-each-format","dir":"Articles","previous_headings":"Format selection guide","what":"When to use each format","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"RDS (default) - ✅ R object (models, lists, environments) - ✅ Preserves R attributes classes - ❌ R-, readable languages - 📊 Best : R-specific workflows, complex objects QS (available) - ✅ 3-5x faster RDS - ✅ 30-50% smaller files - ✅ Supports R objects - ❌ Requires qs package - 📊 Best : High-performance R workflows Parquet - ✅ Columnar format, excellent compression - ✅ Cross-language (Python, Julia, etc.) - ✅ Fast data frames - ❌ Data frames - 📊 Best : Data science pipelines, cross-language work CSV - ✅ Universal compatibility - ✅ Human-readable - ❌ Slow, large files - ❌ Type information lost - 📊 Best : Sharing results, small data JSON - ✅ Human-readable - ✅ Good nested structures - ✅ Web API compatible - ❌ Larger files - 📊 Best : Configuration, metadata, web integration","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"mixed-format-machine-learning-pipeline","dir":"Articles","previous_headings":"Advanced examples","what":"Mixed-format machine learning pipeline","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"","code":"ml_sink <- sink_spec(   fields = c(\"train_data\", \"test_data\", \"model\", \"predictions\", \"metrics\"),   dir = \"artifacts://ml_pipeline\",   formats = list(     train_data = \"parquet\",   # Large, need column access     test_data = \"parquet\",    # Consistent with training     model = \"qs\",            # Complex R object, need speed     predictions = \"csv\",      # Share with stakeholders     metrics = \"json\"         # Track in version control   ),   template = \"{.stage}/{experiment_id}/{.field}_{fold_id}\" )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"scientific-computing-with-custom-formats","dir":"Articles","previous_headings":"Advanced examples","what":"Scientific computing with custom formats","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"","code":"# Register specialized formats register_sink_format(\"matlab\",   writer = ~ R.matlab::writeMat(.x, .path),   reader = ~ R.matlab::readMat(.path),   ext = \".mat\" )  register_sink_format(\"netcdf\",   writer = function(x, path) {     ncdf4::nc_create(path, x$var_defs)     # ... write logic   },   reader = ~ ncdf4::nc_open(.path),   ext = \".nc\" )  scientific_sink <- sink_quick(   fields = c(\"simulation\", \"observations\"),   write = \"netcdf\",   dir = \"artifacts://climate_model\" )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"quick-iteration-during-development","dir":"Articles","previous_headings":"Advanced examples","what":"Quick iteration during development","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"","code":"# Start with temp sink for experimentation dev_flow <- flow(test_data) |>   stage(\"experiment\",     f = my_experimental_analysis,     schema = returns(result = artifact()),     sink = sink_temp(\"result\", write = \"rds\")   )  # Test and iterate quickly test_results <- collect(dev_flow)  # When ready, switch to production sink prod_flow <- flow(full_data) |>   stage(\"experiment\",     f = my_experimental_analysis,     schema = returns(result = artifact()),     sink = sink_spec(       \"result\",       dir = \"artifacts://production\",       format = \"parquet\"  # Better for production     )   )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"working-with-complex-objects","dir":"Articles","previous_headings":"","what":"Working with Complex Objects","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"lst() type parade’s universal container complex R objects don’t fit basic types like dbl(), chr(), int(). includes: S3 objects: lm models, custom classes, neuroimaging objects S4 objects: Bioconductor objects, formal class structures Nested structures: Lists lists, complex hierarchies Domain objects: Brain volumes, genomic data, spatial objects R object: Anything needs preserve full structure","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"when-to-use-lst-vs-artifact","dir":"Articles","previous_headings":"Working with Complex Objects","what":"When to use lst() vs artifact()","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"Choose based size access patterns:","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"example-neuroimaging-data-with-lst","dir":"Articles","previous_headings":"Working with Complex Objects","what":"Example: Neuroimaging data with lst()","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"","code":"# Complex neuroimaging object stays in memory fl <- flow(subjects) |>   stage(\"load_brain\",     f = function(subject_id) {       # Returns complex S4 brain volume object       brain <- neuroim2::read_vol(paste0(subject_id, \".nii.gz\"))              list(         brain = brain,                      # Full S4 object         volume = sum(brain@.Data > 0),     # Scalar summary         dims = brain@space@dim              # Vector       )     },     schema = returns(       brain = lst(),    # Complex object preserved in list column       volume = dbl(),   # Simple scalar       dims = int()      # Integer vector     )   )  # The brain object maintains all S4 slots, methods, and attributes results <- collect(fl) first_brain <- results$brain[[1]]  # Full brain volume object class(first_brain)  # \"brain_volume\" or similar S4 class"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"example-mixed-approach-for-large-data","dir":"Articles","previous_headings":"Working with Complex Objects","what":"Example: Mixed approach for large data","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"","code":"# Large data as artifact, metadata in memory fl <- flow(subjects) |>   stage(\"process_brain\",     f = function(subject_id) {       brain <- load_and_process_brain(subject_id)              list(         # Large 3D/4D array to disk         brain_data = brain@.Data,                  # Small metadata in memory         header = brain@header,          # S4 object with metadata         space = brain@space,            # Spatial information         stats = summarize(brain)        # Summary tibble       )     },     schema = returns(       brain_data = artifact(),  # Large array to disk       header = lst(),           # Complex S4 object in memory       space = lst(),            # Spatial object in memory       stats = tbl()             # Tibble in memory     ),     sink = sink_spec(       fields = \"brain_data\",       dir = \"artifacts://neuroimaging\",       format = \"qs\"  # Fast serialization for arrays     )   )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"key-points-about-lst","dir":"Articles","previous_headings":"Working with Complex Objects","what":"Key points about lst()","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"Preserves everything: Class, attributes, methods, slots - maintained type restrictions: valid R object can go lst() List column storage: Objects stored tibble list columns Direct access: deserialization needed (unlike artifacts) Memory considerations: Keep large data artifacts, metadata lst()","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"flexible-type-validation-new-in-0-13-0","dir":"Articles","previous_headings":"","what":"Flexible Type Validation (New in 0.13.0)","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"lst() accepts object, often want validate complex objects expected class without requiring full prototype. flexible type system provides lightweight validation:","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"class-based-validation-with-isa","dir":"Articles","previous_headings":"Flexible Type Validation (New in 0.13.0)","what":"Class-based validation with isa()","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"Instead creating prototype objects, use isa() validate class name:","code":"# Traditional approach (requires prototype object) schema(model = structure(list(), class = \"lm\"))  # Awkward!  # Flexible approach (class name only) schema(model = isa(\"lm\"))  # Clean and clear  # Works with any class, including S4 and package-specific schema(   brain = isa(\"neuroim2::NeuroVol\"),   model = isa(c(\"glm\", \"lm\")),  # Accepts multiple classes   network = isa(\"igraph\") )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"optional-types-with-maybe","dir":"Articles","previous_headings":"Flexible Type Validation (New in 0.13.0)","what":"Optional types with maybe()","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"Allow fields NULL match specific type:","code":"fl <- flow(grid) |>   stage(\"fit\",     f = function(data) {       model <- if (nrow(data) > 10) lm(y ~ x, data) else NULL       list(         model = model,         n_obs = nrow(data)       )     },     schema = returns(       model = maybe(isa(\"lm\")),  # Can be lm or NULL       n_obs = int()     )   )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"union-types-with-one_of","dir":"Articles","previous_headings":"Flexible Type Validation (New in 0.13.0)","what":"Union types with one_of()","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"Accept multiple possible types:","code":"schema(   result = one_of(     isa(\"lm\"),      # Linear model     isa(\"glm\"),     # Generalized linear model     isa(\"nls\"),     # Nonlinear model     tbl()           # Or a summary table   ) )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"predicate-validation-with-pred","dir":"Articles","previous_headings":"Flexible Type Validation (New in 0.13.0)","what":"Predicate validation with pred()","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"Custom validation logic performance hints:","code":"# Light validation (always runs) schema(   data = pred(~ nrow(.) > 0, cost = \"light\") )  # Heavy validation (only in full mode) schema(   image = pred(~ all(dim(.) == c(91, 109, 91)), cost = \"full\") )  # Use with collect() results <- collect(fl, validate = \"light\")  # Skip heavy checks results_validated <- collect(fl, validate = \"full\")  # Run all checks"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"domain-specific-helpers","dir":"Articles","previous_headings":"Flexible Type Validation (New in 0.13.0)","what":"Domain-specific helpers","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"Parade includes neuroimaging-specific validators:","code":"# Any neuroimaging volume schema(brain = neurovol())  # Specific volume type schema(mask = neurovol(class = \"LogicalNeuroVol\"))  # With dimension validation (full mode only) schema(mni = neurovol(dims = c(91, 109, 91)))  # Optional neuroimaging data schema(mask = maybe_neurovol())"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"performance-modes","dir":"Articles","previous_headings":"Flexible Type Validation (New in 0.13.0)","what":"Performance modes","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"Validation runs two modes balance safety speed:","code":"# Normal execution - fast results <- collect(flow)  # Default: validate = \"light\"  # Thorough validation - slower but comprehensive results <- collect(flow, validate = \"full\")"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"combining-with-traditional-types","dir":"Articles","previous_headings":"Flexible Type Validation (New in 0.13.0)","what":"Combining with traditional types","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"Flexible types work seamlessly parade’s standard types:","code":"schema(   # Standard types   id = chr(),   score = dbl(),      # Flexible types   model = isa(\"lm\"),   optimizer = maybe(isa(\"optim\")),      # Mixed in artifacts   large_matrix = artifact(),   metadata = one_of(lst(), tbl()) )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"managing-multi-file-outputs","dir":"Articles","previous_headings":"","what":"Managing Multi-File Outputs","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"Many analysis pipelines, especially neuroimaging bioinformatics, generate multiple output files. Parade offers three clean patterns handle scenarios without tracking every file.","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"pattern-a-sentinel-file-recommended","dir":"Articles","previous_headings":"Managing Multi-File Outputs","what":"Pattern A: Sentinel File (Recommended)","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"Track single “done” marker file pipeline writes many files. Perfect preprocessing pipelines generate dozens intermediate files. Benefits sentinel pattern: - Minimal metadata: one artifact per row manifest - Fast resume: overwrite = \"skip\" skips completed rows - Rich validation: Sentinel can contain QC metrics, file lists, parameters - Clean separation: Parade tracks success, filesystem outputs","code":"# Sentinel pattern - track one file that signals success sentinel_sink <- sink_quick(   fields = \"run\",   dir = \"artifacts://neuro\",   template = \"{.stage}/{subject}/{session}/{.row_key}\",   write = ~ {     # Check if already done (important when overwrite = \"skip\")     if (file.exists(.path)) {       message(\"Skipping - already processed: \", .path)       return(.path)  # Return sentinel path without re-running     }          out_dir <- .base  # Path without extension (becomes directory)     dir.create(out_dir, recursive = TRUE, showWarnings = FALSE)          # 1) Run your pipeline that creates many files     #    e.g., FSL, FreeSurfer, fMRIPrep, etc.     # run_preprocessing_pipeline(     #   input = .x$input_file,     #   output_dir = out_dir,     #   steps = c(\"motion_correct\", \"slice_timing\", \"normalize\", \"smooth\")     # )          # This might create:     # - motion_parameters.txt     # - realigned.nii.gz     # - mean_func.nii.gz     # - normalized.nii.gz     # - smoothed.nii.gz     # - preprocessing.log     # ... and 20+ other files          # For this example, simulate creating files     # max_motion <- 0.5  # Would come from actual preprocessing     # temporal_snr <- 100  # Would come from actual preprocessing          # 2) Write a single sentinel file as the only tracked artifact     done_info <- list(       ok = TRUE,       completed = Sys.time(),       output_dir = out_dir,       subject = .x$subject,       session = .x$session,       files_created = list.files(out_dir, recursive = TRUE)       # Add your actual QC metrics here:       # qc_metrics = list(motion = max_motion, tsnr = temporal_snr)     )     jsonlite::write_json(done_info, .path, auto_unbox = TRUE, pretty = TRUE)     .path  # Return only the sentinel path   },   read = ~ jsonlite::read_json(.path),   ext = \".done.json\",   overwrite = \"skip\",    # Critical: skip if done file exists (resume-friendly)   autoload = FALSE,       # Downstream typically doesn't need the sentinel   sidecar = \"json\"       # Still get checksums for the sentinel )  # Use in a flow fl <- flow(param_grid(subject = c(\"s01\", \"s02\"), session = 1:2)) |>   stage(\"preprocess\",     f = function(subject, session, input_file) {       list(run = list(         subject = subject,         session = session,         input_file = input_file       ))     },     schema = returns(run = artifact()),     sink = sentinel_sink   )  results <- collect(fl) # Only the .done.json file is tracked, but all preprocessing outputs exist"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"pattern-b-bundle-directory","dir":"Articles","previous_headings":"Managing Multi-File Outputs","what":"Pattern B: Bundle Directory","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"Track directory artifact downstream stages need explore contents.","code":"bundle_sink <- sink_quick(   fields = \"bundle\",   dir = \"artifacts://analysis\",   template = \"{.stage}/{subject}/{session}\",   write = function(x, path) {     # Path is the directory itself     dir.create(path, recursive = TRUE, showWarnings = FALSE)          # Run pipeline that writes into this directory     run_analysis(       input = x$data,       output_dir = path,       config = x$config     )          # Optionally write a SUCCESS marker     writeLines(\"OK\", file.path(path, \"SUCCESS\"))          path  # Return the directory as the artifact   },   read = function(path) {     # Custom reader can list files or check success     list(       files = list.files(path, recursive = TRUE),       success = file.exists(file.path(path, \"SUCCESS\"))     )   },   ext = \"\"  # No extension for directories )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"pattern-c-primary-output","dir":"Articles","previous_headings":"Managing Multi-File Outputs","what":"Pattern C: Primary Output","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"Track main output file ’s clear primary result.","code":"primary_sink <- sink_quick(   fields = \"main_result\",   dir = \"artifacts://results\",   template = \"{.stage}/{subject}/outputs\",   write = ~ {     work_dir <- .base     dir.create(work_dir, recursive = TRUE, showWarnings = FALSE)          # Pipeline writes many files     run_full_analysis(.x, work_dir)     # Creates: preprocessed.nii, mask.nii, stats.txt, report.pdf, etc.          # But we only track the main result     main_file <- file.path(work_dir, \"final_statistics.nii.gz\")     if (!file.exists(main_file)) {       stop(\"Pipeline failed to create main output\")     }     main_file   },   read = ~ neuroim2::read_vol(.path),   ext = \".nii.gz\" )"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"real-world-example-fmri-preprocessing","dir":"Articles","previous_headings":"Managing Multi-File Outputs","what":"Real-World Example: fMRI Preprocessing","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"","code":"# Complete fMRI preprocessing with sentinel pattern library(parade) paths_init()  fmri_sink <- sink_quick(   fields = \"preprocessing\",   dir = \"artifacts://fmri\",   template = \"{.stage}/{subject}/ses-{session}/run-{run}\",   write = ~ {     out_dir <- .base     dir.create(out_dir, recursive = TRUE, showWarnings = FALSE)          # Run fMRIPrep or similar     cmd <- sprintf(       \"fmriprep %s %s participant --participant-label %s\",       .x$bids_dir, out_dir, .x$subject     )     system(cmd)          # Write comprehensive done file     done <- list(       ok = file.exists(file.path(out_dir, \"sub-01_space-MNI152_desc-preproc_bold.nii.gz\")),       completed = Sys.time(),       subject = .x$subject,       session = .x$session,       outputs = list(         func = Sys.glob(file.path(out_dir, \"*bold*.nii.gz\")),         anat = Sys.glob(file.path(out_dir, \"*T1w*.nii.gz\")),         confounds = Sys.glob(file.path(out_dir, \"*confounds*.tsv\")),         reports = Sys.glob(file.path(out_dir, \"*.html\"))       ),       qc = list(         motion = read.table(file.path(out_dir, \"motion_parameters.txt\")),         tsnr = mean(read_tsnr(out_dir))       )     )          jsonlite::write_json(done, .path, auto_unbox = TRUE, pretty = TRUE)     .path   },   ext = \".prep.json\",   overwrite = \"skip\"  # Don't rerun completed subjects )  # Run preprocessing pipeline subjects_grid <- param_grid(   subject = sprintf(\"sub-%02d\", 1:20),   session = 1:2,   run = 1:4,   bids_dir = \"/data/myStudy\" )  fl <- flow(subjects_grid) |>   stage(\"fmriprep\",     f = function(subject, session, run, bids_dir) {       list(preprocessing = list(         subject = subject,         session = session,         run = run,         bids_dir = bids_dir       ))     },     schema = returns(preprocessing = artifact()),     sink = fmri_sink   ) |>   distribute(dist_slurm(n = 20))  # Parallel on cluster  results <- collect(fl)  # Check success and get file lists for (i in 1:nrow(results)) {   done <- jsonlite::read_json(results$preprocessing[[i]]$path)   if (!done$ok) {     warning(sprintf(\"Failed: %s\", done$subject))   } }"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"tips-for-multi-file-patterns","dir":"Articles","previous_headings":"Managing Multi-File Outputs","what":"Tips for Multi-File Patterns","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"Always use overwrite = \"skip\" resume-friendly workflows Include validation sentinel (checksums, file counts, QC metrics) Use .base formulas get directory paths without extensions Create row-specific directories via template avoid file collisions Document outputs sentinel downstream discovery Consider manifest() later explore full file tree needed","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"tips-and-best-practices","dir":"Articles","previous_headings":"","what":"Tips and best practices","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"Start simple: Use sink_quick() development, refine sink_spec() production Choose formats wisely: RDS/QS R-workflows Parquet data frames cross-language needs JSON configuration metadata Mix formats: Use formats parameter optimize field independently Test sink_temp(): Validate workflows without cluttering filesystem Register , use everywhere: Add custom formats .Rprofile package startup Monitor manifest(): Track artifact growth clean old files systematically","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Artifacts: format-agnostic sinks, atomic writes, and manifests","text":"format-agnostic sink system parade 0.12.0+ provides: sink_quick() - One-liner sink creation sink_temp() - Ephemeral sinks testing Format registry - Extensible format support Per-field formats - Optimize artifact independently Formula syntax - Inline custom writers minimal code Built-formats - RDS, CSV, JSON, Parquet, Whether need quick prototyping production-grade artifact management, parade’s sink system scales simple one-liners complex multi-format pipelines maintaining atomic writes, metadata tracking, memory efficiency.","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"introduction-to-distributed-computing-with-parade","dir":"Articles","previous_headings":"","what":"Introduction to distributed computing with parade","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"parade separates workflow definition (DAG) execution strategy (distribution plan), allowing run computational pipeline locally development SLURM clusters production. separation enables: Local development: Test workflows laptop dist_local() Cluster scaling: Execute workflow SLURM dist_slurm() Resource optimization: Fine-tune parallelization resource allocation Flexible chunking: Balance job granularity scheduling efficiency key insight parade workflows portable - define computation choose distribute based current needs.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"local-distribution-for-development","dir":"Articles","previous_headings":"Local vs. SLURM distribution strategies","what":"Local distribution for development","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"switch SLURM, helps understand distribution API : distribute() attaches execution strategy flow. strategy change DAG — controls rows parameter grid scheduled. dist_local() builds local strategy (great development) lets specify grouping (), within‑job execution mode (within), amount parallelism inside job (workers_within). dist_slurm() SLURM cluster (cover next section). argument refers column names parameter grid. vignette group subject, rows subject run job. want “test subset,” simply filter grid building flow (example, grid_dev <- subset(grid, subject == \"sub01\")). code keeps full grid illustrates local parallelism.","code":"library(parade) library(progressr)  # Initialize project structure paths_init()  # Create a parameter grid grid <- param_grid(   subject = c(\"sub01\", \"sub02\", \"sub03\"),   session = 1:2,   condition = c(\"A\", \"B\") ) # Results in 12 rows (3×2×2)  # Define a simple workflow fl <- flow(grid) |>   stage(\"process\", function(subject, session, condition) {     # Simulate computational work     Sys.sleep(runif(1, 0.1, 0.5))     list(result = paste(subject, session, condition, sep = \"_\"))   })  # Local development: run locally (optionally on a subset) fl_local <- fl |>   distribute(dist_local(     by = \"subject\",           # Group by subject     within = \"multisession\",  # Use parallel workers within each group       workers_within = 2        # Use 2 cores per group   ))"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"slurm-distribution-for-production","dir":"Articles","previous_headings":"Local vs. SLURM distribution strategies","what":"SLURM distribution for production","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"workflow can scaled SLURM cluster:","code":"# Row-wise: one job per parameter combination fl_rowwise <- fl |> distribute(dist_slurm(   by = NULL,                                      # No grouping - each row is independent   within = \"multisession\",                        # Parallel execution within each job   workers_within = 4,                             # 4 workers per job   resources = batch_resources(                    # SLURM resource specification     nodes = 1,      cpus_per_task = 4,      time = \"30min\",     mem = \"8GB\"   ),   chunks_per_job = 1                             # One parameter row per job ))  # Subject-wise: group related work into fewer jobs fl_subject <- fl |> distribute(dist_slurm(   by = \"subject\",                                 # Group by subject   within = \"multisession\",                        # Parallel within each job   workers_within = 8,                             # More workers since we're grouping   resources = batch_resources(     nodes = 1,      cpus_per_task = 8,      time = \"2h\",                                  # Longer time for grouped work     mem = \"16GB\"   ),   chunks_per_job = 1                             # One subject per job ))"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"understanding-grouping-strategies","dir":"Articles","previous_headings":"Local vs. SLURM distribution strategies","what":"Understanding grouping strategies","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"parameter controls parameter grid partitioned: Pro: Maximum parallelization, fine-grained control Con: Many small jobs, scheduling overhead Best : Independent tasks benefit dedicated resources Pro: Fewer jobs, shared setup costs, better resource utilization Con: Less parallelization, potential load imbalance Best : Tasks share expensive initialization (data loading, model setup)","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"understanding-the-parallelization-hierarchy","dir":"Articles","previous_headings":"Resource allocation and optimization","what":"Understanding the parallelization hierarchy","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"parade provides two levels parallelization control: Job-level parallelization: many SLURM jobs submit Within-job parallelization: many tasks run concurrently within job","code":"> Tip: If you maintain named resource profiles (via `slurm_defaults_set()` or > `profile_register()`), you can avoid boilerplate by using the convenience helper > `dist_slurm_profile()`: > > ```r > fl |> distribute(dist_slurm_profile(\"standard\", by = \"subject\", workers_within = 8)) > ``` > > This resolves the profile through `slurm_resources()` and fills the `resources` > argument of `dist_slurm()` for you. r # Example: 24 parameter combinations, grouped by subject (3 subjects × 8 combinations each) grid <- param_grid(   subject = c(\"sub01\", \"sub02\", \"sub03\"),   session = 1:4,    run = 1:2 ) # 24 total combinations  fl <- flow(grid) |>    stage(\"analyze\",      f = function(subject, session, run) {       # Simulate expensive computation       set.seed(as.numeric(factor(subject)) * 100 + session * 10 + run)              # Mock expensive matrix operations       n <- 1000       X <- matrix(rnorm(n * n), nrow = n)       result <- svd(X, nu = 10, nv = 10)  # Partial SVD              list(         singular_values = result$d[1:10],         subject = subject,         session = session,          run = run       )     },     schema = returns(       singular_values = lst(),       subject = chr(),       session = int(),       run = int()     )   )  # Strategy 1: One job per subject, parallel within fl |> distribute(dist_slurm(   by = \"subject\",                    # 3 jobs (one per subject)   workers_within = 8,                # 8 parallel tasks per job   chunks_per_job = 1,                # Each subject in one job   resources = batch_resources(     cpus_per_task = 8,               # Match workers_within     time = \"4h\",     mem = \"32GB\"   ) ))  # Strategy 2: Split large groups across multiple jobs fl |> distribute(dist_slurm(   by = \"subject\",                    # Group by subject first   workers_within = 4,                # 4 parallel tasks per job     chunks_per_job = 2,                # Split each subject into 2 jobs   resources = batch_resources(       # Results in 6 total jobs (3 subjects × 2)     cpus_per_task = 4,               # Match workers_within     time = \"2h\",                     # Shorter time per chunk     mem = \"16GB\"   ) ))"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"throttling-concurrent-execution","dir":"Articles","previous_headings":"Resource allocation and optimization","what":"Throttling concurrent execution","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"workers_within parameter acts like xargs -P, limiting concurrent tasks within SLURM job: Guidelines workers_within: - Match slightly exceed cpus_per_task - Consider memory usage: total_memory / workers_within per task - Account /O bottlenecks shared filesystems - Start conservatively increase based monitoring","code":"# Without throttling: all tasks run simultaneously (may overwhelm resources) dist_slurm(by = \"subject\", workers_within = NULL)  # With throttling: limit to 4 concurrent tasks per job dist_slurm(by = \"subject\", workers_within = 4)"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"optimizing-job-granularity","dir":"Articles","previous_headings":"Advanced chunking strategies","what":"Optimizing job granularity","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"chunks_per_job parameter controls groups split across SLURM jobs:","code":"# Large groups: split for better parallelization grid <- param_grid(   subject = \"subject01\",  # One subject   trial = 1:1000          # But 1000 trials )  fl <- flow(grid) |>    stage(\"process_trial\",      f = function(subject, trial) {       # Simulate trial-level analysis       set.seed(trial)              # Mock signal processing       signal <- rnorm(1000)  # Simulated time series       filtered <- filter(signal, rep(1/5, 5), sides = 2)  # Moving average              # Extract features       features <- list(         mean_amplitude = mean(filtered, na.rm = TRUE),         peak_value = max(filtered, na.rm = TRUE),         variance = var(filtered, na.rm = TRUE)       )              list(         subject = subject,         trial = trial,         features = features       )     },     schema = returns(       subject = chr(),       trial = int(),       features = lst()     )   )  # Split into smaller chunks for better scheduling fl |> distribute(dist_slurm(   by = \"subject\",                    # Group by subject   chunks_per_job = 100,              # 100 trials per job → 10 jobs total   workers_within = 4,                # 4 parallel trials per job   resources = batch_resources(     cpus_per_task = 4,     time = \"1h\",                     # Shorter jobs are easier to schedule     mem = \"8GB\"   ) ))"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"multi-dimensional-grouping","dir":"Articles","previous_headings":"Advanced chunking strategies","what":"Multi-dimensional grouping","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"","code":"# Complex parameter space grid <- param_grid(   subject = c(\"s01\", \"s02\", \"s03\"),   condition = c(\"rest\", \"task\"),   session = 1:3 )  # Define workflow with actual computation fl <- flow(grid) |>   stage(\"analyze\",     f = function(subject, condition, session) {       # Simulate fMRI analysis       set.seed(as.numeric(factor(subject)) * 100 +                 as.numeric(factor(condition)) * 10 + session)              # Mock connectivity analysis       n_regions <- 50       timeseries <- matrix(rnorm(n_regions * 200), nrow = n_regions)       correlation_matrix <- cor(t(timeseries))              list(         mean_connectivity = mean(correlation_matrix[upper.tri(correlation_matrix)]),         subject = subject,         condition = condition,         session = session       )     },     schema = returns(       mean_connectivity = dbl(),       subject = chr(),       condition = chr(),       session = int()     )   )  # Group by multiple columns fl |> distribute(dist_slurm(   by = c(\"subject\", \"condition\"),    # One job per subject-condition pair   workers_within = 3,                # Parallel across sessions     chunks_per_job = 1,   resources = batch_resources(     cpus_per_task = 3,     time = \"30min\",     mem = \"4GB\"   ) ))"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"deferred-execution-workflow","dir":"Articles","previous_headings":"SLURM job submission and monitoring","what":"Deferred execution workflow","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"workflow now running cluster. Use commands monitor progress:","code":"# 1. Validate workflow locally (recommended) preflight(fl_subject)  # 2. Submit to SLURM (returns immediately) d <- submit(fl_subject, mode = \"index\") # Check job status deferred_status(d, show_progress = TRUE)  # Monitor logs in real-time  # Use scripts/parade_tail.R for continuous monitoring  # Collect completed results results <- deferred_collect(d, how = \"index\")"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"resource-specification-examples","dir":"Articles","previous_headings":"SLURM job submission and monitoring","what":"Resource specification examples","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"","code":"# CPU-intensive tasks resources <- batch_resources(   partition = \"standard\",   nodes = 1,   cpus_per_task = 16,   time = \"4h\",   mem = \"32GB\" )  # Memory-intensive tasks   resources <- batch_resources(   partition = \"himem\",    nodes = 1,   cpus_per_task = 4,   time = \"8h\",    mem = \"128GB\" )  # GPU computing resources <- batch_resources(   partition = \"gpu\",   nodes = 1,   ntasks_per_node = 1,   cpus_per_task = 8,   gres = \"gpu:1\",   time = \"2h\",   mem = \"24GB\" )  # Multi-node MPI (if supported by your workflow) resources <- batch_resources(   partition = \"standard\",   nodes = 4,   ntasks_per_node = 16,    time = \"12h\",   mem = \"64GB\" )"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"pattern-1-development-production-scaling","dir":"Articles","previous_headings":"Common patterns and best practices","what":"Pattern 1: Development → Production scaling","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"","code":"# Define the analysis workflow once analyze_workflow <- function(grid) {   flow(grid) |>     stage(\"preprocess\",       f = function(subject, session) {         # Simulate preprocessing         set.seed(as.numeric(factor(subject)) * 10 + session)         data <- matrix(rnorm(1000 * 100), nrow = 1000)                  # Normalize and filter         normalized <- scale(data)         list(processed_data = normalized)       },       schema = returns(processed_data = lst())     ) |>     stage(\"analyze\",       needs = \"preprocess\",       f = function(preprocess.processed_data) {         # Run statistical analysis         pca_result <- prcomp(preprocess.processed_data, rank. = 10)         list(variance_explained = summary(pca_result)$importance[2, 1:10])       },       schema = returns(variance_explained = lst())     ) }  # Development: quick test on subset grid_dev <- param_grid(subject = \"sub01\", session = 1:2) fl_dev <- analyze_workflow(grid_dev) |>    distribute(dist_local(workers_within = 2))  # Test locally dev_results <- collect(fl_dev) print(dev_results)  # Verify everything works  # Production: full dataset on cluster   grid_prod <- param_grid(subject = sprintf(\"sub%02d\", 1:100), session = 1:4) fl_prod <- analyze_workflow(grid_prod) |>    distribute(dist_slurm(     by = \"subject\",     workers_within = 4,     chunks_per_job = 1,     resources = batch_resources(cpus_per_task = 4, time = \"2h\", mem = \"16GB\")   ))"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"pattern-2-adaptive-chunking-based-on-data-size","dir":"Articles","previous_headings":"Common patterns and best practices","what":"Pattern 2: Adaptive chunking based on data size","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"","code":"# Small datasets: group more aggressively small_fl |> distribute(dist_slurm(   by = \"subject\",    chunks_per_job = 1,        # One job per subject   workers_within = 8         # High parallelism within job ))  # Large datasets: split into smaller chunks   large_fl |> distribute(dist_slurm(   by = \"subject\",   chunks_per_job = 4,        # Split each subject across 4 jobs   workers_within = 2         # Lower parallelism per job ))"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"problem-jobs-fail-with-memory-errors","dir":"Articles","previous_headings":"Common pitfalls and solutions","what":"Problem: Jobs fail with memory errors","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"Solution: Increase memory allocation reduce workers_within:","code":"# Before: likely to exceed memory dist_slurm(workers_within = 16, resources = batch_resources(mem = \"8GB\"))  # After: more conservative memory usage dist_slurm(workers_within = 4, resources = batch_resources(mem = \"8GB\")) # Now each task gets ~2GB instead of ~512MB"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"problem-many-short-jobs-overwhelming-the-scheduler","dir":"Articles","previous_headings":"Common pitfalls and solutions","what":"Problem: Many short jobs overwhelming the scheduler","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"Solution: Increase chunks_per_job create fewer, longer-running jobs:","code":"# Before: 1000 small jobs dist_slurm(by = NULL, chunks_per_job = 1)  # One job per parameter row  # After: 100 medium jobs dist_slurm(by = NULL, chunks_per_job = 10)  # 10 parameter rows per job"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"problem-load-imbalance-in-grouped-jobs","dir":"Articles","previous_headings":"Common pitfalls and solutions","what":"Problem: Load imbalance in grouped jobs","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"Solution: Use row-wise distribution smaller chunks:","code":"# Before: uneven subject sizes cause load imbalance dist_slurm(by = \"subject\", chunks_per_job = 1)  # After: more even distribution dist_slurm(by = NULL, chunks_per_job = 5)  # 5 rows per job regardless of subject"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"problem-io-bottlenecks-on-shared-filesystems","dir":"Articles","previous_headings":"Common pitfalls and solutions","what":"Problem: I/O bottlenecks on shared filesystems","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"Solution: Reduce concurrent tasks consider /O patterns:","code":"# Before: high I/O contention   dist_slurm(workers_within = 32)  # After: reduced contention dist_slurm(workers_within = 4)  # Fewer concurrent file operations"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-unified-api.html","id":"quick-start-function-first","dir":"Articles","previous_headings":"","what":"Quick start: function first","title":"Unified API: Functions and Scripts, One Surface","text":"","code":"library(parade) paths_init(quiet = TRUE)  # Submit a single function call job <- slurm_call(   function(x, y) x^2 + y^2,   x = 3,   y = 4,   name_by = \"index\",   engine = \"local\" ) print(job) cat(\"Result:\", job$result, \"\\n\")"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-unified-api.html","id":"map-over-inputs-function-or-script","dir":"Articles","previous_headings":"","what":"Map over inputs (function or script)","title":"Unified API: Functions and Scripts, One Surface","text":"","code":"files <- c(\"data1.csv\", \"data2.csv\", \"data3.csv\")  # Function path jobs <- slurm_map(files, ~ paste(\"Processing\", .x), .name_by = \"stem\", .engine = \"local\") results <- collect(jobs)  # Script path (CLI flags via args_cli) jobs <- slurm_map(files, \"scripts/process_one.R\",                   .args = args_cli(input = .x),                   .name_by = stem())"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-unified-api.html","id":"elegant-naming-and-paths","dir":"Articles","previous_headings":"","what":"Elegant naming and paths","title":"Unified API: Functions and Scripts, One Surface","text":"","code":"# Naming helpers: stem/index/digest/glue_name jobs <- slurm_map(files, ~ tools::file_path_sans_ext(.x),                   .name_by = stem(\"sample_(\\\\d+)\"), .engine = \"local\")  # Path macros in write_result tmp <- tempdir() jobs <- slurm_map(1:3, ~ .x^3,                   .name_by = index(\"cube\"),                   .write_result = file.path(tmp, \"results_{name}_{index}.rds\"),                   .engine = \"local\")"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-unified-api.html","id":"jobset-verbs-everywhere","dir":"Articles","previous_headings":"","what":"Jobset verbs everywhere","title":"Unified API: Functions and Scripts, One Surface","text":"jobset verbs (await, status, collect, cancel, progress, open_logs) work results slurm_map(). submit single function slurm_call(), add .as_jobset = TRUE opt surface:","code":"# Wrap a single job as a one‑element jobset jobs <- slurm_call(   function(file) { Sys.sleep(1); read.csv(file)[1:5, ] },   file = \"data/example.csv\",   name = \"proc-example\",   write_result = path$artifacts(\"results/{run}/{stem}.rds\"),   .as_jobset = TRUE )  # Same verbs as slurm_map() jobs |> progress() |> collect() open_logs(jobs, selection = \"all\")"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-unified-api.html","id":"parallel-arguments-with-pmap","dir":"Articles","previous_headings":"","what":"Parallel arguments with pmap","title":"Unified API: Functions and Scripts, One Surface","text":"","code":"df <- data.frame(x = 1:4, y = 5:8, method = c(\"add\",\"multiply\",\"add\",\"multiply\")) jobs <- slurm_pmap(df, function(x, y, method) if (method == \"add\") x + y else x * y,                    .name_by = glue_name(\"{method}-{x}-{y}\"), .engine = \"local\") collect(jobs)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-unified-api.html","id":"argument-helpers","dir":"Articles","previous_headings":"","what":"Argument helpers","title":"Unified API: Functions and Scripts, One Surface","text":"","code":"# CLI arguments (scripts) args_cli(input = \"data.csv\", output = \"results.rds\", verbose = TRUE, threads = 4)  # Function arguments args_call(data = mtcars, formula = mpg ~ cyl + wt, method = \"lm\")"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-unified-api.html","id":"key-arguments-at-a-glance","dir":"Articles","previous_headings":"","what":"Key arguments at a glance","title":"Unified API: Functions and Scripts, One Surface","text":"keep surface consistent across functions scripts, arguments show repeatedly. ’s mean pick values confidence: “auto”: sensible default; uses file stem looks like path, otherwise uses index (job-1, job-2, …). stem(): extracts filename stem. can pass regex keep just capture group, e.g., stem(“sample_(\\d+)”). index(prefix = “job”, width = 0): generates names like job-1 task-001. digest(prefix = “job”, length = 8): short, content-based names. glue_name(“template”): template-based; accepts pmap arguments (e.g., “{method}-{x}-{y}”) map element/index via .x/.. slurm_call() uses name_by = ...; slurm_map()/slurm_pmap() use .name_by = .... “slurm” (default): submits SLURM (scripts via submit_slurm(); functions via slurm_call serialization). “local”: runs function current R session (fast debugging); still honors write_result can poke outputs. slurm_map(), .engine affects function submissions. Script submissions always go SLURM (local script runner provided). Path template function’s return value saved (e.g., “artifacts://results/{run}/{stem}.rds”). Macros like {run}, {stem}, {name}, {index}, {date}, {time}, {user}, {host} expanded way everywhere. Accepts profile name (e.g., “gpu”, “standard”), chained profile object (profile() %>% time(“2h”) %>% cpus(8)), simple list. Legacy shortcuts like “cpu8”, “mem32G”, “gpu2” still recognized. TRUE, one‑element parade_jobset returned can write jobs |> progress() |> collect() everywhere.","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-unified-api.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Unified API: Functions and Scripts, One Surface","text":"“One surface”: scripts via submit_slurm(), functions via slurm_call() slurm_map()/slurm_pmap() dispatch correctly kinds name_by, path macros, resource profiles, flow control work uniformly Use .as_jobset = TRUE get jobset verbs single calls","code":""},{"path":"https://bbuchsbaum.github.io/parade/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Parade Authors. Author, maintainer.","code":""},{"path":"https://bbuchsbaum.github.io/parade/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Authors P (2025). parade: Declarative Parallel Dataflow Future/Furrr. R package version 0.12.0, https://bbuchsbaum.github.io/parade/.","code":"@Manual{,   title = {parade: Declarative Parallel Dataflow with Future/Furrr},   author = {Parade Authors},   year = {2025},   note = {R package version 0.12.0},   url = {https://bbuchsbaum.github.io/parade/}, }"},{"path":"https://bbuchsbaum.github.io/parade/index.html","id":"parade","dir":"","previous_headings":"","what":"Declarative Parallel Dataflow with Future/Mirai/SLURM","title":"Declarative Parallel Dataflow with Future/Mirai/SLURM","text":"Declarative parallel dataflow R — laptop HPC. Define compute, loop. Parade builds typed, parallel workflows; persists large outputs artifacts (sinks); talks SLURM directly (submit, monitor, cancel) rarely leave R. Website & docs: https://bbuchsbaum.github.io/parade/ Source: https://github.com/bbuchsbaum/parade parade? Clean, composable pipelines explicit types lazily persisted outputs, plus first-class HPC ergonomics (portable paths, SLURM defaults, live monitoring).","code":""},{"path":"https://bbuchsbaum.github.io/parade/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Declarative Parallel Dataflow with Future/Mirai/SLURM","text":"Note: CRAN package named parade unrelated (economic “income parades”). project currently GitHub-.","code":"# development version # install.packages(\"remotes\") remotes::install_github(\"bbuchsbaum/parade\")"},{"path":"https://bbuchsbaum.github.io/parade/index.html","id":"id_60-second-tour","dir":"","previous_headings":"","what":"60-second tour","title":"Declarative Parallel Dataflow with Future/Mirai/SLURM","text":"Artifacts (sinks) keep memory tiny runs resumable — see Artifacts vignette. Portable paths like artifacts:// resolve scratch HPC temp laptops — see Smart Path Management. Typed returns (dbl(), int(), lst(), artifact()) catch mistakes early — see Core concepts.","code":"library(parade) library(progressr) handlers(global = TRUE)   # progress bars everywhere  paths_init()              # portable paths: artifacts://, data://, etc.  # Declare the parameter space grid <- param_grid(subject = c(\"s01\", \"s02\"), session = 1:2)  # Build a typed, composable pipeline fl <- flow(grid) |>   stage(     id = \"fit\",     f = function(subject, session) {       model <- lm(rnorm(1000) ~ rnorm(1000))       list(model = model, rmse = runif(1))     },     schema = schema(model = artifact(), rmse = dbl()),   # big → artifact, small → memory     sink   = sink_spec(fields = \"model\",                        dir = \"artifacts://fits\",                        template = \"{.stage}/{subject}/ses{session}-{.row_key}\")   )  # Execute locally or with futures/mirai/SLURM res <- collect(fl, engine = \"future\", workers = 4)  res$model[[1]]   # file-ref (path, bytes, sha256, written/existed) res$rmse         # numeric in-memory"},{"path":"https://bbuchsbaum.github.io/parade/index.html","id":"submit--monitor-slurm-jobs-from-r","dir":"","previous_headings":"","what":"Submit & monitor SLURM jobs from R","title":"Declarative Parallel Dataflow with Future/Mirai/SLURM","text":"Defaults & omit--NA built — see Using SLURM Defaults. script_top() / jobs_top() give text dashboard CPU/RSS + logs — see SLURM script submission & monitoring. Distribution options (grouping/barriers, throttling, chunking) declarative — see Distribution: local & SLURM.","code":"paths_init()  slurm_defaults_set(   partition = \"general\",   time = \"2h\",           # accepts 2h / 120min / H:MM:SS   cpus_per_task = 8,   mem = NA,              # omit --mem if your site forbids it   persist = TRUE )  job <- submit_slurm(\"scripts/train.R\", args = c(\"--fold\", \"1\"))  script_status(job)  # quick check script_tail(job, 80) script_top(job)     # live CPU/RSS and logs  # Multiple jobs together: jobs_top(list(job1, job2, job3))"},{"path":"https://bbuchsbaum.github.io/parade/index.html","id":"mirai-backend-optional","dir":"","previous_headings":"","what":"Mirai backend (optional)","title":"Declarative Parallel Dataflow with Future/Mirai/SLURM","text":"Use mirai low-latency, scalable fan-(socket limits; SSH/TLS needed). See Mirai backend patterns tradeoffs.","code":"# dev: local daemons fl |>   distribute(dist_mirai(n = 8, dispatcher = TRUE)) |>   collect()  # HPC: daemon pools under SLURM handle <- fl |>   distribute(use_mirai_slurm(n = 32, partition = \"compute\", time = \"2h\")) |>   submit()"},{"path":"https://bbuchsbaum.github.io/parade/index.html","id":"portable-paths-laptop--hpc-without-edits","dir":"","previous_headings":"","what":"Portable paths (laptop ↔︎ HPC without edits)","title":"Declarative Parallel Dataflow with Future/Mirai/SLURM","text":"Write , run anywhere: - artifacts:// → /scratch/$USER/parade-artifacts SLURM, tempdir laptops - data://, project://, scratch://, registry://, config://, cache:// Configure via paths_set() env vars (PARADE_ARTIFACTS, PARADE_SCRATCH, …). See Smart Path Management.","code":""},{"path":"https://bbuchsbaum.github.io/parade/index.html","id":"why-not-targets--drake--furrr","dir":"","previous_headings":"","what":"Why not {targets} / {drake} / {furrr}?","title":"Declarative Parallel Dataflow with Future/Mirai/SLURM","text":"Parade deliberately small compositional: - Dataframe-shaped param grids vs. global DAG caches - Pseudo-typed returns crisp contracts - Built-sinks large results - HPC ergonomics: SLURM submission, defaults, monitoring, path aliases play nicely together; parade focuses elegant, fast fan-/fan-.","code":""},{"path":"https://bbuchsbaum.github.io/parade/index.html","id":"learn-more","dir":"","previous_headings":"","what":"Learn more","title":"Declarative Parallel Dataflow with Future/Mirai/SLURM","text":"Parade core: flows, stages, schemas → https://bbuchsbaum.github.io/parade/articles/parade-core.html Artifacts & sinks → https://bbuchsbaum.github.io/parade/articles/parade-artifacts.html Distribution (local/SLURM) → https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html SLURM monitoring → https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html Mirai backend → https://bbuchsbaum.github.io/parade/articles/parade-mirai.html Paths → https://bbuchsbaum.github.io/parade/articles/parade-paths.html","code":""},{"path":"https://bbuchsbaum.github.io/parade/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Declarative Parallel Dataflow with Future/Mirai/SLURM","text":"PRs welcome! Please: - follow tidyverse style (lintr + styler), - add tests new user-facing behavior, - update roxygen NEWS entry.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/account.html","id":null,"dir":"Reference","previous_headings":"","what":"Set account for a resource profile — account","title":"Set account for a resource profile — account","text":"Set account resource profile","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/account.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set account for a resource profile — account","text":"","code":"account(profile, value)"},{"path":"https://bbuchsbaum.github.io/parade/reference/account.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set account for a resource profile — account","text":"profile resource profile object value Account name","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/account.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set account for a resource profile — account","text":"Updated profile object Note: use res_account() avoid naming collisions user code.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/apply_concurrency_limit.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply concurrency limits to job submission — apply_concurrency_limit","title":"Apply concurrency limits to job submission — apply_concurrency_limit","text":"Internal function wraps job submission concurrency control.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/apply_concurrency_limit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply concurrency limits to job submission — apply_concurrency_limit","text":"","code":"apply_concurrency_limit(jobs, submit_fn, concurrency_policy, progress = TRUE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/apply_concurrency_limit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply concurrency limits to job submission — apply_concurrency_limit","text":"jobs List job specifications submit submit_fn Function submits single job concurrency_policy Concurrency control policy progress Whether show progress","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/apply_concurrency_limit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply concurrency limits to job submission — apply_concurrency_limit","text":"List submitted jobs","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/apply_error_policy.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply error policy during job execution — apply_error_policy","title":"Apply error policy during job execution — apply_error_policy","text":"Internal function handle errors according policy job execution.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/apply_error_policy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply error policy during job execution — apply_error_policy","text":"","code":"apply_error_policy(result, job, policy)"},{"path":"https://bbuchsbaum.github.io/parade/reference/apply_error_policy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply error policy during job execution — apply_error_policy","text":"result Result job execution (possibly error) job Job object policy Error policy","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/apply_error_policy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply error policy during job execution — apply_error_policy","text":"Processed result","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/apply_waves.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply wave execution to job submission — apply_waves","title":"Apply wave execution to job submission — apply_waves","text":"Internal function wraps job submission wave control logic.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/apply_waves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply wave execution to job submission — apply_waves","text":"","code":"apply_waves(jobs, submit_fn, wave_policy, progress = TRUE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/apply_waves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply wave execution to job submission — apply_waves","text":"jobs List job specifications submit submit_fn Function submits single job wave_policy Wave execution policy progress Whether show progress","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/apply_waves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply wave execution to job submission — apply_waves","text":"List submitted jobs","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/args.html","id":null,"dir":"Reference","previous_headings":"","what":"Auto-detect argument type — args","title":"Auto-detect argument type — args","text":"Intelligently creates either CLI call arguments based context","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auto-detect argument type — args","text":"","code":"args(..., .type = \"auto\")"},{"path":"https://bbuchsbaum.github.io/parade/reference/args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auto-detect argument type — args","text":"... Arguments process .type Force type: \"cli\", \"call\", \"auto\" (default)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auto-detect argument type — args","text":"Character vector named list depending context","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/args.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Auto-detect argument type — args","text":"Note: function exported args() mask base::args parade attached. Call base::args explicitly need base version (e.g., base::args(lm)).","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/args_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Create argument list for function calls — args_call","title":"Create argument list for function calls — args_call","text":"Builds named list function arguments","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/args_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create argument list for function calls — args_call","text":"","code":"args_call(...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/args_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create argument list for function calls — args_call","text":"... Named arguments function","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/args_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create argument list for function calls — args_call","text":"Named list arguments","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/args_call.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create argument list for function calls — args_call","text":"","code":"args_call(x = 10, y = 20, method = \"fast\") #> $x #> [1] 10 #>  #> $y #> [1] 20 #>  #> $method #> [1] \"fast\" #>  # Returns: list(x = 10, y = 20, method = \"fast\")"},{"path":"https://bbuchsbaum.github.io/parade/reference/args_cli.html","id":null,"dir":"Reference","previous_headings":"","what":"Create argument list for CLI scripts — args_cli","title":"Create argument list for CLI scripts — args_cli","text":"Builds character vector command-line arguments","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/args_cli.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create argument list for CLI scripts — args_cli","text":"","code":"args_cli(...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/args_cli.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create argument list for CLI scripts — args_cli","text":"... Named arguments convert CLI format","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/args_cli.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create argument list for CLI scripts — args_cli","text":"Character vector CLI arguments","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/args_cli.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create argument list for CLI scripts — args_cli","text":"","code":"args_cli(input = \"data.csv\", output = \"results.rds\", verbose = TRUE) #> [1] \"--input\"     \"data.csv\"    \"--output\"    \"results.rds\" \"--verbose\"   # Returns: c(\"--input\", \"data.csv\", \"--output\", \"results.rds\", \"--verbose\")"},{"path":"https://bbuchsbaum.github.io/parade/reference/artifact.html","id":null,"dir":"Reference","previous_headings":"","what":"Alias for file_ref function — artifact","title":"Alias for file_ref function — artifact","text":"Alias file_ref function","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/artifact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alias for file_ref function — artifact","text":"","code":"artifact()"},{"path":"https://bbuchsbaum.github.io/parade/reference/artifact.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alias for file_ref function — artifact","text":"File reference schema","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/as.list.parade_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert profile to list for slurm_resources() — as.list.parade_profile","title":"Convert profile to list for slurm_resources() — as.list.parade_profile","text":"Convert profile list slurm_resources()","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/as.list.parade_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert profile to list for slurm_resources() — as.list.parade_profile","text":"","code":"# S3 method for class 'parade_profile' as.list(x, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/as.list.parade_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert profile to list for slurm_resources() — as.list.parade_profile","text":"x resource profile object ... Additional arguments (unused)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/as.list.parade_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert profile to list for slurm_resources() — as.list.parade_profile","text":"List resources","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/as_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert formula to function (simplified version) — as_function","title":"Convert formula to function (simplified version) — as_function","text":"Convert formula function (simplified version)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/as_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert formula to function (simplified version) — as_function","text":"","code":"as_function(formula)"},{"path":"https://bbuchsbaum.github.io/parade/reference/as_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert formula to function (simplified version) — as_function","text":"formula Formula convert","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/as_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert formula to function (simplified version) — as_function","text":"Function","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/as_jobset.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a job or list of jobs to a jobset — as_jobset","title":"Convert a job or list of jobs to a jobset — as_jobset","text":"Converts single job objects lists jobs parade_jobset, ensuring uniform behavior across job types.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/as_jobset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a job or list of jobs to a jobset — as_jobset","text":"","code":"as_jobset(x, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/as_jobset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a job or list of jobs to a jobset — as_jobset","text":"x parade job object, list jobs, existing jobset ... Additional arguments (unused)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/as_jobset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a job or list of jobs to a jobset — as_jobset","text":"parade_jobset object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/as_jobset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a job or list of jobs to a jobset — as_jobset","text":"","code":"# \\donttest{ # Note: These examples require a SLURM cluster environment # Convert single job to jobset job <- slurm_call(function(x) x^2, x = 10) #> Error in batchtools::makeRegistry(file.dir = reg_dir, make.default = FALSE,     conf.file = NA, cluster.functions = cf): unused argument (cluster.functions = cf) jobset <- as_jobset(job) #> Error: object 'job' not found  # Already a jobset - returns unchanged jobs <- slurm_map(1:3, function(x) x^2) #> Error in batchtools::makeRegistry(file.dir = reg_dir, make.default = FALSE,     conf.file = NA, cluster.functions = cf): unused argument (cluster.functions = cf) jobset <- as_jobset(jobs) #> Error: object 'jobs' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/as_tibble.parade_jobset.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert jobset to tibble — as_tibble.parade_jobset","title":"Convert jobset to tibble — as_tibble.parade_jobset","text":"Convert jobset tibble","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/as_tibble.parade_jobset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert jobset to tibble — as_tibble.parade_jobset","text":"","code":"# S3 method for class 'parade_jobset' as_tibble(x, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/await.html","id":null,"dir":"Reference","previous_headings":"","what":"Wait for all jobs in a jobset to complete — await","title":"Wait for all jobs in a jobset to complete — await","text":"Wait jobs jobset complete","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/await.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wait for all jobs in a jobset to complete — await","text":"","code":"await(x, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/await.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wait for all jobs in a jobset to complete — await","text":"x parade_jobset object timeout Maximum time wait seconds poll Polling interval seconds .progress Show progress bar","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/await.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wait for all jobs in a jobset to complete — await","text":"jobset (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/balance_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Balance work across groups — balance_by","title":"Balance work across groups — balance_by","text":"Distributes items across groups balance workload. Useful ensuring even distribution tasks across workers.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/balance_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Balance work across groups — balance_by","text":"","code":"balance_by(x, n_groups, weights = NULL)"},{"path":"https://bbuchsbaum.github.io/parade/reference/balance_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Balance work across groups — balance_by","text":"x Vector data frame balance n_groups Number groups create weights Optional weights item (higher = work)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/balance_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Balance work across groups — balance_by","text":"List balanced groups","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/balance_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Balance work across groups — balance_by","text":"","code":"# \\donttest{ # Balance items across 3 groups groups <- balance_by(1:10, n_groups = 3)  # Balance with weights (e.g., file sizes) files <- c(\"small.csv\", \"medium.csv\", \"large.csv\") sizes <- c(100, 500, 1000) groups <- balance_by(files, n_groups = 2, weights = sizes) # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/batch_resources.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a list of SLURM resources with friendly parsing — batch_resources","title":"Create a list of SLURM resources with friendly parsing — batch_resources","text":"Builds resource specification SLURM job submission convenient parsing time formats memory specifications. Handles common abbreviations normalizes values batchtools compatibility.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/batch_resources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a list of SLURM resources with friendly parsing — batch_resources","text":"","code":"batch_resources(   partition = NULL,   time = NULL,   nodes = NULL,   ntasks = NULL,   ntasks_per_node = NULL,   cpus_per_task = NULL,   ncpus = NULL,   mem = NULL,   account = NULL,   qos = NULL,   modules = NULL,   omp_num_threads = NULL )"},{"path":"https://bbuchsbaum.github.io/parade/reference/batch_resources.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a list of SLURM resources with friendly parsing — batch_resources","text":"partition SLURM partition name time Time limit (accepts formats like '2h', '90min', 'H:MM:SS') nodes Number nodes required ntasks Number tasks ntasks_per_node Number tasks per node cpus_per_task CPUs per task ncpus Alias cpus_per_task mem Memory requirement (e.g., \"4GB\", \"1000MB\") account SLURM account charge qos Quality service level modules Environment modules load omp_num_threads OpenMP thread count","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/batch_resources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a list of SLURM resources with friendly parsing — batch_resources","text":"Named list suitable batchtools submitJobs resources","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/batch_resources.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a list of SLURM resources with friendly parsing — batch_resources","text":"","code":"batch_resources(time = \"2h\", mem = \"4GB\", cpus_per_task = 4) #> $time #> [1] \"2:00:00\" #>  #> $cpus_per_task #> [1] 4 #>  #> $mem #> [1] \"4GB\" #>  batch_resources(partition = \"gpu\", time = \"30min\") #> $partition #> [1] \"gpu\" #>  #> $time #> [1] \"0:30:00\" #>"},{"path":"https://bbuchsbaum.github.io/parade/reference/blob.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a blob type specification — blob","title":"Create a blob type specification — blob","text":"Generic container complex objects, optional class validation. permissive isa(), useful prototyping.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/blob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a blob type specification — blob","text":"","code":"blob(class = NULL)"},{"path":"https://bbuchsbaum.github.io/parade/reference/blob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a blob type specification — blob","text":"class Optional character string naming required class(es)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/blob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a blob type specification — blob","text":"parade_ptype object schema validation","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/blob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a blob type specification — blob","text":"","code":"# Accept any object schema(data = blob()) #> # A tibble: 0 × 1 #> # ℹ 1 variable: data <list<list>>  # Accept any object of specific class schema(model = blob(class = \"nls\")) #> # A tibble: 0 × 1 #> # ℹ 1 variable: model <list<list>>"},{"path":"https://bbuchsbaum.github.io/parade/reference/c.parade_jobset.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine jobsets — c.parade_jobset","title":"Combine jobsets — c.parade_jobset","text":"Combine jobsets","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/c.parade_jobset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine jobsets — c.parade_jobset","text":"","code":"# S3 method for class 'parade_jobset' c(...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/calculate_backoff.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate backoff delay — calculate_backoff","title":"Calculate backoff delay — calculate_backoff","text":"Calculate backoff delay","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/calculate_backoff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate backoff delay — calculate_backoff","text":"","code":"calculate_backoff(attempts, strategy, base)"},{"path":"https://bbuchsbaum.github.io/parade/reference/calculate_backoff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate backoff delay — calculate_backoff","text":"attempts Number previous attempts strategy Backoff strategy base Base delay seconds","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/calculate_backoff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate backoff delay — calculate_backoff","text":"Delay seconds","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/cancel.html","id":null,"dir":"Reference","previous_headings":"","what":"Cancel all jobs in a jobset — cancel","title":"Cancel all jobs in a jobset — cancel","text":"Cancel jobs jobset","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/cancel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cancel all jobs in a jobset — cancel","text":"","code":"cancel(x, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/cancel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cancel all jobs in a jobset — cancel","text":"x parade_jobset object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/cancel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cancel all jobs in a jobset — cancel","text":"jobset (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a character type specification — chr","title":"Create a character type specification — chr","text":"Create character type specification","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a character type specification — chr","text":"","code":"chr()"},{"path":"https://bbuchsbaum.github.io/parade/reference/chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a character type specification — chr","text":"character vector prototype schema definitions","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/chr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a character type specification — chr","text":"","code":"schema(name = chr()) #> # A tibble: 0 × 1 #> # ℹ 1 variable: name <chr>"},{"path":"https://bbuchsbaum.github.io/parade/reference/chunk_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Chunk data into groups — chunk_by","title":"Chunk data into groups — chunk_by","text":"Splits data chunks batch processing. Useful distributing work across jobs controlling batch sizes.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/chunk_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chunk data into groups — chunk_by","text":"","code":"chunk_by(x, size = NULL, n_chunks = NULL, by = NULL)"},{"path":"https://bbuchsbaum.github.io/parade/reference/chunk_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chunk data into groups — chunk_by","text":"x Vector data frame chunk size Size chunk n_chunks Number chunks (alternative size) Column name(s) group chunking (data frames)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/chunk_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chunk data into groups — chunk_by","text":"List chunks","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/chunk_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chunk data into groups — chunk_by","text":"","code":"# \\donttest{ # Chunk vector into groups of 10 chunks <- chunk_by(1:100, size = 10)  # Chunk into 4 equal groups chunks <- chunk_by(1:100, n_chunks = 4)  # Chunk data frame by group then size df <- data.frame(group = rep(c(\"A\", \"B\"), 50), value = 1:100) chunks <- chunk_by(df, by = \"group\", size = 10) # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/collect.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect results from all jobs in a jobset — collect","title":"Collect results from all jobs in a jobset — collect","text":"Collect results jobs jobset","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/collect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect results from all jobs in a jobset — collect","text":"","code":"collect(x, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/collect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect results from all jobs in a jobset — collect","text":"x parade_jobset object simplify Try simplify results vector/matrix","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/collect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect results from all jobs in a jobset — collect","text":"List simplified structure results","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/collect.parade_flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute a parade flow and collect results — collect.parade_flow","title":"Execute a parade flow and collect results — collect.parade_flow","text":"Runs stages flow, handling dependencies parallelization according flow's distribution settings. Returns tibble results stages.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/collect.parade_flow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute a parade flow and collect results — collect.parade_flow","text":"","code":"# S3 method for class 'parade_flow' collect(   fl,   engine = c(\"future\", \"sequential\"),   workers = NULL,   scheduling = 1,   seed_furrr = TRUE,   .progress = interactive(),   limit = NULL,   validate = c(\"light\", \"full\"),   ... )"},{"path":"https://bbuchsbaum.github.io/parade/reference/collect.parade_flow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute a parade flow and collect results — collect.parade_flow","text":"fl parade_flow object stages execute engine Execution engine: \"future\" (default) \"sequential\" workers Number workers parallel execution scheduling Furrr scheduling parameter (0 < value <= 1 chunk size) seed_furrr Whether enable deterministic random number generation .progress Whether display progress bars (default: interactive()) limit Optional limit number grid rows process validate Validation mode flexible types: \"light\" (default) \"full\" ... Additional arguments (unused)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/collect.parade_flow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute a parade flow and collect results — collect.parade_flow","text":"tibble containing results executed stages","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/collect.parade_flow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute a parade flow and collect results — collect.parade_flow","text":"","code":"# \\donttest{ grid <- data.frame(x = 1:3) fl <- flow(grid) |>   stage(\"double\", function(x) x * 2, schema = returns(result = dbl())) results <- collect(fl) # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/collect_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect results from a job — collect_result","title":"Collect results from a job — collect_result","text":"Collect results job","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/collect_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect results from a job — collect_result","text":"","code":"collect_result(x)"},{"path":"https://bbuchsbaum.github.io/parade/reference/combine_grids.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine multiple grids — combine_grids","title":"Combine multiple grids — combine_grids","text":"Combine multiple parameter grids, useful exploring different regions parameter space different resolutions.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/combine_grids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple grids — combine_grids","text":"","code":"combine_grids(..., .id = \".source\")"},{"path":"https://bbuchsbaum.github.io/parade/reference/combine_grids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple grids — combine_grids","text":"... Grid data frames combine .id Name source identifier column","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/combine_grids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine multiple grids — combine_grids","text":"Combined data frame","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/combine_grids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine multiple grids — combine_grids","text":"","code":"# \\donttest{ # Coarse grid for exploration coarse <- grid(x = seq(0, 10, by = 2), y = seq(0, 10, by = 2))  # Fine grid for interesting region fine <- grid(x = seq(4, 6, by = 0.5), y = seq(4, 6, by = 0.5))  # Combine them combined <- combine_grids(coarse = coarse, fine = fine) # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/completed.html","id":null,"dir":"Reference","previous_headings":"","what":"Select completed jobs — completed","title":"Select completed jobs — completed","text":"Select completed jobs","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/completed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select completed jobs — completed","text":"","code":"completed(x)"},{"path":"https://bbuchsbaum.github.io/parade/reference/contract.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a validation contract for stage outputs — contract","title":"Define a validation contract for stage outputs — contract","text":"Define validation contract stage outputs","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/contract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a validation contract for stage outputs — contract","text":"","code":"contract(...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/contract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a validation contract for stage outputs — contract","text":"... Named field specifications validation","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/contract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a validation contract for stage outputs — contract","text":"parade_contract object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/contract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a validation contract for stage outputs — contract","text":"","code":"my_contract <- contract(result = ctr_field(\"result\", min = 0))"},{"path":"https://bbuchsbaum.github.io/parade/reference/cpus.html","id":null,"dir":"Reference","previous_headings":"","what":"Set CPU count for a resource profile — cpus","title":"Set CPU count for a resource profile — cpus","text":"Set CPU count resource profile","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/cpus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set CPU count for a resource profile — cpus","text":"","code":"cpus(profile, value)"},{"path":"https://bbuchsbaum.github.io/parade/reference/cpus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set CPU count for a resource profile — cpus","text":"profile resource profile object value Number CPUs","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/cpus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set CPU count for a resource profile — cpus","text":"Updated profile object","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/reference/ctr_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a contract field specification — ctr_field","title":"Define a contract field specification — ctr_field","text":"Define contract field specification","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/ctr_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a contract field specification — ctr_field","text":"","code":"ctr_field(   name,   class = NULL,   length = 1L,   predicate = NULL,   min = NULL,   max = NULL,   choices = NULL,   allow_na = TRUE,   allow_null = FALSE )"},{"path":"https://bbuchsbaum.github.io/parade/reference/ctr_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a contract field specification — ctr_field","text":"name Field name validate class Expected class(es) field length Expected length (default 1) predicate Custom validation function min Minimum allowed value (numeric fields) max Maximum allowed value (numeric fields) choices Valid choices (categorical fields) allow_na Whether NA values allowed allow_null Whether NULL values allowed","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/ctr_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a contract field specification — ctr_field","text":"parade_ctr_field object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/ctr_field.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a contract field specification — ctr_field","text":"","code":"ctr_field(\"score\", class = \"numeric\", min = 0, max = 100) #> $name #> [1] \"score\" #>  #> $class #> [1] \"numeric\" #>  #> $length #> [1] 1 #>  #> $predicate #> NULL #>  #> $min #> [1] 0 #>  #> $max #> [1] 100 #>  #> $choices #> NULL #>  #> $allow_na #> [1] TRUE #>  #> $allow_null #> [1] FALSE #>  #> attr(,\"class\") #> [1] \"parade_ctr_field\""},{"path":"https://bbuchsbaum.github.io/parade/reference/dbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a double/numeric type specification — dbl","title":"Create a double/numeric type specification — dbl","text":"Create double/numeric type specification","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a double/numeric type specification — dbl","text":"","code":"dbl()"},{"path":"https://bbuchsbaum.github.io/parade/reference/dbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a double/numeric type specification — dbl","text":"double vector prototype schema definitions","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a double/numeric type specification — dbl","text":"","code":"schema(result = dbl()) #> # A tibble: 0 × 1 #> # ℹ 1 variable: result <dbl>"},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_await.html","id":null,"dir":"Reference","previous_headings":"","what":"Wait for deferred execution to complete — deferred_await","title":"Wait for deferred execution to complete — deferred_await","text":"Wait deferred execution complete","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_await.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wait for deferred execution to complete — deferred_await","text":"","code":"deferred_await(d, timeout = Inf, poll = 10)"},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_await.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wait for deferred execution to complete — deferred_await","text":"d parade_deferred object timeout Maximum time wait seconds poll Polling interval seconds","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_await.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wait for deferred execution to complete — deferred_await","text":"input deferred object (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_await.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wait for deferred execution to complete — deferred_await","text":"","code":"# \\donttest{ deferred <- submit(fl) #> Error: object 'fl' not found deferred_await(deferred, timeout = 600) #> Error: object 'deferred' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_cancel.html","id":null,"dir":"Reference","previous_headings":"","what":"Cancel deferred execution jobs — deferred_cancel","title":"Cancel deferred execution jobs — deferred_cancel","text":"Cancel deferred execution jobs","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_cancel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cancel deferred execution jobs — deferred_cancel","text":"","code":"deferred_cancel(d, which = c(\"running\", \"all\"))"},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_cancel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cancel deferred execution jobs — deferred_cancel","text":"d parade_deferred object jobs cancel: \"running\" \"\"","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_cancel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cancel deferred execution jobs — deferred_cancel","text":"input deferred object (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_cancel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cancel deferred execution jobs — deferred_cancel","text":"","code":"# \\donttest{ deferred <- submit(fl) #> Error: object 'fl' not found deferred_cancel(deferred, which = \"running\") #> Error: object 'deferred' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_collect.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect results from deferred execution — deferred_collect","title":"Collect results from deferred execution — deferred_collect","text":"Collect results deferred execution","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_collect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect results from deferred execution — deferred_collect","text":"","code":"deferred_collect(d, how = c(\"auto\", \"index\", \"results\"))"},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_collect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect results from deferred execution — deferred_collect","text":"d parade_deferred object collect results: \"auto\", \"index\", \"results\"","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_collect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect results from deferred execution — deferred_collect","text":"tibble collected results","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_collect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collect results from deferred execution — deferred_collect","text":"","code":"# \\donttest{ deferred <- submit(fl) #> Error: object 'fl' not found deferred_await(deferred) #> Error: object 'deferred' not found results <- deferred_collect(deferred) #> Error: object 'deferred' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Get status of a deferred execution — deferred_status","title":"Get status of a deferred execution — deferred_status","text":"Get status deferred execution","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get status of a deferred execution — deferred_status","text":"","code":"deferred_status(d, detail = FALSE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get status of a deferred execution — deferred_status","text":"d parade_deferred object detail Whether return detailed status information","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get status of a deferred execution — deferred_status","text":"tibble execution status","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get status of a deferred execution — deferred_status","text":"","code":"# \\donttest{ deferred <- submit(fl) #> Error: object 'fl' not found status <- deferred_status(deferred) #> Error: object 'deferred' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/diagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract diagnostic information from flow results — diagnostics","title":"Extract diagnostic information from flow results — diagnostics","text":"Extracts formats diagnostic information completed flow execution results, showing success/failure status stage.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/diagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract diagnostic information from flow results — diagnostics","text":"","code":"diagnostics(out, stage = NULL)"},{"path":"https://bbuchsbaum.github.io/parade/reference/diagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract diagnostic information from flow results — diagnostics","text":"Results tibble collect() similar stage Optional stage name filter results","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/diagnostics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract diagnostic information from flow results — diagnostics","text":"Tibble diagnostic information","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/diagnostics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract diagnostic information from flow results — diagnostics","text":"","code":"# Create a sample results tibble with diagnostic info sample_out <- tibble::tibble(   .ok = c(TRUE, FALSE, TRUE),   .diag = list(     list(process = list(ok = TRUE, skipped = FALSE),          validate = list(ok = TRUE, skipped = FALSE)),     list(process = list(ok = FALSE, skipped = FALSE),          validate = list(ok = TRUE, skipped = TRUE)),     list(process = list(ok = TRUE, skipped = FALSE),          validate = list(ok = TRUE, skipped = FALSE))   ) )  # Get all diagnostics diag <- diagnostics(sample_out)  # Get diagnostics for specific stage stage_diag <- diagnostics(sample_out, stage = \"process\")"},{"path":"https://bbuchsbaum.github.io/parade/reference/digest.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate job names from content digest — digest","title":"Generate job names from content digest — digest","text":"Creates naming function uses hash input unique job names.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/digest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate job names from content digest — digest","text":"","code":"digest(prefix = \"job\", length = 8)"},{"path":"https://bbuchsbaum.github.io/parade/reference/digest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate job names from content digest — digest","text":"prefix Prefix job name length Number characters hash use","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/digest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate job names from content digest — digest","text":"function suitable use .name_by parameter","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/digest.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Generate job names from content digest — digest","text":"function masks digest::digest parade attached. Prefer name_digest() explicit alias avoid confusion.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/digest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate job names from content digest — digest","text":"","code":"# \\donttest{ # Each unique input gets a unique name data <- list(a = 1:10, b = 11:20, a = 1:10)  # Note: 'a' appears twice jobs <- slurm_map(data, process_data, .name_by = digest()) #> Error: object 'process_data' not found # Job names will use hash, with identical inputs getting same hash # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_local.html","id":null,"dir":"Reference","previous_headings":"","what":"Create local distribution specification — dist_local","title":"Create local distribution specification — dist_local","text":"Configure local parallel execution using future framework.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_local.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create local distribution specification — dist_local","text":"","code":"dist_local(   by = NULL,   within = c(\"multisession\", \"sequential\"),   workers_within = NULL,   chunks_per_job = 1L )"},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_local.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create local distribution specification — dist_local","text":"Column names group parallelization within Execution strategy: \"multisession\" \"sequential\" workers_within Number workers within job chunks_per_job Number groups process per job","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_local.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create local distribution specification — dist_local","text":"parade_dist object local execution","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_local.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create local distribution specification — dist_local","text":"","code":"dist_local(by = \"group\", within = \"multisession\") #> $backend #> [1] \"local\" #>  #> $by #> [1] \"group\" #>  #> $within #> [1] \"multisession\" #>  #> $workers_within #> NULL #>  #> $chunks_per_job #> [1] 1 #>  #> $slurm #> NULL #>  #> attr(,\"class\") #> [1] \"parade_dist\" dist_local(chunks_per_job = 2L) #> $backend #> [1] \"local\" #>  #> $by #> character(0) #>  #> $within #> [1] \"multisession\" #>  #> $workers_within #> NULL #>  #> $chunks_per_job #> [1] 2 #>  #> $slurm #> NULL #>  #> attr(,\"class\") #> [1] \"parade_dist\""},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_mirai.html","id":null,"dir":"Reference","previous_headings":"","what":"Create mirai distribution specification — dist_mirai","title":"Create mirai distribution specification — dist_mirai","text":"Configure distributed execution using mirai, supporting local daemons, SSH tunneling, SLURM-managed daemon pools. Mirai provides low-latency task execution without R's connection limits.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_mirai.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create mirai distribution specification — dist_mirai","text":"","code":"dist_mirai(   n = NULL,   url = NULL,   remote = NULL,   dispatcher = TRUE,   tls = FALSE,   port = NULL,   stop_on_exit = TRUE,   within = c(\"mirai\", \"sequential\"),   workers_within = NULL,   chunks_per_job = 1L,   by = NULL )"},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_mirai.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create mirai distribution specification — dist_mirai","text":"n Number local daemons launch url Listening URL remote connections (auto-generated NULL) remote Remote configuration mirai::ssh_config() mirai::cluster_config() dispatcher Use dispatcher automatic load balancing tls Use TLS encryption connections port Port number connections (auto-selected NULL) stop_on_exit Automatically cleanup daemons finished within Execution strategy within job: \"mirai\" \"sequential\" workers_within Number workers nested parallelization chunks_per_job Number groups process per job Column names group parallelization","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_mirai.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create mirai distribution specification — dist_mirai","text":"parade_dist object mirai execution","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_mirai.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create mirai distribution specification — dist_mirai","text":"","code":"# Local daemons dist_mirai(n = 4) #> $backend #> [1] \"mirai\" #>  #> $by #> character(0) #>  #> $n #> [1] 4 #>  #> $url #> NULL #>  #> $remote #> NULL #>  #> $dispatcher #> [1] TRUE #>  #> $tls #> [1] FALSE #>  #> $port #> NULL #>  #> $stop_on_exit #> [1] TRUE #>  #> $within #> [1] \"mirai\" #>  #> $workers_within #> NULL #>  #> $chunks_per_job #> [1] 1 #>  #> attr(,\"class\") #> [1] \"parade_dist\"  # With TLS encryption dist_mirai(n = 8, tls = TRUE, port = 5555) #> $backend #> [1] \"mirai\" #>  #> $by #> character(0) #>  #> $n #> [1] 8 #>  #> $url #> NULL #>  #> $remote #> NULL #>  #> $dispatcher #> [1] TRUE #>  #> $tls #> [1] TRUE #>  #> $port #> [1] 5555 #>  #> $stop_on_exit #> [1] TRUE #>  #> $within #> [1] \"mirai\" #>  #> $workers_within #> NULL #>  #> $chunks_per_job #> [1] 1 #>  #> attr(,\"class\") #> [1] \"parade_dist\"  # SSH remotes (requires configuration) # \\donttest{ dist_mirai(   remote = quote(mirai::ssh_config(c(\"ssh://node1\", \"ssh://node2\"))),   dispatcher = TRUE ) #> $backend #> [1] \"mirai\" #>  #> $by #> character(0) #>  #> $n #> NULL #>  #> $url #> NULL #>  #> $remote #> mirai::ssh_config(c(\"ssh://node1\", \"ssh://node2\")) #>  #> $dispatcher #> [1] TRUE #>  #> $tls #> [1] FALSE #>  #> $port #> NULL #>  #> $stop_on_exit #> [1] TRUE #>  #> $within #> [1] \"mirai\" #>  #> $workers_within #> NULL #>  #> $chunks_per_job #> [1] 1 #>  #> attr(,\"class\") #> [1] \"parade_dist\" # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_slurm.html","id":null,"dir":"Reference","previous_headings":"","what":"Create SLURM distribution specification — dist_slurm","title":"Create SLURM distribution specification — dist_slurm","text":"Configure distributed execution SLURM clusters using batchtools.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_slurm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create SLURM distribution specification — dist_slurm","text":"","code":"dist_slurm(   by = NULL,   within = c(\"multisession\", \"sequential\"),   workers_within = NULL,   template = slurm_template(),   resources = list(),   chunks_per_job = 1L )"},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_slurm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create SLURM distribution specification — dist_slurm","text":"Column names group parallelization within Execution strategy within SLURM job workers_within Number workers within SLURM job template Path SLURM batch template file resources Named list SLURM resource specifications chunks_per_job Number groups process per SLURM job","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_slurm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create SLURM distribution specification — dist_slurm","text":"parade_dist object SLURM execution","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_slurm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create SLURM distribution specification — dist_slurm","text":"","code":"# Create SLURM distribution specification dist <- dist_slurm(by = \"condition\", resources = list(time = \"1h\", mem = \"4GB\"))  # Use with a flow (configuration only, no execution) grid <- data.frame(x = 1:4, group = rep(c(\"A\", \"B\"), 2)) if (FALSE) { # \\dontrun{ flow(grid) |>   stage(\"process\", function(x) x * 2) |>   distribute(dist) } # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_slurm_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience: SLURM distribution from a named profile — dist_slurm_profile","title":"Convenience: SLURM distribution from a named profile — dist_slurm_profile","text":"Builds SLURM distribution spec using resource profile name (profile object) manually call slurm_resources() common cases.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_slurm_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience: SLURM distribution from a named profile — dist_slurm_profile","text":"","code":"dist_slurm_profile(   profile,   by = NULL,   within = c(\"multisession\", \"sequential\"),   workers_within = NULL,   template = slurm_template(),   chunks_per_job = 1L )"},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_slurm_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience: SLURM distribution from a named profile — dist_slurm_profile","text":"profile Profile identifier passed slurm_resources(). Typically character name registered via slurm_defaults_set() profile_register(); can also parade_profile object plain list. Optional column names group parallelization. within Execution strategy within SLURM job: \"multisession\" \"sequential\". workers_within Number workers used within SLURM job. template Path SLURM template file. chunks_per_job Number groups process per SLURM job.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_slurm_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience: SLURM distribution from a named profile — dist_slurm_profile","text":"parade_dist object suitable distribute()","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_slurm_profile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convenience: SLURM distribution from a named profile — dist_slurm_profile","text":"","code":"# Create SLURM distribution using a profile dist <- dist_slurm_profile(\"standard\", by = \"group\")  # Configuration example (no execution) if (FALSE) { # \\dontrun{ flow(grid) |>   stage(\"analyze\", analyze_fn) |>   distribute(dist_slurm_profile(\"standard\")) } # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/distribute.html","id":null,"dir":"Reference","previous_headings":"","what":"Add distribution settings to a parade flow — distribute","title":"Add distribution settings to a parade flow — distribute","text":"Add distribution settings parade flow","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/distribute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add distribution settings to a parade flow — distribute","text":"","code":"distribute(fl, dist)"},{"path":"https://bbuchsbaum.github.io/parade/reference/distribute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add distribution settings to a parade flow — distribute","text":"fl parade_flow object dist distribution specification dist_local() dist_slurm()","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/distribute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add distribution settings to a parade flow — distribute","text":"input flow distribution settings applied","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/distribute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add distribution settings to a parade flow — distribute","text":"","code":"grid <- data.frame(x = 1:4, group = rep(c(\"A\", \"B\"), 2)) fl <- flow(grid) |> distribute(dist_local(by = \"group\"))"},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-formula_to_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert formula to function for sink operations — .formula_to_function","title":"Convert formula to function for sink operations — .formula_to_function","text":"Convert formula function sink operations","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-formula_to_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert formula to function for sink operations — .formula_to_function","text":"","code":".formula_to_function(formula, write_mode = TRUE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-formula_to_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert formula to function for sink operations — .formula_to_function","text":"formula Formula object convert write_mode Logical indicating whether create writer (TRUE) reader (FALSE)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-formula_to_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert formula to function for sink operations — .formula_to_function","text":"Function writing reading data","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-get_writer_reader.html","id":null,"dir":"Reference","previous_headings":"","what":"Get writer and reader functions for a format — .get_writer_reader","title":"Get writer and reader functions for a format — .get_writer_reader","text":"Get writer reader functions format","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-get_writer_reader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get writer and reader functions for a format — .get_writer_reader","text":"","code":".get_writer_reader(format_or_fn, field = NULL)"},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-get_writer_reader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get writer and reader functions for a format — .get_writer_reader","text":"format_or_fn Format name string function field Optional field name extraction","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-get_writer_reader.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get writer and reader functions for a format — .get_writer_reader","text":"List writer reader functions","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-is_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a value should be treated as missing — .is_missing","title":"Check if a value should be treated as missing — .is_missing","text":"Internal function detect various representations missing values including NULL, NA, zero-length vectors, omit() sentinels.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-is_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a value should be treated as missing — .is_missing","text":"","code":".is_missing(x)"},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-is_missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a value should be treated as missing — .is_missing","text":"x Value check","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-is_missing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a value should be treated as missing — .is_missing","text":"Logical indicating value missing","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-parade_check_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if value matches type specification — .parade_check_type","title":"Check if value matches type specification — .parade_check_type","text":"Internal function used collect() validate stage outputs.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-parade_check_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if value matches type specification — .parade_check_type","text":"","code":".parade_check_type(x, spec, mode = c(\"light\", \"full\"))"},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-parade_check_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if value matches type specification — .parade_check_type","text":"x Value check spec Type specification mode Validation mode: \"light\" \"full\"","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-parade_check_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if value matches type specification — .parade_check_type","text":"Logical indicating value matches specification","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-parse_sacct_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse sacct output — .parse_sacct_output","title":"Parse sacct output — .parse_sacct_output","text":"Parse sacct output","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-parse_sacct_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse sacct output — .parse_sacct_output","text":"","code":".parse_sacct_output(output, job_id)"},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-parse_sacct_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse sacct output — .parse_sacct_output","text":"output Character vector sacct command output job_id Job ID search ","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-parse_sacct_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse sacct output — .parse_sacct_output","text":"List job accounting information NULL found","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-parse_squeue_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse squeue output — .parse_squeue_output","title":"Parse squeue output — .parse_squeue_output","text":"Parse squeue output","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-parse_squeue_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse squeue output — .parse_squeue_output","text":"","code":".parse_squeue_output(output)"},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-parse_squeue_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse squeue output — .parse_squeue_output","text":"output Character vector squeue command output","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-parse_squeue_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse squeue output — .parse_squeue_output","text":"List job state information (state, time, timelimit, cpus, nodes, reason, nodelist)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-parse_sstat_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse sstat output — .parse_sstat_output","title":"Parse sstat output — .parse_sstat_output","text":"Parse sstat output","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-parse_sstat_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse sstat output — .parse_sstat_output","text":"","code":".parse_sstat_output(output)"},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-parse_sstat_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse sstat output — .parse_sstat_output","text":"output Character vector sstat command output","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-parse_sstat_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse sstat output — .parse_sstat_output","text":"List job statistics NULL parseable","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-register_builtin_formats.html","id":null,"dir":"Reference","previous_headings":"","what":"Register built-in sink formats — .register_builtin_formats","title":"Register built-in sink formats — .register_builtin_formats","text":"Register built-sink formats","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-register_builtin_formats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register built-in sink formats — .register_builtin_formats","text":"","code":".register_builtin_formats()"},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-slurm_exec.html","id":null,"dir":"Reference","previous_headings":"","what":"Execution hook for testing — .slurm_exec","title":"Execution hook for testing — .slurm_exec","text":"Execution hook testing","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-slurm_exec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execution hook for testing — .slurm_exec","text":"","code":".slurm_exec(cmd, args)"},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-slurm_exec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execution hook for testing — .slurm_exec","text":"cmd Command execute args Command arguments","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-slurm_exec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execution hook for testing — .slurm_exec","text":"Command output","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-slurm_sacct_info_v2.html","id":null,"dir":"Reference","previous_headings":"","what":"Refactored sacct info with injectable executor — .slurm_sacct_info_v2","title":"Refactored sacct info with injectable executor — .slurm_sacct_info_v2","text":"Refactored sacct info injectable executor","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-slurm_sacct_info_v2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Refactored sacct info with injectable executor — .slurm_sacct_info_v2","text":"","code":".slurm_sacct_info_v2(job_id, exec = .slurm_exec)"},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-slurm_sacct_info_v2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Refactored sacct info with injectable executor — .slurm_sacct_info_v2","text":"job_id Job ID query exec Execution function (defaults .slurm_exec)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-slurm_sacct_info_v2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Refactored sacct info with injectable executor — .slurm_sacct_info_v2","text":"Parsed sacct output","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-slurm_squeue_info_v2.html","id":null,"dir":"Reference","previous_headings":"","what":"Refactored squeue info with injectable executor — .slurm_squeue_info_v2","title":"Refactored squeue info with injectable executor — .slurm_squeue_info_v2","text":"Refactored squeue info injectable executor","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-slurm_squeue_info_v2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Refactored squeue info with injectable executor — .slurm_squeue_info_v2","text":"","code":".slurm_squeue_info_v2(job_id, exec = .slurm_exec)"},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-slurm_squeue_info_v2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Refactored squeue info with injectable executor — .slurm_squeue_info_v2","text":"job_id Job ID query exec Execution function (defaults .slurm_exec)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-slurm_squeue_info_v2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Refactored squeue info with injectable executor — .slurm_squeue_info_v2","text":"Parsed squeue output","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-slurm_sstat_info_v2.html","id":null,"dir":"Reference","previous_headings":"","what":"Refactored sstat info with injectable executor — .slurm_sstat_info_v2","title":"Refactored sstat info with injectable executor — .slurm_sstat_info_v2","text":"Refactored sstat info injectable executor","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-slurm_sstat_info_v2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Refactored sstat info with injectable executor — .slurm_sstat_info_v2","text":"","code":".slurm_sstat_info_v2(job_id, exec = .slurm_exec)"},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-slurm_sstat_info_v2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Refactored sstat info with injectable executor — .slurm_sstat_info_v2","text":"job_id Job ID query exec Execution function (defaults .slurm_exec)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-slurm_sstat_info_v2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Refactored sstat info with injectable executor — .slurm_sstat_info_v2","text":"Parsed sstat output","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-validate_flex_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate row with flexible types — .validate_flex_row","title":"Validate row with flexible types — .validate_flex_row","text":"Used collect() validate stage outputs flexible schemas.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-validate_flex_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate row with flexible types — .validate_flex_row","text":"","code":".validate_flex_row(row, schema, mode = \"light\")"},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-validate_flex_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate row with flexible types — .validate_flex_row","text":"row Single row results schema Schema specification mode Validation mode: \"light\" \"full\"","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-validate_flex_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate row with flexible types — .validate_flex_row","text":"List ok status error messages","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-write_atomic_generic.html","id":null,"dir":"Reference","previous_headings":"","what":"Write atomically with generic writer function — .write_atomic_generic","title":"Write atomically with generic writer function — .write_atomic_generic","text":"Write atomically generic writer function","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-write_atomic_generic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write atomically with generic writer function — .write_atomic_generic","text":"","code":".write_atomic_generic(writer_fn, x, path, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-write_atomic_generic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write atomically with generic writer function — .write_atomic_generic","text":"writer_fn Function write data file x Data object write path Target file path ... Additional arguments passed writer_fn","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-write_atomic_generic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write atomically with generic writer function — .write_atomic_generic","text":"Path written file (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dry_run.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Dry run for job submission (default) — dry_run.default","title":"Dry run for job submission (default) — dry_run.default","text":"Dry run job submission (default)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dry_run.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dry run for job submission (default) — dry_run.default","text":"","code":"# Default S3 method dry_run(   .f,   ...,   .name = NULL,   .resources = NULL,   .write_result = NULL,   .engine = \"slurm\" )"},{"path":"https://bbuchsbaum.github.io/parade/reference/dry_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Dry run job submission — dry_run","title":"Dry run job submission — dry_run","text":"Simulate job submission without actually submitting. Shows created files written.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dry_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dry run job submission — dry_run","text":"","code":"dry_run(x, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/dry_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dry run job submission — dry_run","text":"... Arguments .f Function script .name Job name .resources Resources .write_result results written .engine Engine","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dry_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dry run job submission — dry_run","text":"Dry run results","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/reference/dry_run.parade_flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Dry-run a flow: show plan and counts without executing — dry_run.parade_flow","title":"Dry-run a flow: show plan and counts without executing — dry_run.parade_flow","text":"Dry-run flow: show plan counts without executing","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dry_run.parade_flow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dry-run a flow: show plan and counts without executing — dry_run.parade_flow","text":"","code":"# S3 method for class 'parade_flow' dry_run(fl, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/dry_run.parade_flow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dry-run a flow: show plan and counts without executing — dry_run.parade_flow","text":"fl flow().","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/expand_path_macros.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand path macros in a string — expand_path_macros","title":"Expand path macros in a string — expand_path_macros","text":"Replaces stem, name, run, date macros paths","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/expand_path_macros.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand path macros in a string — expand_path_macros","text":"","code":"expand_path_macros(path, args = list(), name = NULL)"},{"path":"https://bbuchsbaum.github.io/parade/reference/expand_path_macros.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand path macros in a string — expand_path_macros","text":"path Path string potential macros args Arguments list context name Job name","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/expand_path_macros.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand path macros in a string — expand_path_macros","text":"Expanded path string","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/expand_path_macros_enhanced.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand path macros with enhanced patterns — expand_path_macros_enhanced","title":"Expand path macros with enhanced patterns — expand_path_macros_enhanced","text":"Enhanced version expand_path_macros supports additional patterns context-aware expansion.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/expand_path_macros_enhanced.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand path macros with enhanced patterns — expand_path_macros_enhanced","text":"","code":"expand_path_macros_enhanced(   path_template,   name = NULL,   index = NULL,   stem = NULL,   run = NULL,   date = NULL,   time = NULL,   user = NULL,   host = NULL,   ... )"},{"path":"https://bbuchsbaum.github.io/parade/reference/expand_path_macros_enhanced.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand path macros with enhanced patterns — expand_path_macros_enhanced","text":"path_template Path template macros name Job name index Job index stem File stem run Run identifier date Date string (default: today) time Time string (default: now) user Username (default: current user) host Hostname (default: current host) ... Additional key-value pairs expansion","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/expand_path_macros_enhanced.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand path macros with enhanced patterns — expand_path_macros_enhanced","text":"Expanded path","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/expand_path_macros_enhanced.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expand path macros with enhanced patterns — expand_path_macros_enhanced","text":"","code":"# \\donttest{ # Basic expansion expand_path_macros_enhanced(   \"results/{name}_{date}.rds\",   name = \"analysis\" ) #> [1] \"results/analysis_20250831.rds\"  # With multiple macros expand_path_macros_enhanced(   \"{user}/runs/{date}/{time}/output_{index}.csv\",   index = 1 ) #> [1] \"runner/runs/20250831/144759/output_1.csv\"  # Custom values expand_path_macros_enhanced(   \"models/{experiment}/{model}_{version}.pkl\",   experiment = \"exp001\",   model = \"resnet\",   version = \"v2\" ) #> [1] \"models/exp001/resnet_v2.pkl\" # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/explain.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Explain a job submission (default) — explain.default","title":"Explain a job submission (default) — explain.default","text":"Explain job submission (default)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/explain.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explain a job submission (default) — explain.default","text":"","code":"# Default S3 method explain(   .f,   ...,   .resources = NULL,   .packages = character(),   .engine = c(\"slurm\", \"local\") )"},{"path":"https://bbuchsbaum.github.io/parade/reference/explain.html","id":null,"dir":"Reference","previous_headings":"","what":"Explain what will be executed — explain","title":"Explain what will be executed — explain","text":"Show detailed information submitted without actually submitting job. Useful debugging understanding job configurations.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/explain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explain what will be executed — explain","text":"","code":"explain(x, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/explain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explain what will be executed — explain","text":"... Arguments passed .f Function script explain .resources Resource specification .packages Packages load .engine Execution engine","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/explain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Explain what will be executed — explain","text":"Invisible list job details","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/reference/explain.parade_flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Explain a flow: DAG + distribution + sinks — explain.parade_flow","title":"Explain a flow: DAG + distribution + sinks — explain.parade_flow","text":"Explain flow: DAG + distribution + sinks","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/explain.parade_flow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explain a flow: DAG + distribution + sinks — explain.parade_flow","text":"","code":"# S3 method for class 'parade_flow' explain(fl, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/explain.parade_flow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explain a flow: DAG + distribution + sinks — explain.parade_flow","text":"fl flow().","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/explain.parade_flow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Explain a flow: DAG + distribution + sinks — explain.parade_flow","text":"tibble summarizing stages.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/failed.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract failed rows from flow results — failed","title":"Extract failed rows from flow results — failed","text":"Returns rows execution failed, either overall specific stage.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/failed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract failed rows from flow results — failed","text":"","code":"failed(x)  failed(x)"},{"path":"https://bbuchsbaum.github.io/parade/reference/failed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract failed rows from flow results — failed","text":"Results tibble flow execution stage Optional stage name check failures","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/failed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract failed rows from flow results — failed","text":"Tibble containing failed rows","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/failed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract failed rows from flow results — failed","text":"","code":"# Create a sample results tibble with diagnostic info sample_out <- tibble::tibble(   .ok = c(TRUE, FALSE, TRUE, FALSE),   .diag = list(     list(validation = list(ok = TRUE, skipped = FALSE)),     list(validation = list(ok = FALSE, skipped = FALSE)),     list(validation = list(ok = TRUE, skipped = FALSE)),     list(validation = list(ok = FALSE, skipped = FALSE))   ) )  # Get all failed rows failures <- failed(sample_out) #> Error in UseMethod(\"failed\"): no applicable method for 'failed' applied to an object of class \"c('tbl_df', 'tbl', 'data.frame')\"  # Get rows that failed in specific stage stage_failures <- failed(sample_out, stage = \"validation\") #> Error in failed(sample_out, stage = \"validation\"): unused argument (stage = \"validation\")"},{"path":"https://bbuchsbaum.github.io/parade/reference/file_ref.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a file reference type specification — file_ref","title":"Create a file reference type specification — file_ref","text":"Create file reference type specification","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/file_ref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a file reference type specification — file_ref","text":"","code":"file_ref()"},{"path":"https://bbuchsbaum.github.io/parade/reference/file_ref.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a file reference type specification — file_ref","text":"packed schema file reference metadata","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/file_ref.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a file reference type specification — file_ref","text":"","code":"file_schema <- returns(output = file_ref())"},{"path":"https://bbuchsbaum.github.io/parade/reference/find_file_arg.html","id":null,"dir":"Reference","previous_headings":"","what":"Find file-like argument in a list — find_file_arg","title":"Find file-like argument in a list — find_file_arg","text":"Find file-like argument list","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/find_file_arg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find file-like argument in a list — find_file_arg","text":"","code":"find_file_arg(args)"},{"path":"https://bbuchsbaum.github.io/parade/reference/find_file_arg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find file-like argument in a list — find_file_arg","text":"args List arguments search ","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/find_file_arg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find file-like argument in a list — find_file_arg","text":"First argument looks like file path, NULL none found","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a parade flow for declarative data processing — flow","title":"Create a parade flow for declarative data processing — flow","text":"flow defines computational pipeline typed stages operate parameter grid. stage can depend previous stages produce typed outputs optional error handling policies.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/flow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a parade flow for declarative data processing — flow","text":"","code":"flow(grid, seed_col = NULL, error = c(\"propagate\", \"keep\", \"omit\", \"stop\"))"},{"path":"https://bbuchsbaum.github.io/parade/reference/flow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a parade flow for declarative data processing — flow","text":"grid data frame tibble containing parameter combinations seed_col Optional column name reproducible random seeds error Error handling policy: \"propagate\" (default), \"keep\", \"omit\", \"stop\"","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/flow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a parade flow for declarative data processing — flow","text":"parade_flow object containing grid, stages, options","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/flow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a parade flow for declarative data processing — flow","text":"","code":"# Create a simple flow grid <- data.frame(x = 1:3, y = letters[1:3]) fl <- flow(grid) print(fl) #> <parade_flow> #>   Grid rows : 3 #>   Stages    : 0 [] #>   Error     : propagate  # Flow with seed column for reproducibility fl_seed <- flow(grid, seed_col = \"x\")"},{"path":"https://bbuchsbaum.github.io/parade/reference/flow_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine flow control policies — flow_control","title":"Combine flow control policies — flow_control","text":"Combine multiple flow control policies applied together.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/flow_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine flow control policies — flow_control","text":"","code":"flow_control(...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/flow_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine flow control policies — flow_control","text":"... Flow control policies combine","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/flow_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine flow control policies — flow_control","text":"Combined flow control policy","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/flow_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine flow control policies — flow_control","text":"","code":"# \\donttest{ # Submit in waves of 10 with max 5 concurrent combined <- flow_control(   in_waves_of(10),   max_in_flight(5) )  jobs <- slurm_map(1:100, ~ .x^2, .options = combined) #> Error in slurm_map(1:100, ~.x^2, .options = combined): Unknown flow control option type # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/get_errors.html","id":null,"dir":"Reference","previous_headings":"","what":"Get collected errors from a policy — get_errors","title":"Get collected errors from a policy — get_errors","text":"Get collected errors policy","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/get_errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get collected errors from a policy — get_errors","text":"","code":"get_errors(policy)"},{"path":"https://bbuchsbaum.github.io/parade/reference/get_errors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get collected errors from a policy — get_errors","text":"policy Error policy object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/get_errors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get collected errors from a policy — get_errors","text":"List collected errors","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/get_job_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Get unique job identifier — get_job_id","title":"Get unique job identifier — get_job_id","text":"Get unique job identifier","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/get_job_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get unique job identifier — get_job_id","text":"","code":"get_job_id(job)"},{"path":"https://bbuchsbaum.github.io/parade/reference/get_job_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get unique job identifier — get_job_id","text":"job Job object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/get_job_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get unique job identifier — get_job_id","text":"String identifier","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/get_running.html","id":null,"dir":"Reference","previous_headings":"","what":"Get currently running jobs from a list — get_running","title":"Get currently running jobs from a list — get_running","text":"Get currently running jobs list","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/get_running.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get currently running jobs from a list — get_running","text":"","code":"get_running(jobs)"},{"path":"https://bbuchsbaum.github.io/parade/reference/get_running.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get currently running jobs from a list — get_running","text":"jobs List job objects","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/get_running.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get currently running jobs from a list — get_running","text":"List running jobs","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/get_sink_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a registered sink format — get_sink_format","title":"Get a registered sink format — get_sink_format","text":"Retrieve format definition name registry.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/get_sink_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a registered sink format — get_sink_format","text":"","code":"get_sink_format(name)"},{"path":"https://bbuchsbaum.github.io/parade/reference/get_sink_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a registered sink format — get_sink_format","text":"name Character string naming format","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/get_sink_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a registered sink format — get_sink_format","text":"List writer, reader, ext, atomic fields, NULL found","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/get_sink_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a registered sink format — get_sink_format","text":"","code":"fmt <- get_sink_format(\"rds\") if (!is.null(fmt)) {   fmt$writer(mtcars, tempfile()) }"},{"path":"https://bbuchsbaum.github.io/parade/reference/glob.html","id":null,"dir":"Reference","previous_headings":"","what":"Glob file patterns — glob","title":"Glob file patterns — glob","text":"Convenience wrapper around Sys.glob() file pattern matching. Useful generating file lists slurm_map().","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/glob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Glob file patterns — glob","text":"","code":"glob(pattern, path = \".\")"},{"path":"https://bbuchsbaum.github.io/parade/reference/glob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Glob file patterns — glob","text":"pattern File pattern wildcards (e.g., \".csv\", \"data/.rds\") path Base path search (default: current directory)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/glob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Glob file patterns — glob","text":"Character vector matching file paths","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/glob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Glob file patterns — glob","text":"","code":"# \\donttest{ # Find all CSV files csv_files <- glob(\"*.csv\") #> Warning: No files found matching pattern: *.csv  # Find all R scripts in subdirectory scripts <- glob(\"scripts/*.R\") #> Warning: No files found matching pattern: scripts/*.R  # Use with slurm_map files <- glob(\"data/*.rds\") #> Warning: No files found matching pattern: data/*.rds jobs <- slurm_map(files, process_file) #> Error: object 'process_file' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/glue_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate job names using glue-style templates — glue_name","title":"Generate job names using glue-style templates — glue_name","text":"Creates naming function uses string interpolation access element values metadata.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/glue_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate job names using glue-style templates — glue_name","text":"","code":"glue_name(template, .envir = parent.frame())"},{"path":"https://bbuchsbaum.github.io/parade/reference/glue_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate job names using glue-style templates — glue_name","text":"template Glue-style template string .envir Environment variable lookup","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/glue_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate job names using glue-style templates — glue_name","text":"function suitable use .name_by parameter","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/glue_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate job names using glue-style templates — glue_name","text":"","code":"# \\donttest{ # Simple template files <- c(\"data1.csv\", \"data2.csv\") jobs <- slurm_map(files, process_file,                    .name_by = glue_name(\"process-{basename(.x)}\")) #> Error: object 'process_file' not found  # With multiple variables (for pmap) jobs <- slurm_pmap(   list(file = files, method = c(\"fast\", \"slow\")),   process_file,   .name_by = glue_name(\"{tools::file_path_sans_ext(basename(file))}-{method}\") ) #> Error: object 'process_file' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/gpus.html","id":null,"dir":"Reference","previous_headings":"","what":"Set GPU count for a resource profile — gpus","title":"Set GPU count for a resource profile — gpus","text":"Set GPU count resource profile","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/gpus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set GPU count for a resource profile — gpus","text":"","code":"gpus(profile, value, type = NULL)"},{"path":"https://bbuchsbaum.github.io/parade/reference/gpus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set GPU count for a resource profile — gpus","text":"profile resource profile object value Number GPUs type Optional GPU type constraint","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/gpus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set GPU count for a resource profile — gpus","text":"Updated profile object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/gpus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set GPU count for a resource profile — gpus","text":"","code":"# \\donttest{ resources <- profile() %>% gpus(2) resources <- profile() %>% gpus(1, type = \"v100\") # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/grapes-or-or-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Null-coalescing operator — %||%","title":"Null-coalescing operator — %||%","text":"Returns left-hand side NULL, otherwise returns right-hand side. operator re-exported rlang package convenience.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/grapes-or-or-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Null-coalescing operator — %||%","text":"","code":"x %||% y"},{"path":"https://bbuchsbaum.github.io/parade/reference/grapes-or-or-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Null-coalescing operator — %||%","text":"Left-hand side value check b Right-hand side value use NULL","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/grapes-or-or-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Null-coalescing operator — %||%","text":"Returns NULL, otherwise returns b","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/grapes-or-or-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Null-coalescing operator — %||%","text":"","code":"# Returns the non-NULL value 5 %||% 10        # Returns 5 #> [1] 5 NULL %||% 10     # Returns 10 #> [1] 10  # Useful for setting defaults x <- NULL value <- x %||% \"default\"  # Returns \"default\""},{"path":"https://bbuchsbaum.github.io/parade/reference/grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create parameter grid for job submission — grid","title":"Create parameter grid for job submission — grid","text":"Generate grid parameter combinations parameter sweeps, compatible slurm_pmap parallel execution.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create parameter grid for job submission — grid","text":"","code":"grid(..., .filter = NULL, .add_metadata = TRUE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create parameter grid for job submission — grid","text":"... Named arguments vectors values expand .filter Optional function filter combinations .add_metadata Whether add metadata columns","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create parameter grid for job submission — grid","text":"Data frame one row per parameter combination","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create parameter grid for job submission — grid","text":"","code":"# \\donttest{ # Simple parameter grid params <- grid(   alpha = c(0.1, 0.5, 1.0),   beta = c(1, 2),   method = c(\"lm\", \"glm\") ) # Creates 3 * 2 * 2 = 12 combinations  # With filtering params <- grid(   x = 1:3,   y = 1:3,   .filter = ~ .x <= .y  # Only upper triangle )  # Use with slurm_pmap jobs <- slurm_pmap(params, function(x, y, method) {   # Run analysis with these parameters }) #> Error in batchtools::makeRegistry(file.dir = reg_dir, make.default = FALSE,     conf.file = NA, cluster.functions = cf): unused argument (cluster.functions = cf) # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/guard_packages.html","id":null,"dir":"Reference","previous_headings":"","what":"Guard that required packages are available — guard_packages","title":"Guard that required packages are available — guard_packages","text":"Checks required packages installed optionally loaded. Can auto-detect package dependencies using codetools.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/guard_packages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guard that required packages are available — guard_packages","text":"","code":"guard_packages(   packages = NULL,   .f = NULL,   load = FALSE,   stop_on_missing = TRUE )"},{"path":"https://bbuchsbaum.github.io/parade/reference/guard_packages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guard that required packages are available — guard_packages","text":"packages Character vector package names check .f Optional function analyze package dependencies load Whether load packages (default: FALSE) stop_on_missing Whether stop error packages missing (default: TRUE)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/guard_packages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Guard that required packages are available — guard_packages","text":"Logical indicating packages available (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/guard_packages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Guard that required packages are available — guard_packages","text":"","code":"# \\donttest{ # Check specific packages guard_packages(c(\"dplyr\", \"ggplot2\")) #> Error in guard_packages(c(\"dplyr\", \"ggplot2\")): Required packages not installed: ggplot2  # Auto-detect from function my_fn <- function(x) dplyr::filter(x, value > 0) guard_packages(.f = my_fn) #> Error in FUN(X[[i]], ...): attempt to use zero-length variable name # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/has_sink_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a sink format is registered — has_sink_format","title":"Check if a sink format is registered — has_sink_format","text":"Test whether format name registered.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/has_sink_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a sink format is registered — has_sink_format","text":"","code":"has_sink_format(name)"},{"path":"https://bbuchsbaum.github.io/parade/reference/has_sink_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a sink format is registered — has_sink_format","text":"name Character string naming format","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/has_sink_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a sink format is registered — has_sink_format","text":"Logical indicating format registered","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/has_sink_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a sink format is registered — has_sink_format","text":"","code":"has_sink_format(\"rds\")  # TRUE after package load #> [1] TRUE has_sink_format(\"xyz\")  # FALSE unless you register it #> [1] FALSE"},{"path":"https://bbuchsbaum.github.io/parade/reference/in_waves_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Submit jobs in waves with controlled parallelism — in_waves_of","title":"Submit jobs in waves with controlled parallelism — in_waves_of","text":"Wraps job submission functions submit jobs controlled batches, useful managing cluster load resource availability.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/in_waves_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Submit jobs in waves with controlled parallelism — in_waves_of","text":"","code":"in_waves_of(size, wait = TRUE, delay = 0)"},{"path":"https://bbuchsbaum.github.io/parade/reference/in_waves_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Submit jobs in waves with controlled parallelism — in_waves_of","text":"size Number jobs per wave wait Whether wait wave completion next wave delay Delay seconds waves (wait = FALSE)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/in_waves_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Submit jobs in waves with controlled parallelism — in_waves_of","text":"wave controller function","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/in_waves_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Submit jobs in waves with controlled parallelism — in_waves_of","text":"","code":"# \\donttest{ # Submit 100 jobs in waves of 10 jobs <- slurm_map(1:100, ~ .x^2,                    .options = in_waves_of(10)) #> Error in batchtools::makeRegistry(file.dir = reg_dir, make.default = FALSE,     conf.file = NA, cluster.functions = cf): unused argument (cluster.functions = cf)  # With delay between waves jobs <- slurm_map(1:100, ~ .x^2,                   .options = in_waves_of(10, wait = FALSE, delay = 60)) #> Error in batchtools::makeRegistry(file.dir = reg_dir, make.default = FALSE,     conf.file = NA, cluster.functions = cf): unused argument (cluster.functions = cf) # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/index-topic.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate job names from indices — index","title":"Generate job names from indices — index","text":"Creates naming function uses numeric indices job names.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/index-topic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate job names from indices — index","text":"","code":"index(prefix = \"job\", width = 0)"},{"path":"https://bbuchsbaum.github.io/parade/reference/index-topic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate job names from indices — index","text":"prefix Prefix job name width Minimum width numeric padding (0 padding)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/index-topic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate job names from indices — index","text":"function suitable use .name_by parameter","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/index-topic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate job names from indices — index","text":"","code":"# \\donttest{ data <- 1:10 jobs <- slurm_map(data, ~ .x^2, .name_by = index()) #> Error in batchtools::makeRegistry(file.dir = reg_dir, make.default = FALSE,     conf.file = NA, cluster.functions = cf): unused argument (cluster.functions = cf) # Job names will be: \"job-1\", \"job-2\", ..., \"job-10\"  jobs <- slurm_map(data, ~ .x^2, .name_by = index(\"task\", width = 3)) #> Error in batchtools::makeRegistry(file.dir = reg_dir, make.default = FALSE,     conf.file = NA, cluster.functions = cf): unused argument (cluster.functions = cf) # Job names will be: \"task-001\", \"task-002\", ..., \"task-010\" # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/int.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an integer type specification — int","title":"Create an integer type specification — int","text":"Create integer type specification","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an integer type specification — int","text":"","code":"int()"},{"path":"https://bbuchsbaum.github.io/parade/reference/int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an integer type specification — int","text":"integer vector prototype schema definitions","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/int.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an integer type specification — int","text":"","code":"schema(count = int()) #> # A tibble: 0 × 1 #> # ℹ 1 variable: count <int>"},{"path":"https://bbuchsbaum.github.io/parade/reference/is_done.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a job is done — is_done","title":"Check if a job is done — is_done","text":"Check job done","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/is_done.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a job is done — is_done","text":"","code":"is_done(x)"},{"path":"https://bbuchsbaum.github.io/parade/reference/is_flex_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if object is a flexible type specification — is_flex_type","title":"Check if object is a flexible type specification — is_flex_type","text":"Check object flexible type specification","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/is_flex_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if object is a flexible type specification — is_flex_type","text":"","code":"is_flex_type(x)"},{"path":"https://bbuchsbaum.github.io/parade/reference/is_flex_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if object is a flexible type specification — is_flex_type","text":"x Object check","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/is_flex_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if object is a flexible type specification — is_flex_type","text":"Logical indicating x flexible type spec","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/is_flow_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if object is a flow control policy — is_flow_control","title":"Check if object is a flow control policy — is_flow_control","text":"Check object flow control policy","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/is_flow_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if object is a flow control policy — is_flow_control","text":"","code":"is_flow_control(x)"},{"path":"https://bbuchsbaum.github.io/parade/reference/is_flow_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if object is a flow control policy — is_flow_control","text":"x Object check","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/is_flow_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if object is a flow control policy — is_flow_control","text":"Logical indicating x flow control policy","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/isa.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a class-based type specification — isa","title":"Create a class-based type specification — isa","text":"Validates object inherits specified class without requiring full prototype object.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/isa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a class-based type specification — isa","text":"","code":"isa(class)"},{"path":"https://bbuchsbaum.github.io/parade/reference/isa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a class-based type specification — isa","text":"class Character string naming required class(es)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/isa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a class-based type specification — isa","text":"parade_ptype_class object schema validation","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/isa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a class-based type specification — isa","text":"","code":"# Accept any lm model object schema(model = isa(\"lm\")) #> # A tibble: 0 × 1 #> # ℹ 1 variable: model <list<list>>  # Accept neuroimaging volumes schema(brain = isa(\"neuroim2::NeuroVol\")) #> # A tibble: 0 × 1 #> # ℹ 1 variable: brain <list<list>>"},{"path":"https://bbuchsbaum.github.io/parade/reference/job_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Get job status — job_status","title":"Get job status — job_status","text":"Get job status","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/job_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get job status — job_status","text":"","code":"job_status(x)"},{"path":"https://bbuchsbaum.github.io/parade/reference/jobs_top.html","id":null,"dir":"Reference","previous_headings":"","what":"Live dashboard for multiple SLURM jobs — jobs_top","title":"Live dashboard for multiple SLURM jobs — jobs_top","text":"Interactive text dashboard showing status, resource usage, logs multiple SLURM jobs simultaneously.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/jobs_top.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Live dashboard for multiple SLURM jobs — jobs_top","text":"","code":"jobs_top(jobs, refresh = 3, nlog = 20, clear = TRUE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/jobs_top.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Live dashboard for multiple SLURM jobs — jobs_top","text":"jobs List parade_script_job objects, data frame, registry paths refresh Refresh interval seconds nlog Number log lines show running job clear Whether clear screen updates","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/jobs_top.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Live dashboard for multiple SLURM jobs — jobs_top","text":"input jobs object (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/jobs_top.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Live dashboard for multiple SLURM jobs — jobs_top","text":"","code":"# \\donttest{ job1 <- submit_slurm(\"script1.R\") #> Error in submit_slurm(\"script1.R\"): Script not found: script1.R job2 <- submit_slurm(\"script2.R\") #> Error in submit_slurm(\"script2.R\"): Script not found: script2.R jobs_top(list(job1, job2)) #> Error: object 'job1' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/length.parade_jobset.html","id":null,"dir":"Reference","previous_headings":"","what":"Get length of jobset — length.parade_jobset","title":"Get length of jobset — length.parade_jobset","text":"Get length jobset","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/length.parade_jobset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get length of jobset — length.parade_jobset","text":"","code":"# S3 method for class 'parade_jobset' length(x)"},{"path":"https://bbuchsbaum.github.io/parade/reference/lgl.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a logical type specification — lgl","title":"Create a logical type specification — lgl","text":"Create logical type specification","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/lgl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a logical type specification — lgl","text":"","code":"lgl()"},{"path":"https://bbuchsbaum.github.io/parade/reference/lgl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a logical type specification — lgl","text":"logical vector prototype schema definitions","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/lgl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a logical type specification — lgl","text":"","code":"schema(is_valid = lgl()) #> # A tibble: 0 × 1 #> # ℹ 1 variable: is_valid <lgl>"},{"path":"https://bbuchsbaum.github.io/parade/reference/lhs_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Latin hypercube sample for parameter exploration — lhs_grid","title":"Create a Latin hypercube sample for parameter exploration — lhs_grid","text":"Generate Latin hypercube sample efficient parameter space exploration compared regular grids.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/lhs_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Latin hypercube sample for parameter exploration — lhs_grid","text":"","code":"lhs_grid(n, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/lhs_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Latin hypercube sample for parameter exploration — lhs_grid","text":"n Number samples ... Named arguments min/max ranges","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/lhs_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Latin hypercube sample for parameter exploration — lhs_grid","text":"Data frame sampled parameters","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/lhs_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Latin hypercube sample for parameter exploration — lhs_grid","text":"","code":"# \\donttest{ # Sample 20 points from parameter space samples <- lhs_grid(   n = 20,   alpha = c(0, 1),      # min, max   beta = c(0, 10),   gamma = c(-1, 1) ) # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/list_sink_formats.html","id":null,"dir":"Reference","previous_headings":"","what":"List registered sink formats — list_sink_formats","title":"List registered sink formats — list_sink_formats","text":"Returns names registered sink formats.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/list_sink_formats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List registered sink formats — list_sink_formats","text":"","code":"list_sink_formats()"},{"path":"https://bbuchsbaum.github.io/parade/reference/list_sink_formats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List registered sink formats — list_sink_formats","text":"Character vector format names","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/list_sink_formats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List registered sink formats — list_sink_formats","text":"","code":"list_sink_formats() #> [1] \"csv\"  \"json\" \"rds\"  \"tsv\""},{"path":"https://bbuchsbaum.github.io/parade/reference/lst.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a list type specification — lst","title":"Create a list type specification — lst","text":"Create list type specification","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/lst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a list type specification — lst","text":"","code":"lst(ptype = list())"},{"path":"https://bbuchsbaum.github.io/parade/reference/lst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a list type specification — lst","text":"ptype Prototype list elements","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/lst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a list type specification — lst","text":"list_of vector prototype schema definitions","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/lst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a list type specification — lst","text":"","code":"schema(items = lst()) #> # A tibble: 0 × 1 #> # ℹ 1 variable: items <list<list>>"},{"path":"https://bbuchsbaum.github.io/parade/reference/manifest.html","id":null,"dir":"Reference","previous_headings":"","what":"Create artifact manifest from sidecar files — manifest","title":"Create artifact manifest from sidecar files — manifest","text":"Scans directory tree JSON sidecar files combines manifest artifacts.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/manifest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create artifact manifest from sidecar files — manifest","text":"","code":"manifest(root)"},{"path":"https://bbuchsbaum.github.io/parade/reference/manifest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create artifact manifest from sidecar files — manifest","text":"root Root directory scan artifacts","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/manifest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create artifact manifest from sidecar files — manifest","text":"Tibble artifact metadata","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/manifest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create artifact manifest from sidecar files — manifest","text":"","code":"manifest_data <- manifest(\"artifacts://results\")"},{"path":"https://bbuchsbaum.github.io/parade/reference/max_in_flight.html","id":null,"dir":"Reference","previous_headings":"","what":"Limit maximum concurrent jobs — max_in_flight","title":"Limit maximum concurrent jobs — max_in_flight","text":"Controls maximum number jobs running simultaneously, queuing additional jobs slots become available.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/max_in_flight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Limit maximum concurrent jobs — max_in_flight","text":"","code":"max_in_flight(n, poll = 30)"},{"path":"https://bbuchsbaum.github.io/parade/reference/max_in_flight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Limit maximum concurrent jobs — max_in_flight","text":"n Maximum number concurrent jobs poll Polling interval seconds check job status","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/max_in_flight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Limit maximum concurrent jobs — max_in_flight","text":"concurrency controller function","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/max_in_flight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Limit maximum concurrent jobs — max_in_flight","text":"","code":"# \\donttest{ # Allow at most 5 jobs running simultaneously jobs <- slurm_map(1:100, ~ .x^2,                   .options = max_in_flight(5)) #> Error in batchtools::makeRegistry(file.dir = reg_dir, make.default = FALSE,     conf.file = NA, cluster.functions = cf): unused argument (cluster.functions = cf) # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/maybe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an optional type specification — maybe","title":"Create an optional type specification — maybe","text":"Allows field NULL match specified type.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/maybe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an optional type specification — maybe","text":"","code":"maybe(spec)"},{"path":"https://bbuchsbaum.github.io/parade/reference/maybe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an optional type specification — maybe","text":"spec type specification (isa, blob, etc.)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/maybe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an optional type specification — maybe","text":"parade_ptype_maybe object schema validation","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/maybe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an optional type specification — maybe","text":"","code":"# Optional model field schema(model = maybe(isa(\"lm\"))) #> # A tibble: 0 × 1 #> # ℹ 1 variable: model <list<list>>  # Optional neuroimaging mask schema(mask = maybe(neurovol())) #> # A tibble: 0 × 1 #> # ℹ 1 variable: mask <list<list>>"},{"path":"https://bbuchsbaum.github.io/parade/reference/maybe_neurovol.html","id":null,"dir":"Reference","previous_headings":"","what":"Optional neuroimaging volume — maybe_neurovol","title":"Optional neuroimaging volume — maybe_neurovol","text":"Convenience optional neuroimaging fields.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/maybe_neurovol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optional neuroimaging volume — maybe_neurovol","text":"","code":"maybe_neurovol(...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/maybe_neurovol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optional neuroimaging volume — maybe_neurovol","text":"... Arguments passed neurovol()","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/maybe_neurovol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optional neuroimaging volume — maybe_neurovol","text":"Optional neurovol type specification","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/maybe_neurovol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optional neuroimaging volume — maybe_neurovol","text":"","code":"schema(mask = maybe_neurovol()) #> # A tibble: 0 × 1 #> # ℹ 1 variable: mask <list<list>>"},{"path":"https://bbuchsbaum.github.io/parade/reference/mem.html","id":null,"dir":"Reference","previous_headings":"","what":"Set memory limit for a resource profile — mem","title":"Set memory limit for a resource profile — mem","text":"Set memory limit resource profile","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/mem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set memory limit for a resource profile — mem","text":"","code":"mem(profile, value)"},{"path":"https://bbuchsbaum.github.io/parade/reference/mem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set memory limit for a resource profile — mem","text":"profile resource profile object value Memory limit (e.g., \"16G\", \"32000M\")","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/mem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set memory limit for a resource profile — mem","text":"Updated profile object","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/reference/mirai_available.html","id":null,"dir":"Reference","previous_headings":"","what":"Check mirai availability — mirai_available","title":"Check mirai availability — mirai_available","text":"Test whether mirai future.mirai packages available properly configured.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/mirai_available.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check mirai availability — mirai_available","text":"","code":"mirai_available()"},{"path":"https://bbuchsbaum.github.io/parade/reference/mirai_available.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check mirai availability — mirai_available","text":"Logical indicating whether mirai available","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/mirai_available.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check mirai availability — mirai_available","text":"","code":"if (mirai_available()) {   message(\"Mirai is available\") } #> Mirai is available"},{"path":"https://bbuchsbaum.github.io/parade/reference/mirai_dispatcher_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Get mirai dispatcher status — mirai_dispatcher_status","title":"Get mirai dispatcher status — mirai_dispatcher_status","text":"Returns detailed status information mirai dispatcher, including queue depth task distribution.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/mirai_dispatcher_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get mirai dispatcher status — mirai_dispatcher_status","text":"","code":"mirai_dispatcher_status()"},{"path":"https://bbuchsbaum.github.io/parade/reference/mirai_dispatcher_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get mirai dispatcher status — mirai_dispatcher_status","text":"list dispatcher status, NULL dispatcher running","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/mirai_dispatcher_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get mirai dispatcher status — mirai_dispatcher_status","text":"","code":"# \\donttest{ # Check dispatcher status disp_status <- mirai_dispatcher_status() #> No dispatcher running if (!is.null(disp_status)) {   print(disp_status) } # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/mirai_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize mirai for parade — mirai_init","title":"Initialize mirai for parade — mirai_init","text":"One-step initialization mirai use parade workflows. Sets daemons configures future plan.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/mirai_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize mirai for parade — mirai_init","text":"","code":"mirai_init(n = NULL, dispatcher = TRUE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/mirai_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize mirai for parade — mirai_init","text":"n Number local daemons (defaults number cores) dispatcher Use dispatcher load balancing","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/mirai_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize mirai for parade — mirai_init","text":"Invisibly returns previous future plan","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/mirai_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize mirai for parade — mirai_init","text":"","code":"# \\donttest{ # Initialize with default settings mirai_init() #> Initialized mirai with 4 daemons  # Initialize with 4 daemons mirai_init(n = 4) #> Error in mirai::daemons(n = n, dispatcher = dispatcher): daemons already set for `default` compute profile # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/mirai_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale mirai daemons — mirai_scale","title":"Scale mirai daemons — mirai_scale","text":"Dynamically adjust number mirai daemons. Useful scaling compute resources based workload.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/mirai_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale mirai daemons — mirai_scale","text":"","code":"mirai_scale(n)"},{"path":"https://bbuchsbaum.github.io/parade/reference/mirai_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale mirai daemons — mirai_scale","text":"n New number daemons","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/mirai_scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale mirai daemons — mirai_scale","text":"Invisibly returns NULL","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/mirai_scale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale mirai daemons — mirai_scale","text":"","code":"# \\donttest{ # Scale to 8 daemons mirai_scale(8) #> Error in mirai::daemons(n = n, dispatcher = TRUE): daemons already set for `default` compute profile # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/mirai_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Get mirai daemon status — mirai_status","title":"Get mirai daemon status — mirai_status","text":"Returns current status mirai daemons, including number active daemons connection state.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/mirai_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get mirai daemon status — mirai_status","text":"","code":"mirai_status()"},{"path":"https://bbuchsbaum.github.io/parade/reference/mirai_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get mirai daemon status — mirai_status","text":"list daemon status information, NULL mirai installed","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/mirai_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get mirai daemon status — mirai_status","text":"","code":"# \\donttest{ # Check daemon status status <- mirai_status() if (!is.null(status)) {   print(status) } #> $connections #> [1] 4 #>  #> $daemons #> [1] \"abstract://beb71fc3f01f956c57571737\" #>  #> $mirai #>  awaiting executing completed  #>         0         0         0  #>  # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/mirai_stop.html","id":null,"dir":"Reference","previous_headings":"","what":"Stop all mirai daemons — mirai_stop","title":"Stop all mirai daemons — mirai_stop","text":"Convenience function cleanly shut mirai daemons.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/mirai_stop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stop all mirai daemons — mirai_stop","text":"","code":"mirai_stop()"},{"path":"https://bbuchsbaum.github.io/parade/reference/mirai_stop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stop all mirai daemons — mirai_stop","text":"Invisibly returns NULL","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/mirai_stop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stop all mirai daemons — mirai_stop","text":"","code":"# \\donttest{ # Stop all daemons mirai_stop() #> All mirai daemons stopped # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/name_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a custom naming function — name_by","title":"Create a custom naming function — name_by","text":"Helper create naming functions common patterns","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/name_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a custom naming function — name_by","text":"","code":"name_by(type = c(\"stem\", \"index\", \"digest\", \"auto\"), ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/name_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a custom naming function — name_by","text":"type Type naming: \"stem\", \"index\", \"digest\", \"custom\" ... Additional arguments passed naming function","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/name_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a custom naming function — name_by","text":"naming function","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/name_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a custom naming function — name_by","text":"","code":"# \\donttest{ # Equivalent to stem() jobs <- slurm_map(files, process_file, .name_by = name_by(\"stem\")) #> Error: object 'process_file' not found  # With arguments jobs <- slurm_map(data, process_data, .name_by = name_by(\"index\", prefix = \"task\")) #> Error: object 'process_data' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/name_digest.html","id":null,"dir":"Reference","previous_headings":"","what":"Alias for digest-based naming that avoids masking digest::digest — name_digest","title":"Alias for digest-based naming that avoids masking digest::digest — name_digest","text":"Creates naming function uses hash input unique job names.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/name_digest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alias for digest-based naming that avoids masking digest::digest — name_digest","text":"","code":"name_digest(prefix = \"job\", length = 8)"},{"path":"https://bbuchsbaum.github.io/parade/reference/name_digest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alias for digest-based naming that avoids masking digest::digest — name_digest","text":"prefix Prefix job name length Number characters hash use","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/name_digest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alias for digest-based naming that avoids masking digest::digest — name_digest","text":"naming function","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/neurovol.html","id":null,"dir":"Reference","previous_headings":"","what":"Neuroimaging volume type specification — neurovol","title":"Neuroimaging volume type specification — neurovol","text":"Convenience function neuroimaging workflows.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/neurovol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Neuroimaging volume type specification — neurovol","text":"","code":"neurovol(class = NULL, dims = NULL)"},{"path":"https://bbuchsbaum.github.io/parade/reference/neurovol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Neuroimaging volume type specification — neurovol","text":"class Specific NeuroVol class NULL dims Optional dimension predicate","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/neurovol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Neuroimaging volume type specification — neurovol","text":"Type specification neuroimaging volumes","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/neurovol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Neuroimaging volume type specification — neurovol","text":"","code":"# Accept any neuroimaging volume schema(brain = neurovol()) #> # A tibble: 0 × 1 #> # ℹ 1 variable: brain <list<list>>  # Accept specific volume type schema(mask = neurovol(class = \"LogicalNeuroVol\")) #> # A tibble: 0 × 1 #> # ℹ 1 variable: mask <list<list>>  # With dimension check (full validation only) schema(img = neurovol(dims = c(91, 109, 91))) #> # A tibble: 0 × 1 #> # ℹ 1 variable: img <list<list>>"},{"path":"https://bbuchsbaum.github.io/parade/reference/omit.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an omit sentinel for resource removal — omit","title":"Create an omit sentinel for resource removal — omit","text":"Returns special sentinel value signals resource parameter omitted SLURM submission. Used batch_resources() slurm_resources() explicitly drop flags.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/omit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an omit sentinel for resource removal — omit","text":"","code":"omit()"},{"path":"https://bbuchsbaum.github.io/parade/reference/omit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an omit sentinel for resource removal — omit","text":"parade_omit sentinel object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/omit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an omit sentinel for resource removal — omit","text":"","code":"# Omit memory flag from SLURM submission batch_resources(mem = omit(), time = \"2h\") #> $time #> [1] \"2:00:00\" #>   # NA also works for omitting batch_resources(mem = NA, time = \"2h\") #> $time #> [1] \"2:00:00\" #>"},{"path":"https://bbuchsbaum.github.io/parade/reference/on_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Define error handling policy for jobs — on_error","title":"Define error handling policy for jobs — on_error","text":"Create error handling policy defines handle job failures, including retry logic, failure thresholds, recovery strategies.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/on_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define error handling policy for jobs — on_error","text":"","code":"on_error(   action = c(\"stop\", \"continue\", \"retry\"),   max_retries = 3,   backoff = c(\"none\", \"linear\", \"exponential\"),   backoff_base = 60,   collect_errors = TRUE )"},{"path":"https://bbuchsbaum.github.io/parade/reference/on_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define error handling policy for jobs — on_error","text":"action Action take error: \"stop\", \"continue\", \"retry\" max_retries Maximum number retry attempts backoff Backoff strategy: \"none\", \"linear\", \"exponential\" backoff_base Base delay seconds backoff collect_errors Whether collect error messages","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/on_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define error handling policy for jobs — on_error","text":"Error policy object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/on_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define error handling policy for jobs — on_error","text":"","code":"# \\donttest{ # Retry failed jobs up to 3 times with exponential backoff policy <- on_error(   action = \"retry\",   max_retries = 3,   backoff = \"exponential\",   backoff_base = 60 )  # Continue on errors and collect them policy <- on_error(   action = \"continue\",   collect_errors = TRUE )  # Use with job submission jobs <- slurm_map(1:10, risky_function, .error_policy = policy) #> Error: object 'risky_function' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/on_error_retry.html","id":null,"dir":"Reference","previous_headings":"","what":"Shorthand for retry error policy — on_error_retry","title":"Shorthand for retry error policy — on_error_retry","text":"Quick helper create retry policy sensible defaults.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/on_error_retry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shorthand for retry error policy — on_error_retry","text":"","code":"on_error_retry(times = 3, delay = 60, backoff = \"linear\")"},{"path":"https://bbuchsbaum.github.io/parade/reference/on_error_retry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shorthand for retry error policy — on_error_retry","text":"times Number retry attempts (default 3) delay Base delay retries seconds backoff Backoff strategy","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/on_error_retry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shorthand for retry error policy — on_error_retry","text":"Error policy object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/on_error_retry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shorthand for retry error policy — on_error_retry","text":"","code":"# \\donttest{ # Retry 3 times with 1 minute delays policy <- on_error_retry()  # Retry 5 times with exponential backoff starting at 30 seconds policy <- on_error_retry(times = 5, delay = 30, backoff = \"exponential\") # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/one_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a union type specification — one_of","title":"Create a union type specification — one_of","text":"Accepts values match specified types.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/one_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a union type specification — one_of","text":"","code":"one_of(...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/one_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a union type specification — one_of","text":"... Type specifications accept","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/one_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a union type specification — one_of","text":"parade_ptype_union object schema validation","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/one_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a union type specification — one_of","text":"","code":"# Accept different model types schema(model = one_of(isa(\"lm\"), isa(\"glm\"), isa(\"nls\"))) #> # A tibble: 0 × 1 #> # ℹ 1 variable: model <list<list>>  # Accept different neuroimaging formats schema(img = one_of(isa(\"DenseNeuroVol\"), isa(\"SparseNeuroVol\"))) #> # A tibble: 0 × 1 #> # ℹ 1 variable: img <list<list>>"},{"path":"https://bbuchsbaum.github.io/parade/reference/open_logs.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Fallback log opener for list-like job objects — open_logs.default","title":"Fallback log opener for list-like job objects — open_logs.default","text":"Fallback log opener list-like job objects","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/open_logs.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fallback log opener for list-like job objects — open_logs.default","text":"","code":"# Default S3 method open_logs(job, which = c(\"both\", \"out\", \"err\"), viewer = utils::file.edit, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/open_logs.html","id":null,"dir":"Reference","previous_headings":"","what":"Open log files for a job — open_logs","title":"Open log files for a job — open_logs","text":"Quickly open job log files system editor viewer.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/open_logs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open log files for a job — open_logs","text":"","code":"open_logs(job, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/open_logs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open log files for a job — open_logs","text":"job parade job object log open: \"\", \"err\", \"\" viewer Function use viewing (default: file.edit)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/open_logs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open log files for a job — open_logs","text":"Invisible NULL","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/open_logs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open log files for a job — open_logs","text":"","code":"# \\donttest{ # Open output log open_logs(job, which = \"out\") #> Error: object 'job' not found  # Open both logs open_logs(job) #> Error: object 'job' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/open_logs.parade_jobset.html","id":null,"dir":"Reference","previous_headings":"","what":"Open log files for a jobset — open_logs.parade_jobset","title":"Open log files for a jobset — open_logs.parade_jobset","text":"Opens log files jobs jobset. Can open logs jobs, failed jobs , specific indices.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/open_logs.parade_jobset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open log files for a jobset — open_logs.parade_jobset","text":"","code":"# S3 method for class 'parade_jobset' open_logs(   job,   which = c(\"both\", \"out\", \"err\"),   viewer = utils::file.edit,   selection = \"failed\",   max_files = 10,   ... )"},{"path":"https://bbuchsbaum.github.io/parade/reference/open_logs.parade_jobset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open log files for a jobset — open_logs.parade_jobset","text":"job parade_jobset object logs open: \"\", \"\", \"err\" viewer Function use viewing (default: file.edit) selection jobs open logs : \"failed\", \"\", numeric indices max_files Maximum number log files open (default: 10) ... Additional arguments (unused)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/open_logs.parade_jobset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open log files for a jobset — open_logs.parade_jobset","text":"Invisible NULL","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/pack.html","id":null,"dir":"Reference","previous_headings":"","what":"Pack a schema into a structured type — pack","title":"Pack a schema into a structured type — pack","text":"Pack schema structured type","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/pack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pack a schema into a structured type — pack","text":"","code":"pack(.returns)"},{"path":"https://bbuchsbaum.github.io/parade/reference/pack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pack a schema into a structured type — pack","text":".returns schema specification returns()","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/pack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pack a schema into a structured type — pack","text":"parade_pack object nested data structures","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/pack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pack a schema into a structured type — pack","text":"","code":"nested_schema <- pack(returns(x = dbl(), y = chr()))"},{"path":"https://bbuchsbaum.github.io/parade/reference/parade.html","id":null,"dir":"Reference","previous_headings":"","what":"Declarative parallel dataflow with Future/Furrr and SLURM utilities — parade","title":"Declarative parallel dataflow with Future/Furrr and SLURM utilities — parade","text":"parade package provides declarative, lazy, compositional approach parallel dataflow R. Built top future/furrr ecosystem, offers typed schemas, artifact management, diagnostics, HPC-friendly distribution including seamless SLURM integration via future.batchtools.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Declarative parallel dataflow with Future/Furrr and SLURM utilities — parade","text":"Key features include: Typed dataflow pipelines dependency management Local SLURM distributed execution Artifact persistence automatic metadata Real-time job monitoring dashboards Configurable resource management profiles Comprehensive error handling diagnostics","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/reference/parade.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Declarative parallel dataflow with Future/Furrr and SLURM utilities — parade","text":"Maintainer: Parade Authors parade@example.org","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Locate the parade configuration file — parade_config_path","title":"Locate the parade configuration file — parade_config_path","text":"Finds appropriate location parade configuration file, checking environment variables standard locations.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locate the parade configuration file — parade_config_path","text":"","code":"parade_config_path(create_dirs = TRUE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locate the parade configuration file — parade_config_path","text":"create_dirs Whether create directories needed","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locate the parade configuration file — parade_config_path","text":"Path configuration file","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Locate the parade configuration file — parade_config_path","text":"","code":"config_path <- parade_config_path()"},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read parade configuration — parade_config_read","title":"Read parade configuration — parade_config_read","text":"Read parade configuration","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read parade configuration — parade_config_read","text":"","code":"parade_config_read(path = NULL)"},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read parade configuration — parade_config_read","text":"path Optional path config file (uses default NULL)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read parade configuration — parade_config_read","text":"List containing configuration settings","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read parade configuration — parade_config_read","text":"","code":"config <- parade_config_read()"},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Write parade configuration — parade_config_write","title":"Write parade configuration — parade_config_write","text":"Write parade configuration","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write parade configuration — parade_config_write","text":"","code":"parade_config_write(cfg, path = NULL)"},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write parade configuration — parade_config_write","text":"cfg Configuration list write path Optional path config file (uses default NULL)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_write.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write parade configuration — parade_config_write","text":"Path written config file (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_write.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write parade configuration — parade_config_write","text":"","code":"cfg <- list(slurm = list(defaults = list(time = \"1h\"))) parade_config_write(cfg)"},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Global parade options (get/set) — parade_options","title":"Global parade options (get/set) — parade_options","text":"Set per session control defaults collect() / submit().","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global parade options (get/set) — parade_options","text":"","code":"parade_options(   error = NULL,   scheduling = NULL,   seed_furrr = NULL,   progress = NULL )"},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global parade options (get/set) — parade_options","text":"error Default error policy: 'propagate', 'keep', 'omit', 'stop'. scheduling Furrr scheduling (0 < scheduling <= 1 integer chunk size). seed_furrr Set furrr's deterministic RNG (TRUE/FALSE). progress Default logical progress bars (progressr).","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global parade options (get/set) — parade_options","text":"named list current options (invisibly).","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_run_script_bt.html","id":null,"dir":"Reference","previous_headings":"","what":"Run script in batchtools context — parade_run_script_bt","title":"Run script in batchtools context — parade_run_script_bt","text":"Run script batchtools context","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_run_script_bt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run script in batchtools context — parade_run_script_bt","text":"","code":"parade_run_script_bt(i, script, args, env, lib_paths, rscript, wd)"},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_run_script_bt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run script in batchtools context — parade_run_script_bt","text":"Job index script Path R script args Command line arguments env Environment variables lib_paths Library paths prepend rscript Path Rscript executable wd Working directory","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_run_script_bt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run script in batchtools context — parade_run_script_bt","text":"List ok status exit code","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/param_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a parameter grid from lists of values — param_grid","title":"Create a parameter grid from lists of values — param_grid","text":"Alternative interface creating parameter grids list.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/param_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a parameter grid from lists of values — param_grid","text":"","code":"param_grid(...)  param_grid(...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/param_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a parameter grid from lists of values — param_grid","text":"... Named vectors lists cross params Named list parameter values filter Optional filter function add_metadata Whether add metadata columns","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/param_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a parameter grid from lists of values — param_grid","text":"Data frame one row per parameter combination tibble parameter combinations","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/param_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a parameter grid from lists of values — param_grid","text":"","code":"# \\donttest{ params_list <- list(   alpha = c(0.1, 0.5, 1.0),   beta = c(1, 2),   method = c(\"lm\", \"glm\") )  params <- param_grid(params_list) # }  grid <- param_grid(x = 1:3, method = c(\"A\", \"B\"))"},{"path":"https://bbuchsbaum.github.io/parade/reference/partition.html","id":null,"dir":"Reference","previous_headings":"","what":"Set partition for a resource profile — partition","title":"Set partition for a resource profile — partition","text":"Set partition resource profile","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/partition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set partition for a resource profile — partition","text":"","code":"partition(profile, value)"},{"path":"https://bbuchsbaum.github.io/parade/reference/partition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set partition for a resource profile — partition","text":"profile resource profile object value Partition name","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/partition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set partition for a resource profile — partition","text":"Updated profile object Note: use res_partition() avoid naming collisions user code.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/path.html","id":null,"dir":"Reference","previous_headings":"","what":"Path object with convenient accessors — path","title":"Path object with convenient accessors — path","text":"Create path object provides easy access common project directories macro expansion support.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Path object with convenient accessors — path","text":"","code":"path"},{"path":"https://bbuchsbaum.github.io/parade/reference/path.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Path object with convenient accessors — path","text":"object class parade_path (inherits list) length 10.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Path object with convenient accessors — path","text":"Path object methods","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Path object with convenient accessors — path","text":"","code":"# \\donttest{ # Get path object p <- path  # Access common directories p$artifacts()         # Artifacts directory #> [1] \"/tmp/Rtmpa5tjLG/parade-artifacts\" p$data()             # Data directory #> [1] \"/home/runner/work/parade/parade/docs/reference/data\" p$registry()         # Registry directory #> [1] \"/tmp/Rtmpa5tjLG/parade-registry\"  # With subdirectories p$artifacts(\"models\") #> [1] \"/tmp/Rtmpa5tjLG/parade-artifacts/models\" p$data(\"raw\", \"2024\") #> [1] \"/home/runner/work/parade/parade/docs/reference/data/raw/2024\"  # Expand macros p$expand(\"results/{date}/output_{run}.rds\") #> [1] \"results/20250831/output_20250831-144809.rds\" # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/path_here.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve a path using configured aliases — path_here","title":"Resolve a path using configured aliases — path_here","text":"Resolve path using configured aliases","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/path_here.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve a path using configured aliases — path_here","text":"","code":"path_here(alias, ..., create = TRUE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/path_here.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve a path using configured aliases — path_here","text":"alias Path alias (\"project\", \"data\", \"artifacts\", etc.) ... Additional path components append create Whether create directory exist","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/path_here.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resolve a path using configured aliases — path_here","text":"Resolved absolute path","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/path_here.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resolve a path using configured aliases — path_here","text":"","code":"path_here(\"data\", \"input\", \"file.csv\") #> [1] \"/home/runner/work/parade/parade/docs/reference/data/input/file.csv\" path_here(\"artifacts\", create = FALSE) #> character(0)"},{"path":"https://bbuchsbaum.github.io/parade/reference/path_patterns.html","id":null,"dir":"Reference","previous_headings":"","what":"Common path patterns — path_patterns","title":"Common path patterns — path_patterns","text":"Pre-defined path patterns common use cases.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/path_patterns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common path patterns — path_patterns","text":"","code":"path_patterns"},{"path":"https://bbuchsbaum.github.io/parade/reference/path_patterns.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Common path patterns — path_patterns","text":"object class list length 5.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/path_patterns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Common path patterns — path_patterns","text":"","code":"# \\donttest{ # Timestamped output path_patterns$timestamped(\"results\", \"analysis\", \"csv\") #> [1] \"results/20250831_144809_analysis.csv\" # -> \"results/20240115_143022_analysis.csv\"  # Experiment organization path_patterns$experiment(\"exp001\", \"model_v2\", 3) #> [1] \"experiments/exp001/model_v2/run_003\" # -> \"experiments/exp001/model_v2/run_003\"  # User-specific paths path_patterns$user_workspace(\"temp\", \"data.rds\") #> [1] \"workspace/runner/temp/data.rds\" # -> \"workspace/username/temp/data.rds\" # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/path_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a path template builder — path_template","title":"Create a path template builder — path_template","text":"Create function builds paths consistent patterns.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/path_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a path template builder — path_template","text":"","code":"path_template(pattern, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/path_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a path template builder — path_template","text":"pattern Path pattern macros ... Default values macros","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/path_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a path template builder — path_template","text":"Path builder function","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/path_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a path template builder — path_template","text":"","code":"# \\donttest{ # Create a results path builder results_path <- path_template(\"results/{experiment}/{date}/{name}_{index}.rds\")  # Use it with different parameters results_path(experiment = \"exp001\", name = \"analysis\", index = 1) #> [1] \"results/exp001/20250831/analysis_1.rds\" results_path(experiment = \"exp002\", name = \"model\", index = 5) #> [1] \"results/exp002/20250831/model_5.rds\" # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/paths_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get current parade path configuration — paths_get","title":"Get current parade path configuration — paths_get","text":"Get current parade path configuration","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/paths_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get current parade path configuration — paths_get","text":"","code":"paths_get()"},{"path":"https://bbuchsbaum.github.io/parade/reference/paths_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get current parade path configuration — paths_get","text":"Named list configured paths","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/paths_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get current parade path configuration — paths_get","text":"","code":"paths <- paths_get() paths$data #> [1] \"/home/runner/work/parade/parade/docs/reference/data\""},{"path":"https://bbuchsbaum.github.io/parade/reference/paths_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize parade path configuration — paths_init","title":"Initialize parade path configuration — paths_init","text":"Sets standard directory paths parade projects, automatically detecting HPC environments configuring appropriate scratch data directories.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/paths_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize parade path configuration — paths_init","text":"","code":"paths_init(profile = c(\"auto\", \"local\", \"hpc\"), quiet = FALSE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/paths_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize parade path configuration — paths_init","text":"profile Path profile: \"auto\" (default), \"local\", \"hpc\" quiet Whether suppress initialization messages","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/paths_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize parade path configuration — paths_init","text":"Named list configured paths (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/paths_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize parade path configuration — paths_init","text":"","code":"paths_init(profile = \"local\") #> parade paths: project=/home/runner/work/parade/parade/docs/reference; scratch=/tmp/Rtmpa5tjLG; data=/home/runner/work/parade/parade/docs/reference/data; artifacts=/tmp/Rtmpa5tjLG/parade-artifacts; registry=/tmp/Rtmpa5tjLG/parade-registry; config=/home/runner/work/parade/parade/docs/reference/.parade; cache=/home/runner/.cache/R/parade paths_init(quiet = TRUE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/paths_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set specific parade paths — paths_set","title":"Set specific parade paths — paths_set","text":"Set specific parade paths","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/paths_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set specific parade paths — paths_set","text":"","code":"paths_set(...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/paths_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set specific parade paths — paths_set","text":"... Named path specifications update","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/paths_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set specific parade paths — paths_set","text":"Updated paths list (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/paths_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set specific parade paths — paths_set","text":"","code":"paths_set(data = \"/custom/data\", artifacts = \"/tmp/artifacts\")"},{"path":"https://bbuchsbaum.github.io/parade/reference/pending.html","id":null,"dir":"Reference","previous_headings":"","what":"Select pending jobs — pending","title":"Select pending jobs — pending","text":"Select pending jobs","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/pending.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select pending jobs — pending","text":"","code":"pending(x)"},{"path":"https://bbuchsbaum.github.io/parade/reference/pipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a parade pipeline (alias for flow) — pipeline","title":"Create a parade pipeline (alias for flow) — pipeline","text":"Create parade pipeline (alias flow)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/pipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a parade pipeline (alias for flow) — pipeline","text":"","code":"pipeline(grid, seed_col = NULL, error = c(\"propagate\", \"keep\", \"omit\", \"stop\"))"},{"path":"https://bbuchsbaum.github.io/parade/reference/pipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a parade pipeline (alias for flow) — pipeline","text":"grid data frame tibble containing parameter combinations seed_col Optional column name reproducible random seeds error Error handling policy: \"propagate\", \"keep\", \"omit\", \"stop\"","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/pipeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a parade pipeline (alias for flow) — pipeline","text":"parade_flow object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/pipeline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a parade pipeline (alias for flow) — pipeline","text":"","code":"grid <- data.frame(a = 1:2) pl <- pipeline(grid)"},{"path":"https://bbuchsbaum.github.io/parade/reference/pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a predicate-based type specification — pred","title":"Create a predicate-based type specification — pred","text":"Validates using custom function performance hints.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a predicate-based type specification — pred","text":"","code":"pred(fn, cost = c(\"light\", \"full\"))"},{"path":"https://bbuchsbaum.github.io/parade/reference/pred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a predicate-based type specification — pred","text":"fn Function formula returns TRUE valid values cost Performance cost: \"light\" (default) \"full\"","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a predicate-based type specification — pred","text":"parade_ptype_pred object schema validation","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/pred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a predicate-based type specification — pred","text":"","code":"# Light check - always runs schema(data = pred(~ length(.) > 0, cost = \"light\")) #> # A tibble: 0 × 1 #> # ℹ 1 variable: data <list<list>>  # Heavy check - only runs in full validation mode schema(img = pred(~ validate_dimensions(.), cost = \"full\")) #> # A tibble: 0 × 1 #> # ℹ 1 variable: img <list<list>>"},{"path":"https://bbuchsbaum.github.io/parade/reference/preflight.html","id":null,"dir":"Reference","previous_headings":"","what":"Preflight checks for a flow — preflight","title":"Preflight checks for a flow — preflight","text":"Preflight checks flow","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/preflight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preflight checks for a flow — preflight","text":"","code":"preflight(fl)"},{"path":"https://bbuchsbaum.github.io/parade/reference/preflight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preflight checks for a flow — preflight","text":"fl flow().","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_error_policy.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for error policies — print.parade_error_policy","title":"Print method for error policies — print.parade_error_policy","text":"Print method error policies","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_error_policy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for error policies — print.parade_error_policy","text":"","code":"# S3 method for class 'parade_error_policy' print(x, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_error_policy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for error policies — print.parade_error_policy","text":"x Error policy object ... Additional arguments (unused)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_error_policy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for error policies — print.parade_error_policy","text":"Invisible x","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for parade flows — print.parade_flow","title":"Print method for parade flows — print.parade_flow","text":"Print method parade flows","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_flow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for parade flows — print.parade_flow","text":"","code":"# S3 method for class 'parade_flow' print(x, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_flow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for parade flows — print.parade_flow","text":"x parade_flow object ... Additional arguments (ignored)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_flow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for parade flows — print.parade_flow","text":"input object (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_flow_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for flow control policies — print.parade_flow_control","title":"Print method for flow control policies — print.parade_flow_control","text":"Print method flow control policies","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_flow_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for flow control policies — print.parade_flow_control","text":"","code":"# S3 method for class 'parade_flow_control' print(x, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_flow_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for flow control policies — print.parade_flow_control","text":"x Flow control policy ... Additional arguments (unused)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_flow_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for flow control policies — print.parade_flow_control","text":"Invisible x","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_job.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for parade job objects — print.parade_job","title":"Print method for parade job objects — print.parade_job","text":"Common interface printing parade job types (script, function, local)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_job.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for parade job objects — print.parade_job","text":"","code":"# S3 method for class 'parade_job' print(x, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_job.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for parade job objects — print.parade_job","text":"x parade_job object ... Additional arguments (unused)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_job.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for parade job objects — print.parade_job","text":"Invisibly returns job object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_jobset.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for parade_jobset — print.parade_jobset","title":"Print method for parade_jobset — print.parade_jobset","text":"Print method parade_jobset","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_jobset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for parade_jobset — print.parade_jobset","text":"","code":"# S3 method for class 'parade_jobset' print(x, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_local_job.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for local jobs — print.parade_local_job","title":"Print method for local jobs — print.parade_local_job","text":"Print method local jobs","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_local_job.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for local jobs — print.parade_local_job","text":"","code":"# S3 method for class 'parade_local_job' print(x, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_local_job.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for local jobs — print.parade_local_job","text":"x parade_local_job object ... Additional arguments (unused)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_local_job.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for local jobs — print.parade_local_job","text":"Invisibly returns job object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for path object — print.parade_path","title":"Print method for path object — print.parade_path","text":"Print method path object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for path object — print.parade_path","text":"","code":"# S3 method for class 'parade_path' print(x, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for path object — print.parade_path","text":"x Path object ... Additional arguments (unused)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for path object — print.parade_path","text":"Invisible x","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for resource profiles — print.parade_profile","title":"Print method for resource profiles — print.parade_profile","text":"Print method resource profiles","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for resource profiles — print.parade_profile","text":"","code":"# S3 method for class 'parade_profile' print(x, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for resource profiles — print.parade_profile","text":"x resource profile object ... Additional arguments (unused)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for resource profiles — print.parade_profile","text":"Invisible x","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_script_job.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for parade script jobs — print.parade_script_job","title":"Print method for parade script jobs — print.parade_script_job","text":"Print method parade script jobs","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_script_job.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for parade script jobs — print.parade_script_job","text":"","code":"# S3 method for class 'parade_script_job' print(x, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_script_job.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for parade script jobs — print.parade_script_job","text":"x parade_script_job object ... Additional arguments (ignored)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_script_job.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for parade script jobs — print.parade_script_job","text":"input object (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.param_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for parameter grids — print.param_grid","title":"Print method for parameter grids — print.param_grid","text":"Print method parameter grids","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.param_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for parameter grids — print.param_grid","text":"","code":"# S3 method for class 'param_grid' print(x, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/print.param_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for parameter grids — print.param_grid","text":"x Parameter grid ... Additional arguments passed print","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.param_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for parameter grids — print.param_grid","text":"Invisible x","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a resource profile for SLURM jobs — profile","title":"Create a resource profile for SLURM jobs — profile","text":"Create fluent interface building SLURM resource specifications. Resource profiles can chained modifier functions build complex resource requirements readable way.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a resource profile for SLURM jobs — profile","text":"","code":"profile(name = NULL, base = NULL)"},{"path":"https://bbuchsbaum.github.io/parade/reference/profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a resource profile for SLURM jobs — profile","text":"name Optional name profile (registry) base Base profile inherit (name profile object)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a resource profile for SLURM jobs — profile","text":"resource profile object chaining methods","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/profile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a resource profile for SLURM jobs — profile","text":"","code":"# \\donttest{ # Basic profile with chaining resources <- profile() %>%   time(\"4:00:00\") %>%   mem(\"16G\") %>%   cpus(8)    # Named profile for reuse gpu_profile <- profile(\"gpu_analysis\") %>%   time(\"12:00:00\") %>%   mem(\"64G\") %>%   cpus(16) %>%   gpus(2)    # Inherit from existing profile extended <- profile(base = gpu_profile) %>%   time(\"24:00:00\")  # Override time only # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/profile_clear.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear all registered profiles — profile_clear","title":"Clear all registered profiles — profile_clear","text":"Clear registered profiles","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/profile_clear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear all registered profiles — profile_clear","text":"","code":"profile_clear()"},{"path":"https://bbuchsbaum.github.io/parade/reference/profile_clear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear all registered profiles — profile_clear","text":"Invisible NULL","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/profile_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a registered resource profile — profile_get","title":"Get a registered resource profile — profile_get","text":"Get registered resource profile","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/profile_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a registered resource profile — profile_get","text":"","code":"profile_get(name)"},{"path":"https://bbuchsbaum.github.io/parade/reference/profile_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a registered resource profile — profile_get","text":"name Name profile","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/profile_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a registered resource profile — profile_get","text":"Resource profile object, NULL found","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/profile_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a registered resource profile — profile_get","text":"","code":"# \\donttest{ # Get a registered profile gpu_profile <- profile_get(\"gpu\")  # Use as base for new profile extended <- profile(base = gpu_profile) %>%   time(\"24:00:00\") # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/profile_init_defaults.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize default resource profiles — profile_init_defaults","title":"Initialize default resource profiles — profile_init_defaults","text":"Set commonly used resource profiles. function called automatically package loaded can called manually reset profiles.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/profile_init_defaults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize default resource profiles — profile_init_defaults","text":"","code":"profile_init_defaults(overwrite = FALSE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/profile_init_defaults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize default resource profiles — profile_init_defaults","text":"overwrite Whether overwrite existing profiles","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/profile_init_defaults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize default resource profiles — profile_init_defaults","text":"Invisible NULL","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/profile_init_defaults.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize default resource profiles — profile_init_defaults","text":"","code":"# \\donttest{ # Reset to default profiles profile_init_defaults(overwrite = TRUE) # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/profile_list.html","id":null,"dir":"Reference","previous_headings":"","what":"List all registered resource profiles — profile_list","title":"List all registered resource profiles — profile_list","text":"List registered resource profiles","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/profile_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all registered resource profiles — profile_list","text":"","code":"profile_list(details = FALSE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/profile_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all registered resource profiles — profile_list","text":"details TRUE, show profile details","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/profile_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all registered resource profiles — profile_list","text":"Character vector profile names, data frame details = TRUE","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/profile_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all registered resource profiles — profile_list","text":"","code":"# \\donttest{ # List profile names profile_list() #> [1] \"gpu\"      \"highmem\"  \"long\"     \"standard\" \"test\"      # Show details profile_list(details = TRUE) #>       name       time memory cpus gpus #> 1      gpu   12:00:00    32G    8    1 #> 2  highmem    8:00:00    64G    8   NA #> 3     long 2-00:00:00    16G    4   NA #> 4 standard    4:00:00     8G    4   NA #> 5     test    0:30:00     4G    2   NA # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/profile_register.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a named resource profile — profile_register","title":"Register a named resource profile — profile_register","text":"Store resource profile registry reuse across jobs. Profiles can retrieved name used base profiles referenced string shorthand.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/profile_register.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a named resource profile — profile_register","text":"","code":"profile_register(name, profile, overwrite = FALSE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/profile_register.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a named resource profile — profile_register","text":"name Name profile profile Resource profile object list overwrite Whether overwrite existing profile","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/profile_register.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register a named resource profile — profile_register","text":"Invisible NULL","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/profile_register.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register a named resource profile — profile_register","text":"","code":"# \\donttest{ # Register a standard compute profile profile_register(\"standard\",   profile() %>%     time(\"4:00:00\") %>%     mem(\"8G\") %>%     cpus(4) ) #> Error in profile_register(\"standard\", profile() %>% time(\"4:00:00\") %>%     mem(\"8G\") %>% cpus(4)): Profile 'standard' already exists. Use overwrite = TRUE to replace.  # Register a GPU profile profile_register(\"gpu\",   profile() %>%     time(\"12:00:00\") %>%     mem(\"32G\") %>%     cpus(8) %>%     gpus(1) ) #> Error in profile_register(\"gpu\", profile() %>% time(\"12:00:00\") %>% mem(\"32G\") %>%     cpus(8) %>% gpus(1)): Profile 'gpu' already exists. Use overwrite = TRUE to replace.  # Use registered profiles job <- slurm_call(my_function, x = 1, resources = \"gpu\") #> Error: object 'my_function' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/profile_remove.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a registered resource profile — profile_remove","title":"Remove a registered resource profile — profile_remove","text":"Remove registered resource profile","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/profile_remove.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a registered resource profile — profile_remove","text":"","code":"profile_remove(name)"},{"path":"https://bbuchsbaum.github.io/parade/reference/profile_remove.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a registered resource profile — profile_remove","text":"name Name profile remove","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/profile_remove.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove a registered resource profile — profile_remove","text":"Invisible TRUE removed, FALSE found","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Show progress for jobset completion — progress","title":"Show progress for jobset completion — progress","text":"Displays progress bar showing job completion status. convenience wrapper around await() progress enabled.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show progress for jobset completion — progress","text":"","code":"progress(x, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show progress for jobset completion — progress","text":"x parade_jobset object ... Additional arguments passed await() timeout Maximum time wait seconds (default: Inf) poll Polling interval seconds (default: 10)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/progress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show progress for jobset completion — progress","text":"jobset (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/progress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show progress for jobset completion — progress","text":"","code":"# \\donttest{ # Note: This example requires a SLURM cluster environment jobs <- slurm_map(1:10, function(x) Sys.sleep(x)) #> Error in batchtools::makeRegistry(file.dir = reg_dir, make.default = FALSE,     conf.file = NA, cluster.functions = cf): unused argument (cluster.functions = cf) progress(jobs)  # Shows progress bar #> Error: object 'jobs' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/register_sink_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a sink format — register_sink_format","title":"Register a sink format — register_sink_format","text":"Register format writer/reader pair use sinks. Formats can referenced name sink_spec(), sink_quick(), sink functions.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/register_sink_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a sink format — register_sink_format","text":"","code":"register_sink_format(name, writer, reader, ext = NULL, atomic = TRUE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/register_sink_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a sink format — register_sink_format","text":"name Character string naming format (e.g., \"rds\", \"csv\", \"parquet\") writer Function write data: function(x, path, ...) returning path(s) reader Function read data: function(path, ...) returning object ext Default file extension including dot (e.g., \".rds\", \".csv\") atomic Whether writes atomic (temp rename)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/register_sink_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register a sink format — register_sink_format","text":"Invisibly returns format name","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/register_sink_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register a sink format — register_sink_format","text":"","code":"# Register a custom format register_sink_format(\"qs\",   writer = function(x, path, ...) qs::qsave(x, path, ...),   reader = function(path, ...) qs::qread(path, ...),   ext = \".qs\" )  # Use in sink sink_quick(\"data\", write = \"qs\") #> $fields #> [1] \"data\" #>  #> $dir #> [1] \"artifacts://_quick\" #>  #> $template #> [1] \"{.stage}/{.field}/{.row_key}\" #>  #> $format #> [1] \"qs\" #>  #> $writer #> function (x, path, ...)  #> qs::qsave(x, path, ...) #> <environment: 0x5570c7cba210> #>  #> $reader #> function (path, ...)  #> qs::qread(path, ...) #> <environment: 0x5570c7cba210> #>  #> $overwrite #> [1] \"skip\" #>  #> $checksum #> [1] TRUE #>  #> $sidecar #> [1] \"json\" #>  #> $autoload #> [1] FALSE #>  #> $ext #> [1] \".qs\" #>  #> $build_path_fn #> function (spec, row, stage_name, field)  #> { #>     base_dir <- if (is.function(dir)) { #>         resolve_path(dir(row = row, stage = stage_name, field = field)) #>     } #>     else { #>         resolve_path(dir) #>     } #>     template_data <- row #>     template_data$.stage <- stage_name #>     template_data$.field <- field #>     template_data$.row_key <- .row_key(row) #>     rel_path <- as.character(glue::glue_data(template_data, template)) #>     if (!grepl(\"\\\\.[A-Za-z0-9]+$\", rel_path) && nzchar(ext)) { #>         rel_path <- paste0(rel_path, ext) #>     } #>     file.path(base_dir, rel_path) #> } #> <bytecode: 0x5570c7c182a8> #> <environment: 0x5570c7c16890> #>  #> $compress #> NULL #>  #> attr(,\"class\") #> [1] \"parade_sink\""},{"path":"https://bbuchsbaum.github.io/parade/reference/registry_clean.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean up old jobs from registry — registry_clean","title":"Clean up old jobs from registry — registry_clean","text":"Remove completed failed jobs registry save space.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/registry_clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean up old jobs from registry — registry_clean","text":"","code":"registry_clean(   registry = NULL,   older_than = NULL,   status = NULL,   dry_run = FALSE )"},{"path":"https://bbuchsbaum.github.io/parade/reference/registry_clean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean up old jobs from registry — registry_clean","text":"registry Path registry older_than Remove jobs older (days) status Remove jobs status (e.g., \"COMPLETED\", \"FAILED\") dry_run TRUE, show removed without removing","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/registry_clean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean up old jobs from registry — registry_clean","text":"Number jobs removed","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/registry_clean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean up old jobs from registry — registry_clean","text":"","code":"# \\donttest{ # Remove completed jobs older than 7 days registry_clean(older_than = 7, status = \"COMPLETED\") #> No jobs match cleanup criteria #> [1] 0  # Dry run to see what would be removed registry_clean(older_than = 30, dry_run = TRUE) #> No jobs match cleanup criteria #> [1] 0 # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/registry_ls.html","id":null,"dir":"Reference","previous_headings":"","what":"List jobs in registry — registry_ls","title":"List jobs in registry — registry_ls","text":"Show jobs stored registry status metadata.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/registry_ls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List jobs in registry — registry_ls","text":"","code":"registry_ls(registry = NULL, pattern = NULL, limit = NULL)"},{"path":"https://bbuchsbaum.github.io/parade/reference/registry_ls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List jobs in registry — registry_ls","text":"registry Path registry (default: use paths_get(\"registry\")) pattern Optional pattern filter job names limit Maximum number jobs show","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/registry_ls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List jobs in registry — registry_ls","text":"Data frame jobs","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/registry_ls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List jobs in registry — registry_ls","text":"","code":"# \\donttest{ # List all jobs registry_ls() #>               name      status             created #> 9  script-d0bc71b5 NO_JOB_FILE 2025-08-31 14:48:13 #> 10      slurm-call NO_JOB_FILE 2025-08-31 14:48:13 #> 1  script-079f48a1 NO_JOB_FILE 2025-08-31 14:48:05 #> 4  script-87c34615 NO_JOB_FILE 2025-08-31 14:48:03 #> 7  script-b619ac1d NO_JOB_FILE 2025-08-31 14:48:03 #> 5  script-946d993b NO_JOB_FILE 2025-08-31 14:48:02 #> 3  script-7f2de95f NO_JOB_FILE 2025-08-31 14:48:02 #> 2  script-18ce282d NO_JOB_FILE 2025-08-31 14:48:01 #> 8  script-c63e345e NO_JOB_FILE 2025-08-31 14:47:52 #> 6  script-af654de6 NO_JOB_FILE 2025-08-31 14:47:51 #>                                               path #> 9  /tmp/Rtmpa5tjLG/parade-registry/script-d0bc71b5 #> 10      /tmp/Rtmpa5tjLG/parade-registry/slurm-call #> 1  /tmp/Rtmpa5tjLG/parade-registry/script-079f48a1 #> 4  /tmp/Rtmpa5tjLG/parade-registry/script-87c34615 #> 7  /tmp/Rtmpa5tjLG/parade-registry/script-b619ac1d #> 5  /tmp/Rtmpa5tjLG/parade-registry/script-946d993b #> 3  /tmp/Rtmpa5tjLG/parade-registry/script-7f2de95f #> 2  /tmp/Rtmpa5tjLG/parade-registry/script-18ce282d #> 8  /tmp/Rtmpa5tjLG/parade-registry/script-c63e345e #> 6  /tmp/Rtmpa5tjLG/parade-registry/script-af654de6  # List jobs matching pattern registry_ls(pattern = \"analysis_*\") #> No jobs found in registry #> [1] name    status  created #> <0 rows> (or 0-length row.names)  # List most recent 10 jobs registry_ls(limit = 10) #>               name      status             created #> 9  script-d0bc71b5 NO_JOB_FILE 2025-08-31 14:48:13 #> 10      slurm-call NO_JOB_FILE 2025-08-31 14:48:13 #> 1  script-079f48a1 NO_JOB_FILE 2025-08-31 14:48:05 #> 4  script-87c34615 NO_JOB_FILE 2025-08-31 14:48:03 #> 7  script-b619ac1d NO_JOB_FILE 2025-08-31 14:48:03 #> 5  script-946d993b NO_JOB_FILE 2025-08-31 14:48:02 #> 3  script-7f2de95f NO_JOB_FILE 2025-08-31 14:48:02 #> 2  script-18ce282d NO_JOB_FILE 2025-08-31 14:48:01 #> 8  script-c63e345e NO_JOB_FILE 2025-08-31 14:47:52 #> 6  script-af654de6 NO_JOB_FILE 2025-08-31 14:47:51 #>                                               path #> 9  /tmp/Rtmpa5tjLG/parade-registry/script-d0bc71b5 #> 10      /tmp/Rtmpa5tjLG/parade-registry/slurm-call #> 1  /tmp/Rtmpa5tjLG/parade-registry/script-079f48a1 #> 4  /tmp/Rtmpa5tjLG/parade-registry/script-87c34615 #> 7  /tmp/Rtmpa5tjLG/parade-registry/script-b619ac1d #> 5  /tmp/Rtmpa5tjLG/parade-registry/script-946d993b #> 3  /tmp/Rtmpa5tjLG/parade-registry/script-7f2de95f #> 2  /tmp/Rtmpa5tjLG/parade-registry/script-18ce282d #> 8  /tmp/Rtmpa5tjLG/parade-registry/script-c63e345e #> 6  /tmp/Rtmpa5tjLG/parade-registry/script-af654de6 # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/res_account.html","id":null,"dir":"Reference","previous_headings":"","what":"Alias for account() — res_account","title":"Alias for account() — res_account","text":"Alias account()","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/res_account.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alias for account() — res_account","text":"","code":"res_account(profile, value)"},{"path":"https://bbuchsbaum.github.io/parade/reference/res_account.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alias for account() — res_account","text":"profile resource profile object value Account name","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/res_account.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alias for account() — res_account","text":"Updated profile","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/res_cpus.html","id":null,"dir":"Reference","previous_headings":"","what":"Alias for cpus() — res_cpus","title":"Alias for cpus() — res_cpus","text":"Alias cpus()","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/res_cpus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alias for cpus() — res_cpus","text":"","code":"res_cpus(profile, value)"},{"path":"https://bbuchsbaum.github.io/parade/reference/res_cpus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alias for cpus() — res_cpus","text":"profile resource profile object value Number CPUs","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/res_cpus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alias for cpus() — res_cpus","text":"Updated profile","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/res_mem.html","id":null,"dir":"Reference","previous_headings":"","what":"Alias for mem() — res_mem","title":"Alias for mem() — res_mem","text":"Alias mem()","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/res_mem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alias for mem() — res_mem","text":"","code":"res_mem(profile, value)"},{"path":"https://bbuchsbaum.github.io/parade/reference/res_mem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alias for mem() — res_mem","text":"profile resource profile object value Memory limit (e.g., \"16G\", \"32000M\")","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/res_mem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alias for mem() — res_mem","text":"Updated profile","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/res_partition.html","id":null,"dir":"Reference","previous_headings":"","what":"Alias for partition() — res_partition","title":"Alias for partition() — res_partition","text":"Alias partition()","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/res_partition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alias for partition() — res_partition","text":"","code":"res_partition(profile, value)"},{"path":"https://bbuchsbaum.github.io/parade/reference/res_partition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alias for partition() — res_partition","text":"profile resource profile object value Partition name","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/res_partition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alias for partition() — res_partition","text":"Updated profile","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/res_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Alias for time() that avoids masking stats::time — res_time","title":"Alias for time() that avoids masking stats::time — res_time","text":"Alias time() avoids masking stats::time","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/res_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alias for time() that avoids masking stats::time — res_time","text":"","code":"res_time(profile, value)"},{"path":"https://bbuchsbaum.github.io/parade/reference/res_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alias for time() that avoids masking stats::time — res_time","text":"profile resource profile object value Time limit (e.g., \"4:00:00\", \"2-00:00:00\")","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/res_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alias for time() that avoids masking stats::time — res_time","text":"Updated profile","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/resolve_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve paths with URI-style aliases — resolve_path","title":"Resolve paths with URI-style aliases — resolve_path","text":"Resolves path strings may contain URI-style aliases like \"data://input/file.csv\" \"artifacts://results\".","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/resolve_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve paths with URI-style aliases — resolve_path","text":"","code":"resolve_path(x, create = TRUE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/resolve_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve paths with URI-style aliases — resolve_path","text":"x Path string potentially containing aliases create Whether create directories needed","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/resolve_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resolve paths with URI-style aliases — resolve_path","text":"Resolved absolute path","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/resolve_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resolve paths with URI-style aliases — resolve_path","text":"","code":"resolve_path(\"data://processed/output.rds\") #> [1] \"/custom/data/processed/output.rds\" resolve_path(\"/absolute/path\") #> [1] \"/absolute/path\""},{"path":"https://bbuchsbaum.github.io/parade/reference/resolve_resources.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve resource specification from various inputs — resolve_resources","title":"Resolve resource specification from various inputs — resolve_resources","text":"Internal function resolve resources profile names, profile objects, resource lists. Handles string shortcuts like \"gpu\", \"highmem\", etc.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/resolve_resources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve resource specification from various inputs — resolve_resources","text":"","code":"resolve_resources(resources = NULL)"},{"path":"https://bbuchsbaum.github.io/parade/reference/resolve_resources.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve resource specification from various inputs — resolve_resources","text":"resources Resource specification (string, profile, list)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/resolve_resources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resolve resource specification from various inputs — resolve_resources","text":"List resources slurm_resources()","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/resubmit_job.html","id":null,"dir":"Reference","previous_headings":"","what":"Resubmit a failed job — resubmit_job","title":"Resubmit a failed job — resubmit_job","text":"Resubmit failed job","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/resubmit_job.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resubmit a failed job — resubmit_job","text":"","code":"resubmit_job(job)"},{"path":"https://bbuchsbaum.github.io/parade/reference/resubmit_job.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resubmit a failed job — resubmit_job","text":"job Job object resubmit","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/resubmit_job.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resubmit a failed job — resubmit_job","text":"New job object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/retry.html","id":null,"dir":"Reference","previous_headings":"","what":"Retry failed jobs in a jobset — retry","title":"Retry failed jobs in a jobset — retry","text":"Retry jobs failed, respecting error policy settings.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/retry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retry failed jobs in a jobset — retry","text":"","code":"retry(jobs, policy = NULL, which = \"failed\")"},{"path":"https://bbuchsbaum.github.io/parade/reference/retry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retry failed jobs in a jobset — retry","text":"jobs parade_jobset object policy Error policy use (use jobset's policy) jobs retry: \"failed\", \"\", job indices","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/retry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retry failed jobs in a jobset — retry","text":"Updated jobset retried jobs","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/retry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retry failed jobs in a jobset — retry","text":"","code":"# \\donttest{ # Retry all failed jobs jobs <- retry(jobs) #> Error: object 'jobs' not found  # Retry specific jobs jobs <- retry(jobs, which = c(3, 5, 7)) #> Error: object 'jobs' not found  # Retry with custom policy jobs <- retry(jobs, policy = on_error_retry(times = 5)) #> Error: object 'jobs' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/returns.html","id":null,"dir":"Reference","previous_headings":"","what":"Define expected return schema for a stage function — returns","title":"Define expected return schema for a stage function — returns","text":"Creates typed schema specification defines expected structure types data returned stage function.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/returns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define expected return schema for a stage function — returns","text":"","code":"returns(..., .contract = NULL)"},{"path":"https://bbuchsbaum.github.io/parade/reference/returns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define expected return schema for a stage function — returns","text":"... Named type specifications (e.g., result = dbl(), name = chr()) .contract Optional contract validation","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/returns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define expected return schema for a stage function — returns","text":"tibble prototype defining expected return structure","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/returns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define expected return schema for a stage function — returns","text":"","code":"returns(result = dbl(), status = chr()) #> # A tibble: 0 × 2 #> # ℹ 2 variables: result <dbl>, status <chr> returns(data = lst(), valid = lgl()) #> # A tibble: 0 × 2 #> # ℹ 2 variables: data <list<list>>, valid <lgl>"},{"path":"https://bbuchsbaum.github.io/parade/reference/running.html","id":null,"dir":"Reference","previous_headings":"","what":"Select running jobs — running","title":"Select running jobs — running","text":"Select running jobs","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/running.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select running jobs — running","text":"","code":"running(x)"},{"path":"https://bbuchsbaum.github.io/parade/reference/scaffold_batch_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a basic SLURM batch template — scaffold_batch_template","title":"Create a basic SLURM batch template — scaffold_batch_template","text":"Generates template file batch job submission systems like SLURM. template used batchtools submit jobs cluster.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/scaffold_batch_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a basic SLURM batch template — scaffold_batch_template","text":"","code":"scaffold_batch_template(   system = c(\"slurm\"),   out = file.path(\"batchtools\", paste0(\"parade-\", match.arg(system), \".tmpl\")),   modules = \"R\",   exports = c(PARADE_SCRATCH = \"${SLURM_TMPDIR:-${TMPDIR:-/tmp}}/parade-$SLURM_JOB_ID\",     OMP_NUM_THREADS = \"1\", MKL_NUM_THREADS = \"1\", OPENBLAS_NUM_THREADS = \"1\"),   preamble = character(),   overwrite = FALSE )  scaffold_batch_template(   system = c(\"slurm\"),   out = file.path(\"batchtools\", paste0(\"parade-\", match.arg(system), \".tmpl\")),   modules = \"R\",   exports = c(PARADE_SCRATCH = \"${SLURM_TMPDIR:-${TMPDIR:-/tmp}}/parade-$SLURM_JOB_ID\",     OMP_NUM_THREADS = \"1\", MKL_NUM_THREADS = \"1\", OPENBLAS_NUM_THREADS = \"1\"),   preamble = character(),   overwrite = FALSE )"},{"path":"https://bbuchsbaum.github.io/parade/reference/scaffold_batch_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a basic SLURM batch template — scaffold_batch_template","text":"system Character string specifying batch system. Currently \"slurm\" supported. Path template file written. Defaults \"batchtools/parade-slurm.tmpl\". modules Character vector modules load. Default \"R\". exports Named character vector environment variables export job script. preamble Character vector additional shell commands include template preamble. overwrite Logical indicating whether overwrite existing template file. path Path template created (temp file NULL)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/scaffold_batch_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a basic SLURM batch template — scaffold_batch_template","text":"Path created template file (invisibly) Invisibly returns normalized path created template file.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/scaffold_batch_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a basic SLURM batch template — scaffold_batch_template","text":"","code":"template_path <- scaffold_batch_template() # \\donttest{ # Create a basic SLURM template template_path <- scaffold_batch_template(   system = \"slurm\",   out = tempfile(fileext = \".tmpl\") )  # Create a template with custom modules and exports template_path <- scaffold_batch_template(   system = \"slurm\",   modules = c(\"R/4.3.0\", \"gcc/11.2\"),   exports = c(CUSTOM_VAR = \"value\"),   out = tempfile(fileext = \".tmpl\") ) # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/scaffold_flow_job.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate scaffold scripts for SLURM flow execution — scaffold_flow_job","title":"Generate scaffold scripts for SLURM flow execution — scaffold_flow_job","text":"Creates set helper scripts submitting, monitoring, collecting results parade flow SLURM systems.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/scaffold_flow_job.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate scaffold scripts for SLURM flow execution — scaffold_flow_job","text":"","code":"scaffold_flow_job(   flow,   name = \"parade_job\",   registry_dir = NULL,   dir = getwd(),   modules = NULL,   exports = NULL )"},{"path":"https://bbuchsbaum.github.io/parade/reference/scaffold_flow_job.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate scaffold scripts for SLURM flow execution — scaffold_flow_job","text":"flow parade_flow object name Base name generated scripts registry_dir Registry directory job execution dir Directory scripts created modules SLURM modules load exports Environment variables export","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/scaffold_flow_job.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate scaffold scripts for SLURM flow execution — scaffold_flow_job","text":"List created script paths (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/scaffold_flow_job.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate scaffold scripts for SLURM flow execution — scaffold_flow_job","text":"","code":"# \\donttest{ flow <- flow(data.frame(x = 1:3)) scaffold_flow_job(flow, name = \"my_job\") #> Created scaffold scripts: #>   - /home/runner/work/parade/parade/docs/reference/scripts/my_job_submit.R #>   - /home/runner/work/parade/parade/docs/reference/scripts/my_job_sbatch.sh #>   - /home/runner/work/parade/parade/docs/reference/scripts/my_job_status.R #>   - /home/runner/work/parade/parade/docs/reference/scripts/my_job_collect.R #>   - /home/runner/work/parade/parade/docs/reference/scripts/my_job_cancel.sh # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Alias for returns function — schema","title":"Alias for returns function — schema","text":"Alias returns function","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alias for returns function — schema","text":"","code":"schema(..., .contract = NULL)"},{"path":"https://bbuchsbaum.github.io/parade/reference/schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alias for returns function — schema","text":"... Named type specifications .contract Optional contract validation","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alias for returns function — schema","text":"tibble prototype defining expected structure","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/schema.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Alias for returns function — schema","text":"","code":"schema(value = dbl(), label = chr()) #> # A tibble: 0 × 2 #> # ℹ 2 variables: value <dbl>, label <chr>"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_await.html","id":null,"dir":"Reference","previous_headings":"","what":"Wait for a SLURM script job to complete — script_await","title":"Wait for a SLURM script job to complete — script_await","text":"Wait SLURM script job complete","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_await.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wait for a SLURM script job to complete — script_await","text":"","code":"script_await(job, timeout = Inf, poll = 10)"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_await.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wait for a SLURM script job to complete — script_await","text":"job parade_script_job object timeout Maximum time wait seconds (default: Inf) poll Polling interval seconds","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_await.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wait for a SLURM script job to complete — script_await","text":"input job object (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_await.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wait for a SLURM script job to complete — script_await","text":"","code":"# \\donttest{ job <- submit_slurm(\"script.R\") #> Error in submit_slurm(\"script.R\"): Script not found: script.R script_await(job, timeout = 300)  # Wait up to 5 minutes #> Error: object 'job' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_cancel.html","id":null,"dir":"Reference","previous_headings":"","what":"Cancel a running SLURM script job — script_cancel","title":"Cancel a running SLURM script job — script_cancel","text":"Cancel running SLURM script job","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_cancel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cancel a running SLURM script job — script_cancel","text":"","code":"script_cancel(job)"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_cancel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cancel a running SLURM script job — script_cancel","text":"job parade_script_job object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_cancel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cancel a running SLURM script job — script_cancel","text":"input job object (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_cancel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cancel a running SLURM script job — script_cancel","text":"","code":"# \\donttest{ job <- submit_slurm(\"script.R\") #> Error in submit_slurm(\"script.R\"): Script not found: script.R script_cancel(job) #> Error: object 'job' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_done.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a SLURM job has completed — script_done","title":"Check if a SLURM job has completed — script_done","text":"Check SLURM job completed","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_done.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a SLURM job has completed — script_done","text":"","code":"script_done(job)"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_done.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a SLURM job has completed — script_done","text":"job parade_script_job object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_done.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a SLURM job has completed — script_done","text":"Logical indicating completion status","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_done.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a SLURM job has completed — script_done","text":"","code":"# \\donttest{ job <- submit_slurm(\"script.R\") #> Error in submit_slurm(\"script.R\"): Script not found: script.R is_done <- script_done(job) #> Error: object 'job' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_find_latest.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the most recently created script job registries — script_find_latest","title":"Find the most recently created script job registries — script_find_latest","text":"Find recently created script job registries","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_find_latest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the most recently created script job registries — script_find_latest","text":"","code":"script_find_latest(n = 5, pattern = NULL)"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_find_latest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the most recently created script job registries — script_find_latest","text":"n Maximum number registries return pattern Optional pattern filter registry names","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_find_latest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the most recently created script job registries — script_find_latest","text":"tibble registry paths modification times","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_find_latest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the most recently created script job registries — script_find_latest","text":"","code":"latest_jobs <- script_find_latest(n = 3)"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_load.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a script job from its registry directory — script_load","title":"Load a script job from its registry directory — script_load","text":"Load script job registry directory","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_load.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a script job from its registry directory — script_load","text":"","code":"script_load(registry_dir)"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_load.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a script job from its registry directory — script_load","text":"registry_dir Path batchtools registry directory","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_load.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a script job from its registry directory — script_load","text":"parade_script_job object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_load.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a script job from its registry directory — script_load","text":"","code":"# \\donttest{ job <- script_load(\"/path/to/registry\") #> Error in script_load(\"/path/to/registry\"): No script_job.rds found under: /path/to/registry # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_logs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get log file paths for a SLURM job — script_logs","title":"Get log file paths for a SLURM job — script_logs","text":"Get log file paths SLURM job","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_logs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get log file paths for a SLURM job — script_logs","text":"","code":"script_logs(job)"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_logs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get log file paths for a SLURM job — script_logs","text":"job parade_script_job object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_logs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get log file paths for a SLURM job — script_logs","text":"Tibble log file paths modification times","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_logs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get log file paths for a SLURM job — script_logs","text":"","code":"# \\donttest{ job <- submit_slurm(\"script.R\") #> Error in submit_slurm(\"script.R\"): Script not found: script.R logs <- script_logs(job) #> Error: object 'job' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Get CPU and memory metrics for a SLURM job — script_metrics","title":"Get CPU and memory metrics for a SLURM job — script_metrics","text":"Retrieves current resource usage statistics SLURM commands including CPU utilization, memory consumption, job status.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get CPU and memory metrics for a SLURM job — script_metrics","text":"","code":"script_metrics(job)"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get CPU and memory metrics for a SLURM job — script_metrics","text":"job parade_script_job object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get CPU and memory metrics for a SLURM job — script_metrics","text":"Named list job metrics resource usage","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_metrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get CPU and memory metrics for a SLURM job — script_metrics","text":"function queries SLURM's accounting system retrieve job metrics: Data Sources: Uses sacct historical/completed job metrics Uses sstat live metrics running jobs Falls back squeue accounting unavailable Metrics Returned: cpu_pct: CPU utilization percentage ave_rss, max_rss: Average/maximum resident set size (bytes) ncpus/alloc_cpus: Number allocated CPUs elapsed: Elapsed time seconds node: Node list job running state: Current job state (RUNNING, COMPLETED, FAILED, etc.) Prerequisites: SLURM commands (sacct, sstat, squeue) must available PATH SLURM accounting must enabled detailed metrics Failure Behavior: Returns NA unavailable metrics (never errors) Warns SLURM commands missing Degrades gracefully accounting disabled","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get CPU and memory metrics for a SLURM job — script_metrics","text":"","code":"# \\donttest{ job <- submit_slurm(\"script.R\") #> Error in submit_slurm(\"script.R\"): Script not found: script.R metrics <- script_metrics(job) #> Error: object 'job' not found # Returns list with: cpu_pct, ave_rss, max_rss, elapsed, state, etc. # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Get status of a SLURM script job — script_status","title":"Get status of a SLURM script job — script_status","text":"Get status SLURM script job","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get status of a SLURM script job — script_status","text":"","code":"script_status(job, detail = FALSE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get status of a SLURM script job — script_status","text":"job parade_script_job object detail Whether return detailed job information","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get status of a SLURM script job — script_status","text":"tibble job status information","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get status of a SLURM script job — script_status","text":"","code":"# \\donttest{ job <- submit_slurm(\"script.R\") #> Error in submit_slurm(\"script.R\"): Script not found: script.R status <- script_status(job) #> Error: object 'job' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_tail.html","id":null,"dir":"Reference","previous_headings":"","what":"Display recent log output from a SLURM job — script_tail","title":"Display recent log output from a SLURM job — script_tail","text":"Display recent log output SLURM job","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_tail.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display recent log output from a SLURM job — script_tail","text":"","code":"script_tail(job, n = 200)"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_tail.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display recent log output from a SLURM job — script_tail","text":"job parade_script_job object n Number lines show end log","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_tail.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display recent log output from a SLURM job — script_tail","text":"Log lines (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_tail.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display recent log output from a SLURM job — script_tail","text":"","code":"# \\donttest{ job <- submit_slurm(\"script.R\") #> Error in submit_slurm(\"script.R\"): Script not found: script.R script_tail(job, n = 50) #> Error: object 'job' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_top.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactive text monitor for a single SLURM job — script_top","title":"Interactive text monitor for a single SLURM job — script_top","text":"Displays real-time CPU, memory, log information running SLURM job continuously updating text interface.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_top.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactive text monitor for a single SLURM job — script_top","text":"","code":"script_top(job, refresh = 2, nlog = 30, clear = TRUE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_top.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interactive text monitor for a single SLURM job — script_top","text":"job parade_script_job object refresh Refresh interval seconds nlog Number log lines display clear Whether clear screen updates","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_top.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interactive text monitor for a single SLURM job — script_top","text":"input job object (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_top.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interactive text monitor for a single SLURM job — script_top","text":"","code":"# \\donttest{ job <- submit_slurm(\"script.R\") #> Error in submit_slurm(\"script.R\"): Script not found: script.R script_top(job, refresh = 5) #> Error: object 'job' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/simple_expand.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple macro expansion without glue — simple_expand","title":"Simple macro expansion without glue — simple_expand","text":"Simple macro expansion without glue","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/simple_expand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple macro expansion without glue — simple_expand","text":"","code":"simple_expand(template, replacements)"},{"path":"https://bbuchsbaum.github.io/parade/reference/simple_expand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple macro expansion without glue — simple_expand","text":"template Template string replacements Named list replacements","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/simple_expand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple macro expansion without glue — simple_expand","text":"Expanded string","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/sink_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Define an inline sink format — sink_format","title":"Define an inline sink format — sink_format","text":"Create format definition inline without registering globally. Useful one-formats want modify global registry.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/sink_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define an inline sink format — sink_format","text":"","code":"sink_format(writer, reader = NULL, ext = NULL, atomic = TRUE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/sink_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define an inline sink format — sink_format","text":"writer Function formula writing reader Function formula reading ext File extension atomic Whether writes atomic","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/sink_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define an inline sink format — sink_format","text":"List format definition","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/sink_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define an inline sink format — sink_format","text":"","code":"# Define a custom format inline my_format <- sink_format(   writer = ~ jsonlite::write_json(.x, .path, pretty = TRUE),   reader = ~ jsonlite::read_json(.path),   ext = \".json\" )  # Use with sink_quick sink_quick(\"data\", write = my_format$writer, read = my_format$reader) #> $fields #> [1] \"data\" #>  #> $dir #> [1] \"artifacts://_quick\" #>  #> $template #> [1] \"{.stage}/{.field}/{.row_key}\" #>  #> $format #> [1] \"custom\" #>  #> $writer #> function (x, path, ...)  #> { #>     .write_atomic_generic(writer, x, path, ...) #> } #> <bytecode: 0x5570c7c1bcb0> #> <environment: 0x5570cf1e8310> #>  #> $reader #> function (path, ...)  #> { #>     .path <- path #>     eval(expr, envir = environment()) #> } #> <bytecode: 0x5570cf2a3d10> #> <environment: 0x5570cf2a1488> #>  #> $overwrite #> [1] \"skip\" #>  #> $checksum #> [1] TRUE #>  #> $sidecar #> [1] \"json\" #>  #> $autoload #> [1] FALSE #>  #> $ext #> [1] \"\" #>  #> $build_path_fn #> function (spec, row, stage_name, field)  #> { #>     base_dir <- if (is.function(dir)) { #>         resolve_path(dir(row = row, stage = stage_name, field = field)) #>     } #>     else { #>         resolve_path(dir) #>     } #>     template_data <- row #>     template_data$.stage <- stage_name #>     template_data$.field <- field #>     template_data$.row_key <- .row_key(row) #>     rel_path <- as.character(glue::glue_data(template_data, template)) #>     if (!grepl(\"\\\\.[A-Za-z0-9]+$\", rel_path) && nzchar(ext)) { #>         rel_path <- paste0(rel_path, ext) #>     } #>     file.path(base_dir, rel_path) #> } #> <bytecode: 0x5570c7c182a8> #> <environment: 0x5570cf1e8310> #>  #> $compress #> NULL #>  #> attr(,\"class\") #> [1] \"parade_sink\""},{"path":"https://bbuchsbaum.github.io/parade/reference/sink_quick.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a sink specification quickly — sink_quick","title":"Create a sink specification quickly — sink_quick","text":"Define sink minimal configuration using format names, functions, formulas. Perfect rapid prototyping simple use cases.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/sink_quick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a sink specification quickly — sink_quick","text":"","code":"sink_quick(   fields,   write = \"rds\",   read = NULL,   ext = NULL,   dir = \"artifacts://_quick\",   template = \"{.stage}/{.field}/{.row_key}\",   autoload = FALSE,   overwrite = c(\"skip\", \"overwrite\", \"error\"),   sidecar = c(\"json\", \"none\"),   atomic = TRUE,   checksum = TRUE,   ... )"},{"path":"https://bbuchsbaum.github.io/parade/reference/sink_quick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a sink specification quickly — sink_quick","text":"fields Character vector field names persist write Format name (e.g., \"rds\", \"csv\"), function, formula writing read Optional function formula reading (inferred format NULL) ext File extension including dot (e.g., \".csv\"), inferred format NULL dir Base directory artifacts (default: \"artifacts://_quick\") template Glue template file paths (default: \".stage/.field/.row_key\") autoload Whether automatically load artifacts (default: FALSE quick sinks) overwrite Overwrite policy: \"skip\", \"overwrite\", \"error\" sidecar Sidecar metadata format: \"json\" \"none\" atomic Whether use atomic writes (temp rename) checksum Whether compute SHA256 checksums ... Additional arguments passed writer/reader functions","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/sink_quick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a sink specification quickly — sink_quick","text":"parade_sink specification object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/sink_quick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a sink specification quickly — sink_quick","text":"","code":"# Use a registered format by name sink_quick(\"result\", write = \"rds\") #> $fields #> [1] \"result\" #>  #> $dir #> [1] \"artifacts://_quick\" #>  #> $template #> [1] \"{.stage}/{.field}/{.row_key}\" #>  #> $format #> [1] \"rds\" #>  #> $writer #> function (x, path, compress = \"gzip\", ...)  #> { #>     dir.create(dirname(path), recursive = TRUE, showWarnings = FALSE) #>     if (identical(compress, \"gz\"))  #>         compress <- \"gzip\" #>     saveRDS(x, file = path, compress = compress, ...) #>     invisible(path) #> } #> <bytecode: 0x5570c962c788> #> <environment: 0x5570c9622248> #>  #> $reader #> function (file, refhook = NULL)  #> { #>     if (is.character(file)) { #>         con <- gzfile(file, \"rb\") #>         on.exit(close(con)) #>     } #>     else if (inherits(file, \"connection\"))  #>         con <- if (inherits(file, \"url\"))  #>             gzcon(file) #>         else file #>     else stop(\"bad 'file' argument\") #>     .Internal(unserializeFromConn(con, refhook)) #> } #> <bytecode: 0x5570c4539b30> #> <environment: namespace:base> #>  #> $overwrite #> [1] \"skip\" #>  #> $checksum #> [1] TRUE #>  #> $sidecar #> [1] \"json\" #>  #> $autoload #> [1] FALSE #>  #> $ext #> [1] \".rds\" #>  #> $build_path_fn #> function (spec, row, stage_name, field)  #> { #>     base_dir <- if (is.function(dir)) { #>         resolve_path(dir(row = row, stage = stage_name, field = field)) #>     } #>     else { #>         resolve_path(dir) #>     } #>     template_data <- row #>     template_data$.stage <- stage_name #>     template_data$.field <- field #>     template_data$.row_key <- .row_key(row) #>     rel_path <- as.character(glue::glue_data(template_data, template)) #>     if (!grepl(\"\\\\.[A-Za-z0-9]+$\", rel_path) && nzchar(ext)) { #>         rel_path <- paste0(rel_path, ext) #>     } #>     file.path(base_dir, rel_path) #> } #> <bytecode: 0x5570c7c182a8> #> <environment: 0x5570ceb05af8> #>  #> $compress #> [1] \"gzip\" #>  #> attr(,\"class\") #> [1] \"parade_sink\"  # Use a function sink_quick(\"data\",    write = function(x, path) write.csv(x, path, row.names = FALSE),   read = read.csv,   ext = \".csv\" ) #> $fields #> [1] \"data\" #>  #> $dir #> [1] \"artifacts://_quick\" #>  #> $template #> [1] \"{.stage}/{.field}/{.row_key}\" #>  #> $format #> [1] \"custom\" #>  #> $writer #> function (x, path, ...)  #> { #>     .write_atomic_generic(writer, x, path, ...) #> } #> <bytecode: 0x5570c7c1bcb0> #> <environment: 0x5570d18ae1a8> #>  #> $reader #> function (file, header = TRUE, sep = \",\", quote = \"\\\"\", dec = \".\",  #>     fill = TRUE, comment.char = \"\", ...)  #> read.table(file = file, header = header, sep = sep, quote = quote,  #>     dec = dec, fill = fill, comment.char = comment.char, ...) #> <bytecode: 0x5570d1882838> #> <environment: namespace:utils> #>  #> $overwrite #> [1] \"skip\" #>  #> $checksum #> [1] TRUE #>  #> $sidecar #> [1] \"json\" #>  #> $autoload #> [1] FALSE #>  #> $ext #> [1] \".csv\" #>  #> $build_path_fn #> function (spec, row, stage_name, field)  #> { #>     base_dir <- if (is.function(dir)) { #>         resolve_path(dir(row = row, stage = stage_name, field = field)) #>     } #>     else { #>         resolve_path(dir) #>     } #>     template_data <- row #>     template_data$.stage <- stage_name #>     template_data$.field <- field #>     template_data$.row_key <- .row_key(row) #>     rel_path <- as.character(glue::glue_data(template_data, template)) #>     if (!grepl(\"\\\\.[A-Za-z0-9]+$\", rel_path) && nzchar(ext)) { #>         rel_path <- paste0(rel_path, ext) #>     } #>     file.path(base_dir, rel_path) #> } #> <bytecode: 0x5570c7c182a8> #> <environment: 0x5570d18ae1a8> #>  #> $compress #> NULL #>  #> attr(,\"class\") #> [1] \"parade_sink\"  # Use a formula (shortest syntax) sink_quick(\"tbl\",   write = ~ write.csv(.x, .path, row.names = FALSE),   read = ~ read.csv(.path),   ext = \".csv\" ) #> $fields #> [1] \"tbl\" #>  #> $dir #> [1] \"artifacts://_quick\" #>  #> $template #> [1] \"{.stage}/{.field}/{.row_key}\" #>  #> $format #> [1] \"formula\" #>  #> $writer #> function (x, path, ...)  #> { #>     .write_atomic_generic(writer, x, path, ...) #> } #> <bytecode: 0x5570c7c1bcb0> #> <environment: 0x5570d12f4c48> #>  #> $reader #> function (path, ...)  #> { #>     .path <- path #>     eval(expr, envir = environment()) #> } #> <bytecode: 0x5570cf2a3d10> #> <environment: 0x5570d0f6ded8> #>  #> $overwrite #> [1] \"skip\" #>  #> $checksum #> [1] TRUE #>  #> $sidecar #> [1] \"json\" #>  #> $autoload #> [1] FALSE #>  #> $ext #> [1] \".csv\" #>  #> $build_path_fn #> function (spec, row, stage_name, field)  #> { #>     base_dir <- if (is.function(dir)) { #>         resolve_path(dir(row = row, stage = stage_name, field = field)) #>     } #>     else { #>         resolve_path(dir) #>     } #>     template_data <- row #>     template_data$.stage <- stage_name #>     template_data$.field <- field #>     template_data$.row_key <- .row_key(row) #>     rel_path <- as.character(glue::glue_data(template_data, template)) #>     if (!grepl(\"\\\\.[A-Za-z0-9]+$\", rel_path) && nzchar(ext)) { #>         rel_path <- paste0(rel_path, ext) #>     } #>     file.path(base_dir, rel_path) #> } #> <bytecode: 0x5570c7c182a8> #> <environment: 0x5570d12f4c48> #>  #> $compress #> NULL #>  #> attr(,\"class\") #> [1] \"parade_sink\"  # For packages with registered formats sink_quick(c(\"model\", \"metrics\"), write = \"parquet\") #> Error in sink_quick(c(\"model\", \"metrics\"), write = \"parquet\"): Unknown format 'parquet'. Available formats: csv, json, qs, rds, tsv"},{"path":"https://bbuchsbaum.github.io/parade/reference/sink_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a sink specification for artifact persistence — sink_spec","title":"Create a sink specification for artifact persistence — sink_spec","text":"Defines stage outputs persisted disk, configurable directory structure, file formats, metadata handling.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/sink_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a sink specification for artifact persistence — sink_spec","text":"","code":"sink_spec(   fields,   dir,   template = NULL,   format = \"rds\",   formats = NULL,   writer = NULL,   reader = NULL,   overwrite = c(\"skip\", \"overwrite\", \"error\"),   checksum = TRUE,   sidecar = c(\"json\", \"none\"),   compress = \"gzip\",   autoload = TRUE )"},{"path":"https://bbuchsbaum.github.io/parade/reference/sink_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a sink specification for artifact persistence — sink_spec","text":"fields Character vector field names persist dir Base directory function artifact storage template Optional glue template file path generation format File format string list per-field formats formats Optional named list per-field format specifications writer Optional custom writer function reader Function read persisted files overwrite Overwrite policy: \"skip\", \"overwrite\", \"error\" checksum Whether compute SHA256 checksums sidecar Sidecar metadata format: \"json\" \"none\" compress Compression method RDS files autoload Whether automatically load artifacts","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/sink_spec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a sink specification for artifact persistence — sink_spec","text":"parade_sink specification object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/sink_spec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a sink specification for artifact persistence — sink_spec","text":"","code":"sink_spec(\"result\", dir = \"artifacts://results\") #> $fields #> [1] \"result\" #>  #> $dir #> [1] \"artifacts://results\" #>  #> $template #> NULL #>  #> $format #> [1] \"rds\" #>  #> $formats #> NULL #>  #> $writer #> function (x, path, compress = \"gzip\", ...)  #> { #>     dir.create(dirname(path), recursive = TRUE, showWarnings = FALSE) #>     if (identical(compress, \"gz\"))  #>         compress <- \"gzip\" #>     saveRDS(x, file = path, compress = compress, ...) #>     invisible(path) #> } #> <bytecode: 0x5570c962c788> #> <environment: 0x5570c9622248> #>  #> $overwrite #> [1] \"skip\" #>  #> $checksum #> [1] TRUE #>  #> $sidecar #> [1] \"json\" #>  #> $compress #> [1] \"gzip\" #>  #> $reader #> function (file, refhook = NULL)  #> { #>     if (is.character(file)) { #>         con <- gzfile(file, \"rb\") #>         on.exit(close(con)) #>     } #>     else if (inherits(file, \"connection\"))  #>         con <- if (inherits(file, \"url\"))  #>             gzcon(file) #>         else file #>     else stop(\"bad 'file' argument\") #>     .Internal(unserializeFromConn(con, refhook)) #> } #> <bytecode: 0x5570c4539b30> #> <environment: namespace:base> #>  #> $autoload #> [1] TRUE #>  #> attr(,\"class\") #> [1] \"parade_sink\" sink_spec(c(\"model\", \"metrics\"), dir = \"/tmp/output\", compress = \"xz\") #> $fields #> [1] \"model\"   \"metrics\" #>  #> $dir #> [1] \"/tmp/output\" #>  #> $template #> NULL #>  #> $format #> [1] \"rds\" #>  #> $formats #> NULL #>  #> $writer #> function (x, path, compress = \"gzip\", ...)  #> { #>     dir.create(dirname(path), recursive = TRUE, showWarnings = FALSE) #>     if (identical(compress, \"gz\"))  #>         compress <- \"gzip\" #>     saveRDS(x, file = path, compress = compress, ...) #>     invisible(path) #> } #> <bytecode: 0x5570c962c788> #> <environment: 0x5570c9622248> #>  #> $overwrite #> [1] \"skip\" #>  #> $checksum #> [1] TRUE #>  #> $sidecar #> [1] \"json\" #>  #> $compress #> [1] \"xz\" #>  #> $reader #> function (file, refhook = NULL)  #> { #>     if (is.character(file)) { #>         con <- gzfile(file, \"rb\") #>         on.exit(close(con)) #>     } #>     else if (inherits(file, \"connection\"))  #>         con <- if (inherits(file, \"url\"))  #>             gzcon(file) #>         else file #>     else stop(\"bad 'file' argument\") #>     .Internal(unserializeFromConn(con, refhook)) #> } #> <bytecode: 0x5570c4539b30> #> <environment: namespace:base> #>  #> $autoload #> [1] TRUE #>  #> attr(,\"class\") #> [1] \"parade_sink\"  # Using different formats per field sink_spec(c(\"data\", \"model\"), dir = \"output\",   formats = list(data = \"csv\", model = \"rds\")) #> $fields #> [1] \"data\"  \"model\" #>  #> $dir #> [1] \"output\" #>  #> $template #> NULL #>  #> $format #> [1] \"rds\" #>  #> $formats #> $formats$data #> [1] \"csv\" #>  #> $formats$model #> [1] \"rds\" #>  #>  #> $writer #> NULL #>  #> $overwrite #> [1] \"skip\" #>  #> $checksum #> [1] TRUE #>  #> $sidecar #> [1] \"json\" #>  #> $compress #> [1] \"gzip\" #>  #> $reader #> function (file, refhook = NULL)  #> { #>     if (is.character(file)) { #>         con <- gzfile(file, \"rb\") #>         on.exit(close(con)) #>     } #>     else if (inherits(file, \"connection\"))  #>         con <- if (inherits(file, \"url\"))  #>             gzcon(file) #>         else file #>     else stop(\"bad 'file' argument\") #>     .Internal(unserializeFromConn(con, refhook)) #> } #> <bytecode: 0x5570c4539b30> #> <environment: namespace:base> #>  #> $autoload #> [1] FALSE #>  #> attr(,\"class\") #> [1] \"parade_sink\""},{"path":"https://bbuchsbaum.github.io/parade/reference/sink_temp.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a temporary sink specification — sink_temp","title":"Create a temporary sink specification — sink_temp","text":"Like sink_quick() writes run-scoped temporary directory. Perfect testing ephemeral workflows need permanent storage.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/sink_temp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a temporary sink specification — sink_temp","text":"","code":"sink_temp(   fields,   write = \"rds\",   read = NULL,   ext = NULL,   prefix = \"parade-quick\",   template = \"{.stage}/{.field}/{.row_key}\",   autoload = FALSE,   overwrite = c(\"skip\", \"overwrite\", \"error\"),   sidecar = c(\"json\", \"none\"),   atomic = TRUE,   checksum = TRUE,   ... )"},{"path":"https://bbuchsbaum.github.io/parade/reference/sink_temp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a temporary sink specification — sink_temp","text":"fields Character vector field names persist write Format name (e.g., \"rds\", \"csv\"), function, formula writing read Optional function formula reading ext File extension including dot prefix Prefix temp directory (default: \"parade-quick\") template Glue template file paths autoload Whether automatically load artifacts overwrite Overwrite policy sidecar Sidecar metadata format atomic Whether use atomic writes checksum Whether compute checksums ... Additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/sink_temp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a temporary sink specification — sink_temp","text":"parade_sink specification object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/sink_temp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a temporary sink specification — sink_temp","text":"","code":"# Quick temp sink for testing tmp_sink <- sink_temp(\"result\", write = \"rds\")  # CSV temp sink csv_tmp <- sink_temp(\"data\",   write = ~ write.csv(.x, .path, row.names = FALSE),   ext = \".csv\" )  # Will write to tempdir()/parade-quick-<runid>/..."},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Submit an R function to SLURM — slurm_call","title":"Submit an R function to SLURM — slurm_call","text":"Submits R function SLURM job serializing function arguments, executing compute node. provides ergonomic interface running functions SLURM without creating explicit script files.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Submit an R function to SLURM — slurm_call","text":"","code":"slurm_call(   .f,   ...,   name = NULL,   name_by = NULL,   packages = character(),   resources = NULL,   template = NULL,   registry_dir = NULL,   env = character(),   lib_paths = .libPaths(),   rscript = file.path(R.home(\"bin\"), \"Rscript\"),   write_result = NULL,   engine = c(\"slurm\", \"local\"),   .as_jobset = FALSE,   .error_policy = NULL )"},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Submit an R function to SLURM — slurm_call","text":".f Function execute SLURM ... Arguments pass function name Optional job name (defaults \"slurm-call\") name_by Function string dynamic job naming. Can \"stem\", \"index\", \"digest\", function takes arguments returns string packages Character vector packages load compute node resources Named list SLURM resource specifications template Path SLURM template file (uses default NULL) registry_dir Directory batchtools registry (auto-generated NULL) env Named character vector environment variables set lib_paths Character vector library paths use rscript Path Rscript executable write_result Optional path save function result (e.g., \"artifacts://result.rds\") engine Execution engine: \"slurm\" (default) \"local\" debugging .as_jobset Logical indicating whether return single-element jobset instead bare job object. Defaults FALSE backward compatibility. .error_policy Error handling policy on_error(). Specifies handle job failures, including retry logic backoff strategies.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Submit an R function to SLURM — slurm_call","text":"parade_script_job object monitoring job, parade_jobset containing job .as_jobset = TRUE. write_result specified, job object include result_path attribute resolved path result saved.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_call.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Submit an R function to SLURM — slurm_call","text":"function works : Serializing function arguments RDS files Creating small runner script loads executes Submitting runner script via submit_slurm() function arguments serialized using saveRDS(), include function's closure environment. aware large objects captured closure can significantly increase serialization size. Packages specified packages argument loaded compute node executing function. function depends packages, either specify call library() within function .","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_call.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Submit an R function to SLURM — slurm_call","text":"","code":"# Local execution example (no SLURM required) local_job <- slurm_call(   function(x) x^2,   x = 10,   engine = \"local\" ) # Returns result immediately local_job$result #> [1] 100  # \\donttest{ # Note: The following examples require a SLURM cluster environment # Simple function submission job <- slurm_call(   function(x) x^2,   x = 10,   name = \"square-10\" ) #> Error in batchtools::makeRegistry(file.dir = reg_dir, make.default = FALSE,     conf.file = NA, cluster.functions = cf): unused argument (cluster.functions = cf)  # With packages and result saving job <- slurm_call(   function(n) {     matrix(rnorm(n * n), nrow = n)   },   n = 1000,   packages = c(\"stats\"),   write_result = \"artifacts://random_matrix.rds\",   resources = list(mem = \"8G\", time = \"10min\") ) #> Error in batchtools::makeRegistry(file.dir = reg_dir, make.default = FALSE,     conf.file = NA, cluster.functions = cf): unused argument (cluster.functions = cf)  # Monitor the job script_tail(job) #> Error: object 'job' not found script_await(job) #> Error: object 'job' not found  # Load saved result if (!is.null(job$result_path)) {   result <- readRDS(job$result_path) } #> Error: object 'job' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_defaults_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get defaults for SLURM (merged from options() and config) — slurm_defaults_get","title":"Get defaults for SLURM (merged from options() and config) — slurm_defaults_get","text":"Get defaults SLURM (merged options() config)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_defaults_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get defaults for SLURM (merged from options() and config) — slurm_defaults_get","text":"","code":"slurm_defaults_get(profile = \"default\")"},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_defaults_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get defaults for SLURM (merged from options() and config) — slurm_defaults_get","text":"profile character name; 'default' default","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_defaults_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set defaults for SLURM (R session and optionally persist to config) — slurm_defaults_set","title":"Set defaults for SLURM (R session and optionally persist to config) — slurm_defaults_set","text":"Set defaults SLURM (R session optionally persist config)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_defaults_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set defaults for SLURM (R session and optionally persist to config) — slurm_defaults_set","text":"","code":"slurm_defaults_set(..., .list = NULL, profile = \"default\", persist = FALSE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_defaults_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set defaults for SLURM (R session and optionally persist to config) — slurm_defaults_set","text":"... key=value pairs (e.g., mem = NA, time = \"2h\") .list optional named list profile profile name; defaults 'default' persist write config file TRUE","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Map a function or script over elements via SLURM — slurm_map","title":"Map a function or script over elements via SLURM — slurm_map","text":"Submits multiple SLURM jobs mapping function script vector list. Automatically dispatches slurm_call functions submit_slurm scripts.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map a function or script over elements via SLURM — slurm_map","text":"","code":"slurm_map(   .x,   .f,   ...,   .args = NULL,   .name_by = \"auto\",   .resources = NULL,   .packages = character(),   .write_result = NULL,   .engine = c(\"slurm\", \"local\"),   .progress = FALSE,   .options = NULL,   .error_policy = NULL )"},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map a function or script over elements via SLURM — slurm_map","text":".x Vector list map .f Function, formula, script path apply element ... Additional arguments passed function script .args Named list additional arguments (alternative ...) .name_by Naming strategy: \"auto\", \"index\", \"stem\", \"digest\", function .resources Resource specification (profile name, profile object, list, NULL) .packages Character vector packages load (functions) .write_result Path template saving results (supports macros) .engine Execution engine: \"slurm\" (default) \"local\" .progress Show progress bar","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map a function or script over elements via SLURM — slurm_map","text":"parade_jobset object containing submitted jobs","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Map a function or script over elements via SLURM — slurm_map","text":".f function formula (e.g., ~ .x + 1), element .x passed first argument function. .f character string path script, treated script submission appropriate argument conversion. .name_by parameter controls job naming: \"auto\": Automatic naming based context \"index\": Use numeric index (job-1, job-2, etc.) \"stem\": Extract stem file paths .x \"digest\": Use content hash function: Custom naming function receiving element index","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map a function or script over elements via SLURM — slurm_map","text":"","code":"# Local execution example (no SLURM required) local_jobs <- slurm_map(1:3, ~ .x^2, .engine = \"local\") results <- collect(local_jobs)  # \\donttest{ # Note: The following examples require a SLURM cluster environment # Map a function over files files <- c(\"data1.csv\", \"data2.csv\") jobs <- slurm_map(files, ~ read.csv(.x) |> process_data(),                   .name_by = \"stem\",                   .write_result = \"results/{stem}.rds\") #> Error in batchtools::makeRegistry(file.dir = reg_dir, make.default = FALSE,     conf.file = NA, cluster.functions = cf): unused argument (cluster.functions = cf)  # Map a script with CLI arguments jobs <- slurm_map(files, \"scripts/process.R\",                   .args = args_cli(verbose = TRUE)) #> Error in submit_slurm(script = .f, args = script_args, name = job_name,     resources = .resources, env = character(), lib_paths = .libPaths()): Script not found: scripts/process.R  # Use formula notation with SLURM numbers <- 1:10 jobs <- slurm_map(numbers, ~ .x^2 + .x,                   .name_by = \"index\") #> Error in batchtools::makeRegistry(file.dir = reg_dir, make.default = FALSE,     conf.file = NA, cluster.functions = cf): unused argument (cluster.functions = cf)  # Wait for all jobs and collect results results <- jobs |> await() |> collect() #> Error: object 'jobs' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_pmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallel map over multiple lists/vectors via SLURM — slurm_pmap","title":"Parallel map over multiple lists/vectors via SLURM — slurm_pmap","text":"Like purrr::pmap, submits jobs mapping function rows inputs provided lists data frames.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_pmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallel map over multiple lists/vectors via SLURM — slurm_pmap","text":"","code":"slurm_pmap(   .l,   .f,   ...,   .name_by = \"auto\",   .resources = NULL,   .packages = character(),   .write_result = NULL,   .engine = c(\"slurm\", \"local\"),   .progress = FALSE )"},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_pmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallel map over multiple lists/vectors via SLURM — slurm_pmap","text":".l List vectors/lists map parallel .f Function apply set elements ... Additional static arguments passed call .name_by Naming strategy .resources Resource specification .packages Packages load .write_result Path template results .engine Execution engine .progress Show progress bar","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_pmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parallel map over multiple lists/vectors via SLURM — slurm_pmap","text":"parade_jobset object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_pmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parallel map over multiple lists/vectors via SLURM — slurm_pmap","text":"","code":"# Local execution example (no SLURM required) local_jobs <- slurm_pmap(   list(x = 1:3, y = 4:6),   function(x, y) x + y,   .engine = \"local\" ) results <- collect(local_jobs)  # \\donttest{ # Note: The following example requires a SLURM cluster environment # Map over multiple arguments files <- c(\"a.csv\", \"b.csv\", \"c.csv\") methods <- c(\"fast\", \"slow\", \"fast\") thresholds <- c(0.1, 0.2, 0.15)  jobs <- slurm_pmap(   list(file = files, method = methods, threshold = thresholds),   function(file, method, threshold) {     process_file(file, method = method, threshold = threshold)   },   .name_by = function(...) paste0(\"proc-\", tools::file_path_sans_ext(basename(..1))) ) #> Error in batchtools::makeRegistry(file.dir = reg_dir, make.default = FALSE,     conf.file = NA, cluster.functions = cf): unused argument (cluster.functions = cf) # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_resources.html","id":null,"dir":"Reference","previous_headings":"","what":"Build SLURM resources with defaults and normalization — slurm_resources","title":"Build SLURM resources with defaults and normalization — slurm_resources","text":"Merges user-specified resources configured defaults applies normalization batch_resources().","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_resources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build SLURM resources with defaults and normalization — slurm_resources","text":"","code":"slurm_resources(resources = NULL, profile = \"default\")"},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_resources.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build SLURM resources with defaults and normalization — slurm_resources","text":"resources Named list resource specifications merge profile Configuration profile use defaults","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_resources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build SLURM resources with defaults and normalization — slurm_resources","text":"Normalized resource specification list","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_resources.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build SLURM resources with defaults and normalization — slurm_resources","text":"","code":"slurm_resources(list(time = \"2h\"), profile = \"default\") #> $time #> [1] \"2:00:00\" #>"},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path to default SLURM template — slurm_template","title":"Get path to default SLURM template — slurm_template","text":"Get path default SLURM template","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path to default SLURM template — slurm_template","text":"","code":"slurm_template()"},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get path to default SLURM template — slurm_template","text":"Path package SLURM template file","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get path to default SLURM template — slurm_template","text":"","code":"template_path <- slurm_template()"},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_template_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the default SLURM template path — slurm_template_default","title":"Get the default SLURM template path — slurm_template_default","text":"Retrieves configured SLURM template path falls back package default template.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_template_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the default SLURM template path — slurm_template_default","text":"","code":"slurm_template_default()"},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_template_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the default SLURM template path — slurm_template_default","text":"Path SLURM template file","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_template_default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the default SLURM template path — slurm_template_default","text":"","code":"template_path <- slurm_template_default()"},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_template_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the default SLURM template path — slurm_template_set","title":"Set the default SLURM template path — slurm_template_set","text":"Set default SLURM template path","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_template_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the default SLURM template path — slurm_template_set","text":"","code":"slurm_template_set(path, persist = TRUE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_template_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the default SLURM template path — slurm_template_set","text":"path Path SLURM template file persist Whether save configuration file","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_template_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the default SLURM template path — slurm_template_set","text":"Resolved template path (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_template_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the default SLURM template path — slurm_template_set","text":"","code":"# Set a custom template path (temporarily, without persisting) temp_file <- tempfile(fileext = \".tmpl\") writeLines(\"#!/bin/bash\", temp_file) slurm_template_set(temp_file, persist = FALSE)  # Clean up unlink(temp_file)"},{"path":"https://bbuchsbaum.github.io/parade/reference/stage.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a processing stage to a parade flow — stage","title":"Add a processing stage to a parade flow — stage","text":"stage defines computational step flow typed inputs outputs, optional dependencies, configurable data handling options.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/stage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a processing stage to a parade flow — stage","text":"","code":"stage(   fl,   id,   f,   needs = character(),   schema,   prefix = TRUE,   sink = NULL,   skip_when = NULL,   hoist_struct = FALSE,   ... )"},{"path":"https://bbuchsbaum.github.io/parade/reference/stage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a processing stage to a parade flow — stage","text":"fl parade_flow object id Unique stage identifier (character) f Function execute stage needs Character vector stage IDs stage depends schema Schema defining expected output structure (returns()) prefix Whether prefix output columns stage ID (logical) sink Optional sink specification artifact persistence skip_when Optional function determine skip stage hoist_struct Whether hoist nested data structures (logical) ... Additional constant arguments passed stage function","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/stage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a processing stage to a parade flow — stage","text":"input flow new stage added","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/stage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a processing stage to a parade flow — stage","text":"","code":"grid <- data.frame(x = 1:3) fl <- flow(grid) |>   stage(\"double\", function(x) x * 2, schema = returns(result = dbl()))"},{"path":"https://bbuchsbaum.github.io/parade/reference/status.html","id":null,"dir":"Reference","previous_headings":"","what":"Get status of all jobs in a jobset — status","title":"Get status of all jobs in a jobset — status","text":"Get status jobs jobset","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get status of all jobs in a jobset — status","text":"","code":"status(x, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get status of all jobs in a jobset — status","text":"x parade_jobset object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get status of all jobs in a jobset — status","text":"tibble job status information","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/stem.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate job names from file stems — stem","title":"Generate job names from file stems — stem","text":"Creates naming function extracts stem (filename without extension) file paths use job names.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/stem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate job names from file stems — stem","text":"","code":"stem(pattern = NULL)"},{"path":"https://bbuchsbaum.github.io/parade/reference/stem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate job names from file stems — stem","text":"pattern Optional regex pattern extract stem","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/stem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate job names from file stems — stem","text":"function suitable use .name_by parameter","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/stem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate job names from file stems — stem","text":"","code":"# \\donttest{ files <- c(\"data/file1.csv\", \"data/file2.csv\") jobs <- slurm_map(files, process_file, .name_by = stem()) #> Error: object 'process_file' not found # Job names will be: \"file1\", \"file2\"  # With pattern extraction files <- c(\"sample_001_raw.txt\", \"sample_002_raw.txt\") jobs <- slurm_map(files, process_file, .name_by = stem(\"sample_(\\\\d+)\")) #> Error: object 'process_file' not found # Job names will be: \"001\", \"002\" # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/struct.html","id":null,"dir":"Reference","previous_headings":"","what":"Alias for pack function — struct","title":"Alias for pack function — struct","text":"Alias pack function","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/struct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alias for pack function — struct","text":"","code":"struct(.returns)"},{"path":"https://bbuchsbaum.github.io/parade/reference/struct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alias for pack function — struct","text":".returns Schema specification","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/struct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alias for pack function — struct","text":"parade_pack object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/sub-.parade_jobset.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract subset of jobs — [.parade_jobset","title":"Extract subset of jobs — [.parade_jobset","text":"Extract subset jobs","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/sub-.parade_jobset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract subset of jobs — [.parade_jobset","text":"","code":"# S3 method for class 'parade_jobset' x[i]"},{"path":"https://bbuchsbaum.github.io/parade/reference/submit.html","id":null,"dir":"Reference","previous_headings":"","what":"Submit a flow for deferred execution — submit","title":"Submit a flow for deferred execution — submit","text":"Submits parade flow asynchronous execution, either locally using future SLURM using batchtools. Returns handle monitoring collecting results.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/submit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Submit a flow for deferred execution — submit","text":"","code":"submit(   fl,   mode = c(\"index\", \"results\"),   run_id = NULL,   registry_dir = NULL,   index_dir = NULL,   seed_furrr = TRUE,   scheduling = 1 )"},{"path":"https://bbuchsbaum.github.io/parade/reference/submit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Submit a flow for deferred execution — submit","text":"fl parade_flow object distribution settings mode Execution mode: \"index\" (default) \"results\" run_id Optional run identifier (auto-generated NULL) registry_dir Directory execution registry index_dir Directory result indices seed_furrr Whether enable deterministic random number generation scheduling Furrr scheduling parameter","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/submit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Submit a flow for deferred execution — submit","text":"parade_deferred object monitoring execution","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/submit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Submit a flow for deferred execution — submit","text":"","code":"# \\donttest{ grid <- data.frame(x = 1:4, group = rep(c(\"A\", \"B\"), 2)) fl <- flow(grid) |>   stage(\"calc\", function(x) x^2, schema = returns(result = dbl())) |>   distribute(dist_local(by = \"group\"))  deferred <- submit(fl) # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/submit_script_local.html","id":null,"dir":"Reference","previous_headings":"","what":"Submit an R script for local execution — submit_script_local","title":"Submit an R script for local execution — submit_script_local","text":"Runs R script locally separate R process, capturing output providing job-like interface consistency SLURM jobs.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/submit_script_local.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Submit an R script for local execution — submit_script_local","text":"","code":"submit_script_local(   script,   args = character(),   name = NULL,   env = character(),   lib_paths = .libPaths(),   rscript = file.path(R.home(\"bin\"), \"Rscript\"),   wd = dirname(normalizePath(script)) )"},{"path":"https://bbuchsbaum.github.io/parade/reference/submit_script_local.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Submit an R script for local execution — submit_script_local","text":"script Path R script file execute args Character vector command line arguments name Job name env Named character vector environment variables lib_paths Library paths use rscript Path Rscript executable wd Working directory script execution","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/submit_script_local.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Submit an R script for local execution — submit_script_local","text":"parade_local_job object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/submit_slurm.html","id":null,"dir":"Reference","previous_headings":"","what":"Submit an R script to SLURM or run locally — submit_slurm","title":"Submit an R script to SLURM or run locally — submit_slurm","text":"Submits R script SLURM job using batchtools runs locally, configurable resources environment. Returns handle monitoring retrieving results.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/submit_slurm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Submit an R script to SLURM or run locally — submit_slurm","text":"","code":"submit_slurm(   script,   args = character(),   name = NULL,   engine = c(\"slurm\", \"local\"),   template = NULL,   resources = NULL,   registry_dir = NULL,   env = character(),   lib_paths = .libPaths(),   rscript = file.path(R.home(\"bin\"), \"Rscript\"),   wd = dirname(normalizePath(script)),   .as_jobset = FALSE,   .error_policy = NULL )"},{"path":"https://bbuchsbaum.github.io/parade/reference/submit_slurm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Submit an R script to SLURM or run locally — submit_slurm","text":"script Path R script file execute args Character vector command line arguments pass script name Optional job name (defaults script basename) engine Execution engine: \"slurm\" \"local\" (default: \"slurm\") template Path SLURM template file (uses default NULL) resources Named list SLURM resource specifications (ignored local) registry_dir Directory batchtools registry (auto-generated NULL) env Named character vector environment variables set lib_paths Character vector library paths use rscript Path Rscript executable wd Working directory script execution .as_jobset Logical indicating whether return single-element jobset instead bare job object. Defaults FALSE backward compatibility. .error_policy Error policy object retry logic (on_error())","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/submit_slurm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Submit an R script to SLURM or run locally — submit_slurm","text":"parade_script_job parade_local_job object monitoring job, parade_jobset containing job .as_jobset = TRUE.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/submit_slurm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Submit an R script to SLURM or run locally — submit_slurm","text":"","code":"# \\donttest{ # Create a simple R script script_path <- tempfile(fileext = \".R\") writeLines(\"cat('Hello from SLURM!')\", script_path)  # Submit to SLURM job <- submit_slurm(script_path, resources = list(time = \"5min\")) #> Error in batchtools::makeRegistry(file.dir = reg_dir, make.default = FALSE,     conf.file = NA, cluster.functions = cf): unused argument (cluster.functions = cf)  # Run locally job <- submit_slurm(script_path, engine = \"local\") # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/tail.parade_jobset.html","id":null,"dir":"Reference","previous_headings":"","what":"Get tail of logs for jobs — tail.parade_jobset","title":"Get tail of logs for jobs — tail.parade_jobset","text":"Get tail logs jobs","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/tail.parade_jobset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get tail of logs for jobs — tail.parade_jobset","text":"","code":"# S3 method for class 'parade_jobset' tail(x, n = 50, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/tail.parade_jobset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get tail of logs for jobs — tail.parade_jobset","text":"x parade_jobset parade_job n Number lines show ... Additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/tail.parade_jobset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get tail of logs for jobs — tail.parade_jobset","text":"Character vector log lines (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tibble/data frame type specification — tbl","title":"Create a tibble/data frame type specification — tbl","text":"Create tibble/data frame type specification","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tibble/data frame type specification — tbl","text":"","code":"tbl(...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tibble/data frame type specification — tbl","text":"... Column specifications tibble","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a tibble/data frame type specification — tbl","text":"tibble prototype schema definitions","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a tibble/data frame type specification — tbl","text":"","code":"schema(data = tbl()) #> # A tibble: 0 × 1 #> # ℹ 1 variable: data <tibble[,0]>"},{"path":"https://bbuchsbaum.github.io/parade/reference/time.html","id":null,"dir":"Reference","previous_headings":"","what":"Set time limit for a resource profile — time","title":"Set time limit for a resource profile — time","text":"Set time limit resource profile","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set time limit for a resource profile — time","text":"","code":"time(profile, value)"},{"path":"https://bbuchsbaum.github.io/parade/reference/time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set time limit for a resource profile — time","text":"profile resource profile object value Time limit (e.g., \"4:00:00\", \"2-00:00:00\")","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set time limit for a resource profile — time","text":"Updated profile object","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/reference/top.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch interactive monitor for jobset — top","title":"Launch interactive monitor for jobset — top","text":"Launch interactive monitor jobset","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/top.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch interactive monitor for jobset — top","text":"","code":"top(x, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/top.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launch interactive monitor for jobset — top","text":"x parade_jobset object refresh Refresh interval seconds nlog Number log lines show","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/top.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Launch interactive monitor for jobset — top","text":"NULL (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/use_mirai_local.html","id":null,"dir":"Reference","previous_headings":"","what":"Use local mirai daemons — use_mirai_local","title":"Use local mirai daemons — use_mirai_local","text":"Helper function quickly set local mirai daemons automatic core detection.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/use_mirai_local.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use local mirai daemons — use_mirai_local","text":"","code":"use_mirai_local(n = NULL, dispatcher = TRUE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/use_mirai_local.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use local mirai daemons — use_mirai_local","text":"n Number daemons (defaults number CPU cores) dispatcher Use dispatcher load balancing","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/use_mirai_local.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use local mirai daemons — use_mirai_local","text":"parade_dist object configured local mirai execution","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/use_mirai_local.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use local mirai daemons — use_mirai_local","text":"","code":"# Use all available cores use_mirai_local() #> $backend #> [1] \"mirai\" #>  #> $by #> character(0) #>  #> $n #> [1] 4 #>  #> $url #> NULL #>  #> $remote #> NULL #>  #> $dispatcher #> [1] TRUE #>  #> $tls #> [1] FALSE #>  #> $port #> NULL #>  #> $stop_on_exit #> [1] TRUE #>  #> $within #> [1] \"mirai\" #>  #> $workers_within #> NULL #>  #> $chunks_per_job #> [1] 1 #>  #> attr(,\"class\") #> [1] \"parade_dist\"  # Use specific number of daemons use_mirai_local(n = 4) #> $backend #> [1] \"mirai\" #>  #> $by #> character(0) #>  #> $n #> [1] 4 #>  #> $url #> NULL #>  #> $remote #> NULL #>  #> $dispatcher #> [1] TRUE #>  #> $tls #> [1] FALSE #>  #> $port #> NULL #>  #> $stop_on_exit #> [1] TRUE #>  #> $within #> [1] \"mirai\" #>  #> $workers_within #> NULL #>  #> $chunks_per_job #> [1] 1 #>  #> attr(,\"class\") #> [1] \"parade_dist\""},{"path":"https://bbuchsbaum.github.io/parade/reference/use_mirai_slurm.html","id":null,"dir":"Reference","previous_headings":"","what":"Use SLURM-managed mirai daemons — use_mirai_slurm","title":"Use SLURM-managed mirai daemons — use_mirai_slurm","text":"Helper function launch mirai daemons SLURM, ensuring compliance HPC policies maintaining low-latency execution.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/use_mirai_slurm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use SLURM-managed mirai daemons — use_mirai_slurm","text":"","code":"use_mirai_slurm(   n,   partition = NULL,   time = NULL,   mem = NULL,   cpus = NULL,   tls = TRUE,   port = 5555,   ... )"},{"path":"https://bbuchsbaum.github.io/parade/reference/use_mirai_slurm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use SLURM-managed mirai daemons — use_mirai_slurm","text":"n Number daemon jobs submit partition SLURM partition name time Wall time limit (e.g., \"2:00:00\") mem Memory limit (e.g., \"32G\") cpus CPUs per task tls Use TLS encryption port Port TLS connections ... Additional SLURM options name=value pairs","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/use_mirai_slurm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use SLURM-managed mirai daemons — use_mirai_slurm","text":"parade_dist object configured SLURM-managed mirai","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/use_mirai_slurm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use SLURM-managed mirai daemons — use_mirai_slurm","text":"","code":"# \\donttest{ # Launch 16 daemons on compute partition use_mirai_slurm(   n = 16,   partition = \"compute\",   time = \"2:00:00\",   mem = \"32G\",   cpus = 4 ) #> $backend #> [1] \"mirai\" #>  #> $by #> character(0) #>  #> $n #> NULL #>  #> $url #> mirai::host_url(tls = TRUE, port = 5555) #>  #> $remote #> mirai::cluster_config(command = \"sbatch\", options = \"#SBATCH --partition=compute\\n#SBATCH --time=2:00:00\\n#SBATCH --mem=32G\\n#SBATCH --cpus-per-task=4\\n#SBATCH --job-name=parade-mirai\") #>  #> $dispatcher #> [1] TRUE #>  #> $tls #> [1] TRUE #>  #> $port #> [1] 5555 #>  #> $stop_on_exit #> [1] TRUE #>  #> $within #> [1] \"mirai\" #>  #> $workers_within #> NULL #>  #> $chunks_per_job #> [1] 1 #>  #> attr(,\"class\") #> [1] \"parade_dist\" # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/use_mirai_ssh.html","id":null,"dir":"Reference","previous_headings":"","what":"Use SSH-tunneled mirai daemons — use_mirai_ssh","title":"Use SSH-tunneled mirai daemons — use_mirai_ssh","text":"Helper function connect remote machines via SSH, optional tunneling firewalled environments.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/use_mirai_ssh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use SSH-tunneled mirai daemons — use_mirai_ssh","text":"","code":"use_mirai_ssh(remotes, tunnel = TRUE, port = NULL)"},{"path":"https://bbuchsbaum.github.io/parade/reference/use_mirai_ssh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use SSH-tunneled mirai daemons — use_mirai_ssh","text":"remotes Character vector SSH URLs (e.g., \"ssh://user@host\") tunnel Use SSH tunneling firewalled nodes port Port tunneled connections","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/use_mirai_ssh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use SSH-tunneled mirai daemons — use_mirai_ssh","text":"parade_dist object configured SSH remotes","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/use_mirai_ssh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use SSH-tunneled mirai daemons — use_mirai_ssh","text":"","code":"# \\donttest{ # Connect through SSH tunnel use_mirai_ssh(   remotes = c(\"ssh://node1\", \"ssh://node2\"),   tunnel = TRUE ) #> $backend #> [1] \"mirai\" #>  #> $by #> character(0) #>  #> $n #> NULL #>  #> $url #> mirai::local_url(tcp = TRUE, port = 40491) #>  #> $remote #> mirai::ssh_config(c(\"ssh://node1\", \"ssh://node2\"), tunnel = TRUE) #>  #> $dispatcher #> [1] TRUE #>  #> $tls #> [1] FALSE #>  #> $port #> [1] 40491 #>  #> $stop_on_exit #> [1] TRUE #>  #> $within #> [1] \"mirai\" #>  #> $workers_within #> NULL #>  #> $chunks_per_job #> [1] 1 #>  #> attr(,\"class\") #> [1] \"parade_dist\"  # Direct SSH without tunneling use_mirai_ssh(   remotes = c(\"ssh://compute1\", \"ssh://compute2\"),   tunnel = FALSE ) #> $backend #> [1] \"mirai\" #>  #> $by #> character(0) #>  #> $n #> NULL #>  #> $url #> NULL #>  #> $remote #> mirai::ssh_config(c(\"ssh://compute1\", \"ssh://compute2\")) #>  #> $dispatcher #> [1] TRUE #>  #> $tls #> [1] FALSE #>  #> $port #> [1] 40491 #>  #> $stop_on_exit #> [1] TRUE #>  #> $within #> [1] \"mirai\" #>  #> $workers_within #> NULL #>  #> $chunks_per_job #> [1] 1 #>  #> attr(,\"class\") #> [1] \"parade_dist\" # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/use_registry.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set active registry — use_registry","title":"Get or set active registry — use_registry","text":"Manage registry currently active job storage.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/use_registry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set active registry — use_registry","text":"","code":"use_registry(path = NULL, create = TRUE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/use_registry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set active registry — use_registry","text":"path Path registry directory create TRUE, create directory exist","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/use_registry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set active registry — use_registry","text":"Current registry path","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/use_registry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set active registry — use_registry","text":"","code":"# \\donttest{ # Get current registry use_registry() #> Current registry: /tmp/Rtmpa5tjLG/parade-registry  # Switch to different registry use_registry(\"~/my_project/jobs\") #> Created registry: /home/runner/my_project/jobs #> Using registry: /home/runner/my_project/jobs # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/with_parade_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporarily set parade options for code execution — with_parade_options","title":"Temporarily set parade options for code execution — with_parade_options","text":"Temporarily set parade options code execution","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/with_parade_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporarily set parade options for code execution — with_parade_options","text":"","code":"with_parade_options(..., code)"},{"path":"https://bbuchsbaum.github.io/parade/reference/with_parade_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temporarily set parade options for code execution — with_parade_options","text":"... Named parade option values set temporarily code Code execute modified options","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/with_parade_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Temporarily set parade options for code execution — with_parade_options","text":"Result executing code","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/with_parade_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temporarily set parade options for code execution — with_parade_options","text":"","code":"with_parade_options(error = \"stop\", {   # code runs with error = \"stop\" }) #> Error in with_parade_options(error = \"stop\", {}): argument \"code\" is missing, with no default"}]
