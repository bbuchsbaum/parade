[{"path":"https://bbuchsbaum.github.io/parade/CLAUDE.html","id":null,"dir":"","previous_headings":"","what":"CLAUDE.md","title":"CLAUDE.md","text":"file provides guidance Claude Code (claude.ai/code) working code repository.","code":""},{"path":"https://bbuchsbaum.github.io/parade/CLAUDE.html","id":"project-overview","dir":"","previous_headings":"","what":"Project Overview","title":"CLAUDE.md","text":"Parade R package declarative parallel dataflow processing built top future/furrr, specialized support HPC environments (particularly SLURM). package provides typed schemas, artifacts, diagnostics, HPC-friendly distribution capabilities.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/CLAUDE.html","id":"build-and-install-package","dir":"","previous_headings":"Common Development Commands","what":"Build and Install Package","title":"CLAUDE.md","text":"","code":"# Build and install from source devtools::install()  # Build documentation devtools::document()  # Check package for CRAN compliance devtools::check()  # Run tests (if available) devtools::test()"},{"path":"https://bbuchsbaum.github.io/parade/CLAUDE.html","id":"testing-single-functions","dir":"","previous_headings":"Common Development Commands","what":"Testing Single Functions","title":"CLAUDE.md","text":"","code":"# Load development version devtools::load_all()  # Test individual functions example_function()"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/CLAUDE.html","id":"core-components","dir":"","previous_headings":"Code Architecture","what":"Core Components","title":"CLAUDE.md","text":"JSON-based configuration system SLURM defaults profiles Configuration search precedence: PARADE_CONFIG env var → <project>/parade.json → <project>/.parade/parade.json NA/omit semantics resource management (NA values drop flags) Profile-based defaults session persistent storage options Generic script submission interface via submit_slurm() Integration batchtools registry management Automatic resource merging defaults Job handle persistence metadata tracking Live CPU/memory metrics via SLURM commands (squeue, sstat, sacct) Metric parsing formatting utilities Job status tracking log management script_top(): Single job interactive monitor jobs_top(): Multi-job dashboard live updates Log tailing status visualization Project-relative path resolution Registry artifact directory management","code":""},{"path":"https://bbuchsbaum.github.io/parade/CLAUDE.html","id":"key-design-patterns","dir":"","previous_headings":"Code Architecture","what":"Key Design Patterns","title":"CLAUDE.md","text":"Null coalescing operator: %||% used throughout default values Error handling: Graceful degradation SLURM tools unavailable Registry pattern: batchtools registries job state persistence Resource merging: Hierarchical defaults explicit override semantics","code":""},{"path":"https://bbuchsbaum.github.io/parade/CLAUDE.html","id":"dependencies","dir":"","previous_headings":"Code Architecture","what":"Dependencies","title":"CLAUDE.md","text":"Core dependencies: - future, furrr: Parallel processing backend - batchtools, future.batchtools: SLURM integration - tibble, tidyr, purrr: Data manipulation - jsonlite: Configuration persistence - digest: Hash generation unique IDs","code":""},{"path":"https://bbuchsbaum.github.io/parade/CLAUDE.html","id":"recent-changes-v0110","dir":"","previous_headings":"","what":"Recent Changes (v0.11.0)","title":"CLAUDE.md","text":"NA omit() values resources now explicitly drop SLURM flags Configurable defaults system JSON persistence Profile support different compute environments New jobs_top() multi-job monitoring dashboard Template path configuration via slurm_template_set()","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"what-is-parade","dir":"Articles","previous_headings":"","what":"What is parade?","title":"Parade core: declarative flows, types, and execution","text":"parade declarative parallel dataflow framework R enables : Build typed computational pipelines explicit dependencies Execute workflows locally HPC clusters (including SLURM) Manage parameter grids batch processing Track artifacts diagnostics automatically Handle errors gracefully configurable policies Think parade way turn complex, multi-step analyses reproducible, scalable workflows can run anywhere laptop supercomputer.","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"core-concepts","dir":"Articles","previous_headings":"","what":"Core concepts","title":"Parade core: declarative flows, types, and execution","text":"vignette covers essentials: parameter grids, typed stage outputs, DAG wiring, execution.","code":"Parameter Grid → Flow Definition → Stage Execution → Results Collection      ↓               ↓                    ↓              ↓    subjects,    typed stages with    parallel or      tibble with    sessions,    dependencies and     sequential       diagnostics    conditions   error handling       execution        & artifacts"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"grid-flow-setting-up-your-parameter-space","dir":"Articles","previous_headings":"","what":"1) Grid → Flow: Setting up your parameter space","title":"Parade core: declarative flows, types, and execution","text":"foundation parade workflow parameter grid defines combinations parameters want process: Now create flow grid. flow computational pipeline applied row parameter grid: Key concepts: seed_col: Ensures reproducible random number generation schema: Defines expected output types validation optimization needs: Creates dependencies stages (forms DAG) hoist_struct: Flattens nested lists separate columns","code":"library(parade) library(progressr)  # Initialize path aliases for consistent artifact management paths_init()                               # stable aliases (project://, artifacts://, registry://)  # Create a parameter grid - each row represents one \"job\" grid <- param_grid(subject = c(\"s01\",\"s02\"),                    session = 1:2,                    seed = 1:4)  # This creates 2 × 2 × 4 = 16 parameter combinations print(grid) fl <- flow(grid, seed_col = \"seed\") |>   stage(     id = \"prep\",     f  = function(subject, session) {       # Each stage function receives parameters from the current grid row       # This stage creates some mock data based on the session       list(df = tibble::tibble(x = 1:5, y = (1:5) + session))     },     # Define the expected output structure with types     schema = schema(df = lst(ptype = tibble::tibble(x = int(), y = int()))),     # Hoist the nested list structure to top-level columns     hoist_struct = TRUE   ) |>   stage(     id = \"fit\",     needs = \"prep\",  # This stage depends on the \"prep\" stage     f  = function(prep.df) {       # Stage functions can access outputs from previous stages       # Notice the naming: prep.df refers to the 'df' output from 'prep' stage       list(mean_y = mean(prep.df$y))     },     schema = schema(mean_y = dbl())   )  # View the flow structure print(fl)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"deterministic-types-validation-contracts","dir":"Articles","previous_headings":"","what":"2) Deterministic types + validation contracts","title":"Parade core: declarative flows, types, and execution","text":"Parade’s type system ensures pipeline produces consistent, validated outputs: Available types: - dbl() - double/numeric values - int() - integers - chr() - character strings - lgl() - logical (TRUE/FALSE) - lst() - lists (can specify nested prototypes) - file_ref() - file artifacts metadata","code":"fl2 <- fl |>   stage(     id = \"check\",     needs = \"fit\",     f  = function(fit.mean_y) {       # Validate that our computed mean is sensible       list(ok = is.finite(fit.mean_y))     },     schema = schema(ok = lgl()),  # Expect a logical output     ... = NULL  # No additional constant arguments   )  # Inspect the complete pipeline explain(fl2)  # Shows stage dependencies and output schemas"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"execute-local-or-distributed","dir":"Articles","previous_headings":"","what":"3) Execute: local or distributed","title":"Parade core: declarative flows, types, and execution","text":"flow defined, execution straightforward: Execution options: - engine = \"sequential\": Single-threaded, good debugging - engine = \"future\": Parallel execution using future framework - workers: Number parallel processes - .progress: Show progress bars execution row output represents one parameter combination : - Original parameters grid - Stage outputs (typed validated) - .ok: Overall success status row - .diag: Detailed diagnostic information per stage","code":"# Set up progress reporting handlers(global = TRUE)  # Execute the flow out <- collect(fl2, engine = \"future\", workers = 4, .progress = TRUE)  # View results print(out)"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"error-handling","dir":"Articles","previous_headings":"Common workflows","what":"Error handling","title":"Parade core: declarative flows, types, and execution","text":"Control happens stages fail:","code":"# Different error policies fl_robust <- flow(grid, error = \"keep\")     # Keep failed rows in output fl_strict <- flow(grid, error = \"stop\")     # Stop on first error   fl_filter <- flow(grid, error = \"omit\")     # Remove failed rows"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"conditional-execution","dir":"Articles","previous_headings":"Common workflows","what":"Conditional execution","title":"Parade core: declarative flows, types, and execution","text":"Skip stages based conditions:","code":"fl_conditional <- fl |>   stage(     id = \"optional_step\",     needs = \"prep\",     f = function(prep.df) list(processed = TRUE),     schema = schema(processed = lgl()),     skip_when = function(prep.df) nrow(prep.df) == 0  # Skip if no data   )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"debugging-workflows","dir":"Articles","previous_headings":"Common workflows","what":"Debugging workflows","title":"Parade core: declarative flows, types, and execution","text":"","code":"# Run a small subset first test_results <- collect(fl2, limit = 2)  # Check for failures failed_rows <- failed(test_results)  # Examine diagnostics stage_diagnostics <- diagnostics(test_results, stage = \"fit\")"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-core.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next steps","title":"Parade core: declarative flows, types, and execution","text":"parade-paths: Learn artifact management path aliases parade-slurm-distribution: Scale HPC clusters SLURM parade-sinks: Persist intermediate results manage artifacts parade-defaults: Configure site-wide project-specific settings power parade lies composability - start simple local execution, scale distributed computing needs grow, declarative interface.","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"what-are-profiles-and-how-do-they-differ-from-defaults","dir":"Articles","previous_headings":"","what":"What are profiles and how do they differ from defaults?","title":"SLURM Profiles: Environment-Specific Configurations","text":"defaults provide single set baseline SLURM parameters project (described “Using SLURM Defaults” vignette), profiles allow define multiple named sets defaults different environments, workflows, job types. Think profiles named collections defaults can switched depending context: Defaults: One set parameters applied globally Profiles: Multiple named sets parameters (e.g., “production”, “debug”, “gpu_jobs”) enables maintain different configurations various scenarios within project, making code portable across different environments use cases.","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"quick-start-using-profiles","dir":"Articles","previous_headings":"","what":"Quick start: Using profiles","title":"SLURM Profiles: Environment-Specific Configurations","text":"","code":"library(parade) paths_init()  # Set up a production profile with conservative resource allocation slurm_defaults_set(   partition = \"compute\",   time = \"8h\",   cpus_per_task = 32,   mem = \"64G\",   profile = \"production\",   persist = TRUE )  # Set up a debug profile for quick testing slurm_defaults_set(   partition = \"debug\",    time = \"30m\",   cpus_per_task = 4,   mem = \"8G\",   profile = \"debug\",   persist = TRUE )  # Use production profile prod_resources <- slurm_resources(list(time = \"6h\"), profile = \"production\")  # Use debug profile   debug_resources <- slurm_resources(list(nodes = 1), profile = \"debug\")"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"research-cluster-with-different-partitions","dir":"Articles","previous_headings":"Multi-environment workflow examples","what":"Research cluster with different partitions","title":"SLURM Profiles: Environment-Specific Configurations","text":"","code":"# High-performance partition for production runs slurm_defaults_set(   partition = \"highmem\",   time = \"24h\",    cpus_per_task = 64,   mem = \"256G\",   profile = \"analysis\",   persist = TRUE )  # Quick partition for development and testing slurm_defaults_set(   partition = \"quick\",   time = \"2h\",   cpus_per_task = 8,    mem = \"16G\",   profile = \"dev\",   persist = TRUE )  # GPU partition for machine learning workloads slurm_defaults_set(   partition = \"gpu\",   time = \"12h\",   cpus_per_task = 16,   mem = \"32G\",    gres = \"gpu:2\",   profile = \"ml\",   persist = TRUE )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"cross-cluster-portability","dir":"Articles","previous_headings":"Multi-environment workflow examples","what":"Cross-cluster portability","title":"SLURM Profiles: Environment-Specific Configurations","text":"working across different clusters, profiles help maintain environment-specific configurations:","code":"# Cluster A: Allows memory specification slurm_defaults_set(   partition = \"general\",   time = \"4h\",   cpus_per_task = 16,   mem = \"32G\",   profile = \"cluster_a\",    persist = TRUE )  # Cluster B: Rejects --mem flag, use NA to omit slurm_defaults_set(   partition = \"compute\",   time = \"4h\",    cpus_per_task = 16,   mem = NA,                # omit --mem entirely   profile = \"cluster_b\",   persist = TRUE )  # Switch between clusters by changing profile job_cluster_a <- submit_slurm(\"analysis.R\",                                resources = slurm_resources(profile = \"cluster_a\"))  job_cluster_b <- submit_slurm(\"analysis.R\",                               resources = slurm_resources(profile = \"cluster_b\"))"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"configuration-file-structure-with-profiles","dir":"Articles","previous_headings":"","what":"Configuration file structure with profiles","title":"SLURM Profiles: Environment-Specific Configurations","text":"Profiles stored named sections configuration file:","code":"{   \"slurm\": {     \"template\": \"registry://templates/parade-slurm.tmpl\",     \"defaults\": {       \"default\": {         \"partition\": \"general\",         \"time\": \"2h\",         \"cpus_per_task\": 16       },       \"production\": {         \"partition\": \"compute\",          \"time\": \"8h\",         \"cpus_per_task\": 32,         \"mem\": \"64G\"       },       \"debug\": {         \"partition\": \"debug\",         \"time\": \"30m\",          \"cpus_per_task\": 4,         \"mem\": \"8G\"       },       \"gpu_jobs\": {         \"partition\": \"gpu\",         \"time\": \"12h\",         \"cpus_per_task\": 16,          \"mem\": \"32G\",         \"gres\": \"gpu:2\"       }     }   } }"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"retrieving-profile-specific-defaults","dir":"Articles","previous_headings":"Working with profiles programmatically","what":"Retrieving profile-specific defaults","title":"SLURM Profiles: Environment-Specific Configurations","text":"","code":"# Get defaults from specific profiles prod_defaults <- slurm_defaults_get(profile = \"production\") debug_defaults <- slurm_defaults_get(profile = \"debug\")  # If profile doesn't exist, falls back to \"default\" profile missing_defaults <- slurm_defaults_get(profile = \"nonexistent\")"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"building-resources-with-profile-overrides","dir":"Articles","previous_headings":"Working with profiles programmatically","what":"Building resources with profile overrides","title":"SLURM Profiles: Environment-Specific Configurations","text":"","code":"# Start with production profile, but reduce time for this job resources <- slurm_resources(   list(time = \"4h\", nodes = 2),   profile = \"production\" )  # Submit job using these resources job <- submit_slurm(\"big_analysis.R\", resources = resources)"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"use-descriptive-profile-names","dir":"Articles","previous_headings":"Best practices for profile management","what":"1. Use descriptive profile names","title":"SLURM Profiles: Environment-Specific Configurations","text":"Choose names clearly indicate intended use case:","code":"# Good: Clear, descriptive names slurm_defaults_set(..., profile = \"gpu_training\") slurm_defaults_set(..., profile = \"quick_test\")  slurm_defaults_set(..., profile = \"production_analysis\")  # Avoid: Vague or cryptic names slurm_defaults_set(..., profile = \"config1\") slurm_defaults_set(..., profile = \"temp\")"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"establish-consistent-profile-naming-conventions","dir":"Articles","previous_headings":"Best practices for profile management","what":"2. Establish consistent profile naming conventions","title":"SLURM Profiles: Environment-Specific Configurations","text":"Within teams projects, establish naming patterns: Environment-based: dev, staging, production Resource-based: low_mem, high_cpu, gpu_intensive Partition-based: debug_partition, compute_partition, gpu_partition","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"document-your-profiles","dir":"Articles","previous_headings":"Best practices for profile management","what":"3. Document your profiles","title":"SLURM Profiles: Environment-Specific Configurations","text":"Include comments setup scripts explain profile purposes:","code":"# Production profile: Long-running analysis jobs on compute partition slurm_defaults_set(   partition = \"compute\",   time = \"24h\",    cpus_per_task = 64,   mem = \"128G\",   profile = \"production\",   persist = TRUE )  # Debug profile: Quick testing on debug partition with minimal resources slurm_defaults_set(   partition = \"debug\",   time = \"30m\",   cpus_per_task = 4,    mem = \"8G\",   profile = \"debug\",   persist = TRUE )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"version-control-your-configuration","dir":"Articles","previous_headings":"Best practices for profile management","what":"4. Version control your configuration","title":"SLURM Profiles: Environment-Specific Configurations","text":"Consider committing parade.json file version control team members can share profile configurations, mindful environment-specific settings may need local customization.","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"test-profile-switching","dir":"Articles","previous_headings":"Best practices for profile management","what":"5. Test profile switching","title":"SLURM Profiles: Environment-Specific Configurations","text":"Regularly verify profiles work correctly across different environments:","code":"# Test that all profiles can be loaded without errors test_profiles <- c(\"production\", \"debug\", \"gpu_jobs\") for (profile in test_profiles) {   cat(\"Testing profile:\", profile, \"\\n\")   defaults <- slurm_defaults_get(profile = profile)   resources <- slurm_resources(profile = profile)   cat(\"  Partition:\", defaults$partition, \"\\n\")   cat(\"  Time:\", defaults$time, \"\\n\") }"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults-profiles.html","id":"configuration-file-locations","dir":"Articles","previous_headings":"","what":"Configuration file locations","title":"SLURM Profiles: Environment-Specific Configurations","text":"Parade searches configuration files order: PARADE_CONFIG environment variable (explicit file path) <project>/parade.json (project root) <project>/.parade/parade.json (created automatically) search order allows flexible deployment scenarios different environments can use different configuration files maintaining fallback hierarchy.","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults.html","id":"what-are-defaults-and-why-use-them","dir":"Articles","previous_headings":"","what":"What are defaults and why use them?","title":"Using SLURM Defaults in parade","text":"parade package allows set site/project defaults SLURM job submission, making R code portable across different clusters reducing repetitive resource specifications. Instead specifying SLURM parameters (partition, memory, CPU count, etc.) every job submission, can configure reuse throughout project. Key benefits using defaults: Portability: R scripts work across different clusters without modification Consistency: Ensure jobs use appropriate resource allocations environment Flexibility: Selectively omit problematic flags clusters reject (e.g., --mem) Maintainability: Update resource requirements one place rather throughout codebase Defaults stored JSON configuration file accessible R simple functions.","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick start","title":"Using SLURM Defaults in parade","text":"call submit_slurm(), automatically merges call’s resources parameter configured defaults, normalizes time specifications, drops NA omit() fields constructing #SBATCH directives SLURM job.","code":"library(parade) paths_init()  # Set up defaults for your cluster environment slurm_defaults_set(   partition = \"general\",     # Default partition to use   time = \"2h\",              # Default time limit   cpus_per_task = 16,       # Default CPU allocation   mem = NA,                 # <- omit --mem entirely (some clusters reject this flag)   omp_num_threads = 1,      # Default OpenMP thread count   persist = TRUE            # Save these defaults to config file )  # Optionally set a default template path slurm_template_set(\"registry://templates/parade-slurm.tmpl\")  # Now submit jobs using your defaults job <- submit_slurm(\"script.R\")"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults.html","id":"configuration-file","dir":"Articles","previous_headings":"","what":"Configuration file","title":"Using SLURM Defaults in parade","text":"Parade searches configuration files following order: PARADE_CONFIG environment variable (exact file path), set <project>/parade.json, present <project>/.parade/parade.json (created automatically needed) configuration file uses JSON format. ’s example showing typical defaults research cluster: Note null JSON corresponds NA R, tells parade omit parameter entirely SLURM submission.","code":"{   \"slurm\": {     \"template\": \"registry://templates/parade-slurm.tmpl\",     \"defaults\": {       \"partition\": \"general\",       \"time\": \"2h\",        \"cpus_per_task\": 16,       \"mem\": null,       \"omp_num_threads\": 1     }   } }"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults.html","id":"inspecting-current-defaults","dir":"Articles","previous_headings":"Working with defaults programmatically","what":"Inspecting current defaults","title":"Using SLURM Defaults in parade","text":"","code":"# View all current defaults slurm_defaults_get()  # Check specific default values defaults <- slurm_defaults_get() defaults$time        # \"2h\" defaults$partition   # \"general\""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults.html","id":"building-resource-lists-with-overrides","dir":"Articles","previous_headings":"Working with defaults programmatically","what":"Building resource lists with overrides","title":"Using SLURM Defaults in parade","text":"slurm_resources() function combines defaults job-specific overrides:","code":"# Use defaults but override time and explicitly omit memory resources <- slurm_resources(list(time = \"90min\", mem = omit()))  # Submit job with these specific resources job <- submit_slurm(\"analysis.R\", resources = resources)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults.html","id":"updating-defaults-during-your-session","dir":"Articles","previous_headings":"Working with defaults programmatically","what":"Updating defaults during your session","title":"Using SLURM Defaults in parade","text":"","code":"# Change defaults temporarily (session only) slurm_defaults_set(mem = NA)           # omit --mem flag slurm_defaults_set(cpus_per_task = 8)  # reduce CPU count  # Make changes permanent by saving to config file slurm_defaults_set(time = \"1h\", persist = TRUE)  # Set multiple defaults at once slurm_defaults_set(   partition = \"gpu\",   time = \"4h\",    gres = \"gpu:1\",   persist = TRUE )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults.html","id":"overriding-defaults-in-job-submission","dir":"Articles","previous_headings":"","what":"Overriding defaults in job submission","title":"Using SLURM Defaults in parade","text":"can override defaults per-job basis passing resources argument submit_slurm():","code":"# Use defaults for most parameters, but need more time and memory for this job big_job <- submit_slurm(\"big_analysis.R\",                          resources = list(time = \"12h\", mem = \"32G\"))  # For a quick test job, use minimal resources test_job <- submit_slurm(\"test.R\",                           resources = list(time = \"5min\", cpus_per_task = 1))  # Submit to a different partition while keeping other defaults gpu_job <- submit_slurm(\"model_training.R\",                         resources = list(partition = \"gpu\", gres = \"gpu:2\"))"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults.html","id":"setting-up-defaults-for-different-cluster-environments","dir":"Articles","previous_headings":"Common use cases and examples","what":"Setting up defaults for different cluster environments","title":"Using SLURM Defaults in parade","text":"cluster rejects memory specifications: GPU cluster: high-memory jobs:","code":"slurm_defaults_set(   partition = \"compute\",   time = \"2h\",   cpus_per_task = 16,   mem = NA,              # Omit memory specification   persist = TRUE ) slurm_defaults_set(   partition = \"gpu\",   time = \"4h\",    cpus_per_task = 8,   mem = \"16G\",   gres = \"gpu:1\",   persist = TRUE ) slurm_defaults_set(   partition = \"highmem\",   time = \"8h\",   cpus_per_task = 32,   mem = \"128G\",   persist = TRUE )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-defaults.html","id":"best-practices","dir":"Articles","previous_headings":"Common use cases and examples","what":"Best practices","title":"Using SLURM Defaults in parade","text":"Set defaults early: Configure defaults beginning project initializing paths_init() Use meaningful time limits: Set reasonable default time limits avoid jobs sitting queue unnecessarily Consider cluster policies: clusters reject certain flags (like --mem) - use NA omit Environment-specific configs: Use different config files PARADE_CONFIG environment variable different clusters Version control: Consider committing parade.json file version control team members share defaults approach keeps R code portable across clusters different SLURM policies resource requirements.","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"why-mirai","dir":"Articles","previous_headings":"","what":"Why mirai?","title":"Mirai backend: fast, scalable parallel execution","text":"mirai backend brings several powerful advantages parade workflows: connection limits: Scale beyond R’s 125 connection limit Low-latency execution: Persistent daemons dispatcher minimal overhead Secure remote execution: Built-TLS SSH tunneling support HPC compliance: Launch daemons SLURM maintaining scheduler policies Simple local development: Drop-replacement multisession better performance","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"local-development","dir":"Articles","previous_headings":"Quick Start","what":"Local development","title":"Mirai backend: fast, scalable parallel execution","text":"simplest way use mirai replacement standard multisession backend: provides instant parallelism without configuration, often better performance traditional backends many small tasks.","code":"library(parade)  # Initialize mirai with auto-detected cores mirai_init()  # Or use the distribution interface fl <- flow(grid) |>   stage(\"process\", function(x) x^2, schema = returns(y = dbl())) |>   distribute(use_mirai_local()) |>   collect()"},{"path":[]},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"local-daemons","dir":"Articles","previous_headings":"Distribution Patterns","what":"1. Local Daemons","title":"Mirai backend: fast, scalable parallel execution","text":"development single-machine workflows:","code":"# Basic local setup dist <- dist_mirai(n = 8)  # With explicit configuration dist <- dist_mirai(   n = parallel::detectCores(),   dispatcher = TRUE,  # Enable load balancing   within = \"mirai\",   # Use mirai for nested parallelization   workers_within = 4  # Nested workers per daemon )  # Apply to flow fl |> distribute(dist) |> collect()"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"slurm-managed-daemon-pools","dir":"Articles","previous_headings":"Distribution Patterns","what":"2. SLURM-Managed Daemon Pools","title":"Mirai backend: fast, scalable parallel execution","text":"Launch mirai daemons SLURM HPC-compliant distributed execution: daemons run SLURM jobs, ensuring compliance cluster policies providing low-latency task execution.","code":"# Configure SLURM-launched daemons dist <- use_mirai_slurm(   n = 16,                    # Number of daemon jobs   partition = \"compute\",     # SLURM partition   time = \"2:00:00\",         # Wall time   mem = \"32G\",              # Memory per daemon   cpus = 8,                 # CPUs per daemon   tls = TRUE,               # Use TLS encryption   port = 5555               # TLS port )  # Submit flow with SLURM daemons fl |>    distribute(dist) |>   submit()  # Returns immediately  # Monitor status deferred_status(handle) results <- deferred_collect(handle)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"ssh-tunneling-for-firewalled-clusters","dir":"Articles","previous_headings":"Distribution Patterns","what":"3. SSH Tunneling for Firewalled Clusters","title":"Mirai backend: fast, scalable parallel execution","text":"Connect remote nodes SSH, even direct connections blocked: SSH tunneling allows secure connections even restricted network environments.","code":"# SSH with tunneling (for firewalled nodes) dist <- use_mirai_ssh(   remotes = c(\"ssh://node1\", \"ssh://node2\", \"ssh://node3\"),   tunnel = TRUE,      # Use SSH tunneling   port = 40491       # Local port for tunnel )  # Direct SSH (when ports are open) dist <- use_mirai_ssh(   remotes = c(\"ssh://compute1\", \"ssh://compute2\"),   tunnel = FALSE )  fl |> distribute(dist) |> collect()"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"manual-daemon-setup","dir":"Articles","previous_headings":"Advanced Configuration","what":"Manual Daemon Setup","title":"Mirai backend: fast, scalable parallel execution","text":"full control mirai configuration:","code":"library(mirai) library(future)  # Set up custom TLS-secured daemons url <- host_url(tls = TRUE, port = 5555)  # Configure SLURM submission opts <- paste(   \"#SBATCH --partition=highmem\",   \"#SBATCH --time=04:00:00\",   \"#SBATCH --mem=64G\",   \"#SBATCH --job-name=my-analysis\",   sep = \"\\n\" )  cfg <- cluster_config(command = \"sbatch\", options = opts)  # Launch daemons daemons(n = 32, url = url, remote = cfg, dispatcher = TRUE)  # Use with parade via future plan(future.mirai::mirai_cluster) fl |> collect()"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"dynamic-scaling","dir":"Articles","previous_headings":"Advanced Configuration","what":"Dynamic Scaling","title":"Mirai backend: fast, scalable parallel execution","text":"Adjust daemon count based workload:","code":"# Start with a few daemons mirai_init(n = 4)  # Scale up for intensive processing mirai_scale(16) results <- collect(heavy_flow)  # Scale down when done mirai_scale(4)  # Check status mirai_status() mirai_dispatcher_status()"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"chunking-strategies","dir":"Articles","previous_headings":"Advanced Configuration","what":"Chunking Strategies","title":"Mirai backend: fast, scalable parallel execution","text":"Optimize task distribution mirai’s dispatcher:","code":"# Fine-grained parallelism (many small tasks) dist_mirai(   n = 16,   dispatcher = TRUE,     # Essential for load balancing   chunks_per_job = 1     # One group per task )  # Coarse-grained parallelism (fewer large tasks) dist_mirai(   n = 8,   dispatcher = FALSE,    # Direct task assignment   chunks_per_job = 10    # Bundle groups together )"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"example-1-large-scale-simulation-on-local-machine","dir":"Articles","previous_headings":"Practical Examples","what":"Example 1: Large-scale simulation on local machine","title":"Mirai backend: fast, scalable parallel execution","text":"","code":"library(parade)  # Parameter grid with 10,000 combinations grid <- expand.grid(   alpha = seq(0.1, 1, by = 0.1),   beta = seq(0.5, 5, by = 0.5),   n_sim = 1:100 )  # Use mirai to bypass connection limits fl <- flow(grid) |>   stage(\"simulate\", function(alpha, beta, n_sim) {     set.seed(n_sim)     data <- rgamma(1000, shape = alpha, rate = beta)     list(       mean = mean(data),       var = var(data),       ks_p = ks.test(data, \"pgamma\", alpha, beta)$p.value     )   }, schema = returns(mean = dbl(), var = dbl(), ks_p = dbl())) |>   distribute(dist_mirai(n = 200))  # 200 workers!  results <- collect(fl)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"example-2-remote-execution-on-hpc-cluster","dir":"Articles","previous_headings":"Practical Examples","what":"Example 2: Remote execution on HPC cluster","title":"Mirai backend: fast, scalable parallel execution","text":"","code":"# Development: test locally fl_dev <- fl |>    distribute(use_mirai_local(n = 4))  test_results <- fl_dev |> collect(limit = 100)  # Production: scale to cluster fl_prod <- fl |>   distribute(use_mirai_slurm(     n = 64,     partition = \"compute\",     time = \"12:00:00\",     mem = \"256G\",     account = \"project-123\"   ))  handle <- submit(fl_prod)  # Monitor progress while (!all(deferred_status(handle)$done)) {   status <- deferred_status(handle)   print(status)   Sys.sleep(30) }  final_results <- deferred_collect(handle)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"example-3-cross-platform-workflow","dir":"Articles","previous_headings":"Practical Examples","what":"Example 3: Cross-platform workflow","title":"Mirai backend: fast, scalable parallel execution","text":"","code":"# Detect environment and choose appropriate backend get_distribution <- function() {   if (Sys.getenv(\"SLURM_JOB_ID\") != \"\") {     # Running on SLURM     use_mirai_slurm(n = 32, partition = \"compute\")   } else if (file.exists(\"~/.ssh/compute_nodes\")) {     # Has SSH access to compute nodes     nodes <- readLines(\"~/.ssh/compute_nodes\")     use_mirai_ssh(remotes = nodes, tunnel = TRUE)   } else {     # Local development     use_mirai_local()   } }  # Portable workflow fl |>    distribute(get_distribution()) |>   collect()"},{"path":[]},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"optimizing-dispatcher-performance","dir":"Articles","previous_headings":"Performance Considerations","what":"Optimizing dispatcher performance","title":"Mirai backend: fast, scalable parallel execution","text":"dispatcher provides automatic load balancing adds slight overhead:","code":"# For homogeneous tasks (similar runtime) dist_mirai(n = 16, dispatcher = FALSE)  # For heterogeneous tasks (varying runtime) dist_mirai(n = 16, dispatcher = TRUE)  # For embarrassingly parallel workflows dist_mirai(   n = 32,   dispatcher = TRUE,   chunks_per_job = 1  # Maximum parallelism )"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"common-issues-and-solutions","dir":"Articles","previous_headings":"Troubleshooting","what":"Common issues and solutions","title":"Mirai backend: fast, scalable parallel execution","text":"Issue: “connect daemons” Issue: “Tasks distributing evenly” Issue: “SSH connection fails” Issue: “SLURM daemons starting”","code":"# Check daemon status mirai_status()  # Restart daemons mirai_stop() mirai_init() # Ensure dispatcher is enabled dist_mirai(n = 16, dispatcher = TRUE)  # Check dispatcher status mirai_dispatcher_status() # Test SSH manually first system(\"ssh node1 echo 'connected'\")  # Use verbose mode for debugging Sys.setenv(MIRAI_DEBUG = \"TRUE\") # Check SLURM submission manually mirai::daemons(   n = 1,   url = mirai::host_url(tls = TRUE),   remote = mirai::cluster_config(     command = \"sbatch\",     options = \"#SBATCH --partition=debug\\n#SBATCH --time=00:05:00\"   ) )  # Check SLURM queue system(\"squeue -u $USER\")"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"best-practices","dir":"Articles","previous_headings":"","what":"Best Practices","title":"Mirai backend: fast, scalable parallel execution","text":"Always cleanup daemons: Use stop_on_exit = TRUE (default) explicitly call mirai_stop() Choose appropriate daemon count: Local: number cores Remote: 2-4x number physical machines SLURM: Based partition limits Use TLS production: Enable encryption sensitive data Monitor resource usage: Track daemon performance Test locally scaling: Verify workflow correctness","code":"dist_mirai(n = 16, tls = TRUE, port = 5555) # During execution mirai_dispatcher_status()  # After completion mirai_status() # Development fl |> distribute(use_mirai_local(n = 2)) |> collect(limit = 10)  # Production fl |> distribute(use_mirai_slurm(n = 64)) |> submit()"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-mirai.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Mirai backend: fast, scalable parallel execution","text":"mirai backend extends parade’s capabilities : Unlimited parallelism: connection limits Flexible deployment: Local, SSH, SLURM Enhanced security: TLS SSH tunneling Better performance: Low-latency task execution Simple interface: Drop-replacement existing backends Whether ’re developing locally scaling hundreds nodes, mirai provides performance flexibility needed modern parallel computing workflows.","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"path-management-philosophy","dir":"Articles","previous_headings":"","what":"Path Management Philosophy","title":"Scratch-first paths & registries: project://, artifacts://, registry://","text":"parade uses scratch-first approach path management keeps code portable development production environments. Instead hardcoding file paths, parade uses URI-style aliases like artifacts://models/ registry://templates/ automatically resolve appropriate locations system. design principle solves common HPC workflows : Development happens laptop small datasets Production runs clusters different filesystem layouts Large outputs need go fast scratch storage, home directories Code portability essential reproducible research","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"the-alias-system","dir":"Articles","previous_headings":"","what":"The Alias System","title":"Scratch-first paths & registries: project://, artifacts://, registry://","text":"parade provides seven standard path aliases cover different types data outputs:","code":"library(parade)  paths_init() paths_get()"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"environment-detection-and-setup","dir":"Articles","previous_headings":"","what":"Environment Detection and Setup","title":"Scratch-first paths & registries: project://, artifacts://, registry://","text":"parade automatically detects computing environment configures appropriate defaults:","code":"# On laptop: uses project directories and system temp paths_init()  # On SLURM cluster: automatically detects $SLURM_TMPDIR, $SCRATCH paths_init()  # On PBS cluster: detects $PBS_O_WORKDIR, $TMPDIR   paths_init()  # Manual override for specific environments paths_init(profile = \"hpc\")"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"customizing-paths-for-hpc","dir":"Articles","previous_headings":"","what":"Customizing Paths for HPC","title":"Scratch-first paths & registries: project://, artifacts://, registry://","text":"production HPC workflows, redirect large outputs scratch storage:","code":"library(parade)  paths_init()  # Send big outputs & registries to scratch paths_set(   scratch   = \"/scratch/$USER\",   artifacts = \"/scratch/$USER/parade-artifacts\",    registry  = \"/scratch/$USER/parade-registry\" )  # Verify your configuration paths_get()"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"environment-variable-override","dir":"Articles","previous_headings":"Customizing Paths for HPC","what":"Environment Variable Override","title":"Scratch-first paths & registries: project://, artifacts://, registry://","text":"Set environment variables establish system-wide defaults:","code":"# In your .bashrc or job scripts export PARADE_SCRATCH=\"/fast/scratch/$USER\" export PARADE_ARTIFACTS=\"/fast/scratch/$USER/outputs\" export PARADE_REGISTRY=\"/shared/registry\" export PARADE_DATA=\"/shared/datasets\""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"in-sink-specifications","dir":"Articles","previous_headings":"Using Path Aliases in Practice","what":"In Sink Specifications","title":"Scratch-first paths & registries: project://, artifacts://, registry://","text":"","code":"# Artifacts go to fast scratch storage sink <- sink_spec(   fields = c(\"model\", \"metrics\"),   dir = \"artifacts://fits\",   template = \"{.stage}/{subject}-{session}.rds\" )  # Configuration files stay with project config_sink <- sink_spec(   fields = \"config\",   dir = \"config://runs\",    template = \"run-{.row_key}.yaml\" )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"in-file-operations","dir":"Articles","previous_headings":"Using Path Aliases in Practice","what":"In File Operations","title":"Scratch-first paths & registries: project://, artifacts://, registry://","text":"","code":"# Load reference data ref_data <- readRDS(\"data://reference/brain_atlas.rds\")  # Save large model to artifacts saveRDS(big_model, \"artifacts://models/v1/final_model.rds\")  # Store job template in registry template_path <- \"registry://templates/custom-slurm.tmpl\" writeLines(slurm_template, resolve_path(template_path))"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"in-batch-job-templates","dir":"Articles","previous_headings":"Using Path Aliases in Practice","what":"In Batch Job Templates","title":"Scratch-first paths & registries: project://, artifacts://, registry://","text":"","code":"# Template files use aliases for portability tmpl <- scaffold_batch_template(\"slurm\",                                out = \"registry://templates/parade-slurm.tmpl\",                                overwrite = TRUE)  # Generated jobs automatically resolve paths grid <- param_grid(subject = paste0(\"s\", 1:10)) job_script <- distribute(flow(grid), template = tmpl)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"path-resolution-functions","dir":"Articles","previous_headings":"","what":"Path Resolution Functions","title":"Scratch-first paths & registries: project://, artifacts://, registry://","text":"parade provides two main functions working paths:","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"path_here---direct-alias-resolution","dir":"Articles","previous_headings":"Path Resolution Functions","what":"path_here() - Direct alias resolution","title":"Scratch-first paths & registries: project://, artifacts://, registry://","text":"","code":"# Build paths from components model_dir <- path_here(\"artifacts\", \"models\", \"v2\") config_file <- path_here(\"config\", \"analysis.yaml\")  # Creates directories by default output_path <- path_here(\"artifacts\", \"results\", create = TRUE)  # Skip directory creation temp_path <- path_here(\"scratch\", \"temp\", create = FALSE)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"resolve_path---uri-style-path-resolution","dir":"Articles","previous_headings":"Path Resolution Functions","what":"resolve_path() - URI-style path resolution","title":"Scratch-first paths & registries: project://, artifacts://, registry://","text":"","code":"# Convert URI aliases to absolute paths model_path <- resolve_path(\"artifacts://models/final.rds\") data_path <- resolve_path(\"data://processed/clean_data.csv\")  # Works with regular paths too abs_path <- resolve_path(\"/absolute/path/file.txt\") rel_path <- resolve_path(\"relative/path/file.txt\")  # Control directory creation resolve_path(\"artifacts://new/dir/file.rds\", create = FALSE)"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"local-development","dir":"Articles","previous_headings":"Computing Environment Examples","what":"Local Development","title":"Scratch-first paths & registries: project://, artifacts://, registry://","text":"","code":"# Typical laptop setup paths_init() #> parade paths: project=/home/user/myproject; scratch=/tmp/RtmpXXX;  #>               data=/home/user/myproject/data; artifacts=/tmp/RtmpXXX/parade-artifacts  # Small datasets in project, outputs to temp saveRDS(small_model, \"artifacts://dev/test_model.rds\")"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"slurm-cluster","dir":"Articles","previous_headings":"Computing Environment Examples","what":"SLURM Cluster","title":"Scratch-first paths & registries: project://, artifacts://, registry://","text":"","code":"# Automatic SLURM detection paths_init() #> parade paths: project=/home/user/project; scratch=/tmp/slurm.123456;  #>               artifacts=/tmp/slurm.123456/parade-artifacts  # Or explicit configuration paths_set(   scratch = Sys.getenv(\"SLURM_TMPDIR\", \"/tmp\"),   artifacts = file.path(Sys.getenv(\"SLURM_TMPDIR\", \"/tmp\"), \"outputs\") )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"shared-hpc-system","dir":"Articles","previous_headings":"Computing Environment Examples","what":"Shared HPC System","title":"Scratch-first paths & registries: project://, artifacts://, registry://","text":"","code":"# System-wide configuration for all users paths_set(   data = \"/shared/datasets\",   artifacts = \"/scratch/$USER/parade-outputs\",    registry = \"/shared/parade-registry\" )  # Individual jobs automatically inherit these paths grid <- param_grid(dataset = c(\"train\", \"test\", \"validation\")) flow(grid) |>   stage(\"process\",          f = function(dataset) {           # Reads from shared location           data <- readRDS(paste0(\"data://\", dataset, \".rds\"))           # Writes to user's scratch             saveRDS(results, \"artifacts://processed/{dataset}.rds\")         })"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"separate-by-data-lifecycle","dir":"Articles","previous_headings":"Best Practices for Path Organization","what":"1. Separate by Data Lifecycle","title":"Scratch-first paths & registries: project://, artifacts://, registry://","text":"","code":"# Raw, immutable inputs \"data://raw/experiment_2024.csv\"  # Processed, intermediate results   \"artifacts://processed/clean_data.rds\"  # Final outputs and models \"artifacts://final/publication_model.rds\"  # Configuration and metadata \"config://profiles/hpc_settings.yaml\""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"use-hierarchical-structure","dir":"Articles","previous_headings":"Best Practices for Path Organization","what":"2. Use Hierarchical Structure","title":"Scratch-first paths & registries: project://, artifacts://, registry://","text":"","code":"# Organize by analysis stage \"artifacts://preprocessing/subject_data/\" \"artifacts://modeling/fitted_models/\"   \"artifacts://evaluation/performance_metrics/\" \"artifacts://visualization/figures/\"  # Or by experimental condition \"artifacts://condition_A/session_{1:10}/\" \"artifacts://condition_B/session_{1:10}/\""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"environment-specific-configuration","dir":"Articles","previous_headings":"Best Practices for Path Organization","what":"3. Environment-Specific Configuration","title":"Scratch-first paths & registries: project://, artifacts://, registry://","text":"","code":"# Development profile   if (interactive()) {   paths_set(     artifacts = \"artifacts://dev\",     scratch = tempdir()   ) }  # Production profile if (Sys.getenv(\"SLURM_JOB_ID\") != \"\") {   paths_set(     artifacts = \"/scratch/$USER/prod-outputs\",     registry = \"/shared/workflows\"     ) }"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-paths.html","id":"portable-code-patterns","dir":"Articles","previous_headings":"Best Practices for Path Organization","what":"4. Portable Code Patterns","title":"Scratch-first paths & registries: project://, artifacts://, registry://","text":"key insight parade’s path system separates logical organization physical storage, making analysis code portable across computing environment automatically optimizing local storage characteristics.","code":"# Good: Uses aliases, works everywhere load_reference <- function() {   readRDS(\"data://reference/brain_atlas.rds\") }  # Bad: Hardcoded paths, breaks on different systems load_reference <- function() {   readRDS(\"/home/user/data/brain_atlas.rds\")  }"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"SLURM script submission and monitoring from R","text":"parade provides comprehensive suite tools submit R script SLURM monitor interactively within R—shell access required. approach gives full power SLURM job scheduling maintaining convenience R-based workflow management.","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"key-monitoring-capabilities","dir":"Articles","previous_headings":"","what":"Key monitoring capabilities","title":"SLURM script submission and monitoring from R","text":"Live resource monitoring: Real-time CPU usage, memory consumption, job status Interactive dashboards: Single job (script_top()) multi-job (jobs_top()) monitoring Log streaming: View live output running jobs (script_tail()) Status checking: Quick job state queries (script_status()) Job management: Cancel, wait , track multiple jobs Error handling: Automatic detection failed jobs error diagnostics","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"quick-start-example","dir":"Articles","previous_headings":"","what":"Quick start example","title":"SLURM script submission and monitoring from R","text":"","code":"library(parade) paths_init()  # Optional: Configure site defaults slurm_defaults_set(partition=\"general\", time=\"2h\", cpus_per_task=16, mem=NA, persist=TRUE) slurm_template_set(\"registry://templates/parade-slurm.tmpl\")  # Submit a job job <- submit_slurm(\"scripts/train.R\", args = c(\"--fold\", \"1\"))  # Quick status check script_status(job)  # View recent log output script_tail(job, 80)  # Launch interactive monitor script_top(job, refresh = 2, nlog = 40)"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"single-job-monitoring-script_top","dir":"Articles","previous_headings":"Core monitoring functions","what":"Single job monitoring: script_top()","title":"SLURM script submission and monitoring from R","text":"script_top() function provides real-time, interactive dashboard monitoring single SLURM job: Features displayed: - Job identification: Name, SLURM job ID, assigned node - Resource usage: CPU percentage visual progress bar, allocated vs. used CPUs - Memory statistics: Average maximum RSS (Resident Set Size), virtual memory usage - Timing information: Elapsed time, CPU time used, uptime since monitoring started - Live log output: recent log lines job (configurable number) - Status tracking: Automatically detects jobs complete fail Parameters: - refresh: Update interval seconds (default: 2) - nlog: Number recent log lines display (default: 30) - clear: Whether clear screen updates smoother display (default: TRUE)","code":"job <- submit_slurm(\"analysis.R\") script_top(job, refresh = 2, nlog = 30, clear = TRUE)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"multi-job-dashboard-jobs_top","dir":"Articles","previous_headings":"Core monitoring functions","what":"Multi-job dashboard: jobs_top()","title":"SLURM script submission and monitoring from R","text":"Monitor multiple jobs simultaneously tabular overview plus detailed logs running jobs: Display format: - Summary line: Count jobs state (PENDING=1, RUNNING=2, etc.) - Job table: Compact view name, job ID, state, CPU%, allocated CPUs, max memory, elapsed time, node - Live log tail: Recent output first running job Flexible input formats:","code":"# Submit multiple jobs job1 <- submit_slurm(\"preprocess.R\", args = c(\"--dataset\", \"A\")) job2 <- submit_slurm(\"preprocess.R\", args = c(\"--dataset\", \"B\")) job3 <- submit_slurm(\"model_train.R\")  # Monitor all jobs together jobs_top(list(job1, job2, job3), refresh = 3, nlog = 20) # List of job objects jobs_top(list(job1, job2, job3))  # Data frame with job column df <- data.frame(name = c(\"job1\", \"job2\"), job = list(job1, job2)) jobs_top(df)  # Registry paths as strings jobs_top(c(\"registry://script-abc123\", \"registry://script-def456\"))"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"status-checking-script_status","dir":"Articles","previous_headings":"Essential job management functions","what":"Status checking: script_status()","title":"SLURM script submission and monitoring from R","text":"Get current job state without launching full monitor:","code":"status <- script_status(job) print(status) # # A tibble: 1 × 5 #   pending started running  done error #     <int>   <int>   <int> <int> <int> #        0       0       1     0     0  # Detailed view includes full batchtools information detailed <- script_status(job, detail = TRUE)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"log-viewing-script_tail","dir":"Articles","previous_headings":"Essential job management functions","what":"Log viewing: script_tail()","title":"SLURM script submission and monitoring from R","text":"Display recent log output job:","code":"# Show last 50 lines script_tail(job, n = 50)  # Quick check of recent output script_tail(job)  # Default: 200 lines"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"resource-metrics-script_metrics","dir":"Articles","previous_headings":"Essential job management functions","what":"Resource metrics: script_metrics()","title":"SLURM script submission and monitoring from R","text":"Get detailed resource usage statistics:","code":"metrics <- script_metrics(job) print(metrics) # $job_id # [1] \"12345\" #  # $state # [1] \"RUNNING\" #  # $cpu_pct # [1] 87.3 #  # $max_rss # [1] 1024000000  # bytes"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"job-completion-script_done","dir":"Articles","previous_headings":"Essential job management functions","what":"Job completion: script_done()","title":"SLURM script submission and monitoring from R","text":"Check job finished (successfully errors):","code":"if (script_done(job)) {   cat(\"Job completed!\\n\")   # Process results... } else {   cat(\"Job still running...\\n\") }"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"waiting-for-completion-script_await","dir":"Articles","previous_headings":"Advanced job management","what":"Waiting for completion: script_await()","title":"SLURM script submission and monitoring from R","text":"Block execution job completes:","code":"# Wait indefinitely script_await(job)  # Wait with timeout (5 minutes) script_await(job, timeout = 300)  # Custom polling interval script_await(job, timeout = 600, poll = 30)  # Check every 30 seconds"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"canceling-jobs-script_cancel","dir":"Articles","previous_headings":"Advanced job management","what":"Canceling jobs: script_cancel()","title":"SLURM script submission and monitoring from R","text":"Stop running jobs:","code":"script_cancel(job)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"finding-recent-jobs-script_find_latest","dir":"Articles","previous_headings":"Advanced job management","what":"Finding recent jobs: script_find_latest()","title":"SLURM script submission and monitoring from R","text":"Locate recently submitted jobs don’t job object:","code":"# Find 5 most recent jobs recent <- script_find_latest(n = 5) print(recent)  # Load a job from its registry path job <- script_load(recent$registry[1])"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"scenario-1-long-running-training-job","dir":"Articles","previous_headings":"Practical monitoring scenarios","what":"Scenario 1: Long-running training job","title":"SLURM script submission and monitoring from R","text":"","code":"# Submit training job with generous time limit job <- submit_slurm(\"train_model.R\",                      resources = list(time = \"24:00:00\", mem = \"32G\"))  # Quick status check if (script_status(job)$running > 0) {   cat(\"Training started successfully\\n\")      # Monitor for a few minutes, then leave it running   script_top(job, refresh = 5, nlog = 20) } else {   cat(\"Job may be queued or failed\\n\")   script_tail(job, 100)  # Check for error messages }"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"scenario-2-batch-processing-pipeline","dir":"Articles","previous_headings":"Practical monitoring scenarios","what":"Scenario 2: Batch processing pipeline","title":"SLURM script submission and monitoring from R","text":"","code":"# Submit preprocessing jobs for multiple datasets datasets <- c(\"dataset_A\", \"dataset_B\", \"dataset_C\") prep_jobs <- lapply(datasets, function(d) {   submit_slurm(\"preprocess.R\", args = c(\"--input\", d)) })  # Monitor all preprocessing jobs_top(prep_jobs, refresh = 5)  # Wait for all to complete lapply(prep_jobs, script_await)  # Submit analysis job that depends on preprocessing analysis_job <- submit_slurm(\"analyze_results.R\") script_top(analysis_job)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"scenario-3-troubleshooting-failed-jobs","dir":"Articles","previous_headings":"Practical monitoring scenarios","what":"Scenario 3: Troubleshooting failed jobs","title":"SLURM script submission and monitoring from R","text":"","code":"job <- submit_slurm(\"problematic_script.R\")  # Check if job completed if (script_done(job)) {   status <- script_status(job)      if (status$error > 0) {     cat(\"Job failed! Checking logs...\\n\")          # View full log output for debugging     script_tail(job, n = 500)          # Get log file paths for detailed analysis     logs <- script_logs(job)     cat(\"Log files:\", logs$path, \"\\n\")   } else {     cat(\"Job completed successfully\\n\")   } }"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"resource-optimization","dir":"Articles","previous_headings":"Tips for efficient monitoring","what":"Resource optimization","title":"SLURM script submission and monitoring from R","text":"Monitor CPU usage: Look jobs using less expected CPU% - may indicate /O bottlenecks Track memory patterns: MaxRSS shows peak memory usage; compare requested memory Watch memory leaks: Increasing AveRSS time may indicate memory management issues","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"interactive-monitoring-best-practices","dir":"Articles","previous_headings":"Tips for efficient monitoring","what":"Interactive monitoring best practices","title":"SLURM script submission and monitoring from R","text":"Use appropriate refresh rates: Fast updates (1-2s) active debugging, slower (5-10s) long jobs Adjust log lines: lines (nlog = 100) detailed debugging, fewer (nlog = 10) overview Background monitoring: Use clear = FALSE capturing output running non-interactively","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"multi-job-management","dir":"Articles","previous_headings":"Tips for efficient monitoring","what":"Multi-job management","title":"SLURM script submission and monitoring from R","text":"Group related jobs: Monitor job families together jobs_top() Stagger job submission: Avoid overwhelming scheduler simultaneous submissions Use descriptive names: Job names appear monitoring displays—make informative","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"common-monitoring-issues","dir":"Articles","previous_headings":"Error handling and troubleshooting","what":"Common monitoring issues","title":"SLURM script submission and monitoring from R","text":"“fetch metrics” error: - Ensure SLURM commands (squeue, sstat, sacct) available - Check job ID valid job hasn’t purged SLURM records - Verify SLURM permissions cluster connectivity Empty log output: - Job may started writing output yet - Check job status—may pending queue - Verify output redirection SLURM template Memory metrics showing NA: - metrics unavailable job starts running - SLURM accounting may enabled cluster - Try script_metrics() directly see raw data","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-scripts-monitoring.html","id":"recovery-strategies","dir":"Articles","previous_headings":"Error handling and troubleshooting","what":"Recovery strategies","title":"SLURM script submission and monitoring from R","text":"Lost job objects: Monitor jobs different R sessions: comprehensive monitoring system makes SLURM job management convenient local R execution providing scalability resource management benefits cluster computing.","code":"# Find recent jobs recent <- script_find_latest(pattern = \"train\") job <- script_load(recent$registry[1]) # Jobs persist across R sessions via registry job_path <- \"registry://script-abc123\" job <- script_load(job_path) script_top(job)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"what-are-sinks-and-artifacts","dir":"Articles","previous_headings":"","what":"What are sinks and artifacts?","title":"Artifacts: clean side-effects, atomic writes, and manifests","text":"Sinks parade provide powerful mechanism persisting large computational results disk instead keeping memory. stages produce big objects (models, large datasets, complex results), sinks automatically write files return lightweight file references instead.","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"key-benefits","dir":"Articles","previous_headings":"What are sinks and artifacts?","what":"Key benefits","title":"Artifacts: clean side-effects, atomic writes, and manifests","text":"Memory efficiency: Large objects don’t accumulate memory across pipeline stages Persistence: Results survive R session crashes can accessed later Atomic writes: Files written safely without corruption risks Metadata tracking: Automatic checksums, file sizes, timestamps Flexible organization: Configurable directory structures file naming","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"define-a-sink","dir":"Articles","previous_headings":"","what":"1) Define a sink","title":"Artifacts: clean side-effects, atomic writes, and manifests","text":"sink specification defines persist stage outputs:","code":"sink <- sink_spec(   fields   = c(\"model\",\"metrics\"),       # Which fields to persist   dir      = \"artifacts://fits\",         # Base directory (supports path aliases)   template = \"{.stage}/{subject}/{session}-{.row_key}\",   # File path template   format   = \"rds\",                      # File format (currently only RDS)   overwrite = \"skip\",                    # \"skip\", \"overwrite\", or \"error\"   sidecar   = \"json\",                    # Metadata format: \"json\" or \"none\"   compress  = \"gzip\",                    # RDS compression: \"gzip\", \"xz\", \"bzip2\"   autoload  = TRUE                       # Auto-load artifacts in downstream stages )"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"key-parameters-explained","dir":"Articles","previous_headings":"1) Define a sink","what":"Key parameters explained","title":"Artifacts: clean side-effects, atomic writes, and manifests","text":"fields: Character vector output field names persist disk dir: Base directory path (can use aliases like artifacts://, function) {.stage}: Current stage name {.field}: Field written {.row_key}: Unique hash row parameters Plus columns parameter grid (e.g., {subject}, {session}) overwrite: file exists: \"skip\" (default), \"overwrite\", \"error\" sidecar: JSON metadata SHA256 hash, file size, timestamps","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"directory-structure-examples","dir":"Articles","previous_headings":"1) Define a sink","what":"Directory structure examples","title":"Artifacts: clean side-effects, atomic writes, and manifests","text":"","code":"# Simple flat structure sink_spec(fields = \"result\", dir = \"artifacts://output\") # Files: artifacts://output/stage_name/field/row_hash.rds  # Hierarchical by parameters   sink_spec(fields = \"model\",            dir = \"artifacts://models\",           template = \"{.stage}/{subject}/run_{session}\") # Files: artifacts://models/fit_models/s01/run_1.rds  # Custom function for complex logic sink_spec(fields = \"data\",            dir = function(row, stage, field) {             paste0(\"results/\", if(row$condition == \"control\") \"ctrl\" else \"exp\")           })"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"use-it-in-a-stage","dir":"Articles","previous_headings":"","what":"2) Use it in a stage","title":"Artifacts: clean side-effects, atomic writes, and manifests","text":"use sink, specify stage definition declare outputs artifacts:","code":"# Create parameter grid grid <- param_grid(   subject = c(\"s01\", \"s02\", \"s03\"),   session = 1:2,   seed = 1:5 )  # Define workflow with sink fl <- flow(grid, seed_col = \"seed\") |>   stage(\"fit\",         f = function(subject, session) {           # Simulate expensive computation producing large objects           model <- lm(rnorm(1000) ~ rnorm(1000))  # Large model object           metrics <- tibble::tibble(             rmse = runif(1),             r2 = runif(1),             aic = runif(1, 100, 200)           )                      list(model = model, metrics = metrics)         },         schema = schema(model = artifact(), metrics = artifact()),  # Declare as artifacts         sink = sink)  # Attach the sink"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"what-happens-during-execution","dir":"Articles","previous_headings":"2) Use it in a stage","what":"What happens during execution","title":"Artifacts: clean side-effects, atomic writes, and manifests","text":"run collect(), parade: Executes function captures returned list Identifies artifact fields (declared artifact()) Writes artifact disk using sink specification Creates file references metadata (path, bytes, sha256, written, existed) Returns row file references instead original objects result tibble artifact fields contain file reference objects instead original data:","code":"results <- collect(fl) # results$model[[1]] contains:  # tibble(path = \"/path/to/file.rds\", bytes = 1024, sha256 = \"abc123...\",  #        written = TRUE, existed = FALSE)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"reading-artifacts-back","dir":"Articles","previous_headings":"","what":"3) Reading artifacts back","title":"Artifacts: clean side-effects, atomic writes, and manifests","text":"several ways access persisted artifacts:","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"automatic-loading-in-downstream-stages","dir":"Articles","previous_headings":"3) Reading artifacts back","what":"Automatic loading in downstream stages","title":"Artifacts: clean side-effects, atomic writes, and manifests","text":"autoload = TRUE (default), artifacts automatically loaded used downstream stages:","code":"fl <- fl |>   stage(\"analyze\",          f = function(model, metrics) {  # Automatically loads from disk           # model is the actual lm object, not a file reference           summary_stats <- broom::tidy(model)           combined_metrics <- dplyr::bind_rows(metrics, summary_stats)           list(analysis = combined_metrics)         },         schema = schema(analysis = tbl()))"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"manual-loading","dir":"Articles","previous_headings":"3) Reading artifacts back","what":"Manual loading","title":"Artifacts: clean side-effects, atomic writes, and manifests","text":"manual access, use file path reference:","code":"# Get results with file references results <- collect(fl)  # Load a specific artifact manually first_model <- readRDS(results$model[[1]]$path)  # Or use the sink's reader function (if custom) first_model <- sink$reader(results$model[[1]]$path)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"using-the-manifest-system","dir":"Articles","previous_headings":"3) Reading artifacts back","what":"Using the manifest system","title":"Artifacts: clean side-effects, atomic writes, and manifests","text":"manifest function provides powerful way explore query artifacts:","code":"# View all artifacts in a directory manifest(\"artifacts://fits\") |>   dplyr::arrange(desc(bytes)) |>      # Sort by file size   dplyr::slice_head(n = 10)           # Top 10 largest files  # Filter by specific patterns manifest(\"artifacts://fits\") |>   dplyr::filter(     grepl(\"s01\", path),               # Subject s01 only     bytes > 1000                      # Files larger than 1KB   ) |>   dplyr::select(path, bytes, sha256, mtime)  # Load artifacts based on manifest query large_models <- manifest(\"artifacts://fits\") |>   dplyr::filter(grepl(\"model\", path), bytes > 5000) |>   dplyr::mutate(artifact = purrr::map(path, readRDS))"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"manifest-columns","dir":"Articles","previous_headings":"3) Reading artifacts back","what":"Manifest columns","title":"Artifacts: clean side-effects, atomic writes, and manifests","text":"manifest includes rich metadata artifact: path: Full file path bytes: File size bytes sha256: SHA256 checksum integrity verification mtime: File modification timestamp ctime: File creation timestamp existed: Whether file existed writing (sidecar) written: Whether file written successfully (sidecar)","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"use-sinks-for","dir":"Articles","previous_headings":"When to use sinks vs. regular returns","what":"Use sinks for:","title":"Artifacts: clean side-effects, atomic writes, and manifests","text":"Large objects: Models, big datasets, complex nested structures Persistent results: Outputs want access across R sessions Memory management: workflow memory usage becomes problematic Reusable artifacts: Results multiple downstream analyses use Long computations: Expensive results don’t want lose recompute","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"use-regular-returns-for","dir":"Articles","previous_headings":"When to use sinks vs. regular returns","what":"Use regular returns for:","title":"Artifacts: clean side-effects, atomic writes, and manifests","text":"Small objects: Simple scalars, small vectors, summary statistics Temporary results: Intermediate values needed next stage Fast computations: Results cheap recompute Non-serializable objects: Objects don’t save well (connections, environments)","code":""},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"mixed-usage-example","dir":"Articles","previous_headings":"When to use sinks vs. regular returns","what":"Mixed usage example","title":"Artifacts: clean side-effects, atomic writes, and manifests","text":"","code":"stage(\"process\",       f = function(subject, session) {         # Heavy computation         big_model <- train_neural_network(data)         processed_data <- preprocess_large_dataset(data)                   # Light summaries           n_rows <- nrow(processed_data)         model_accuracy <- evaluate_model(big_model)                  list(           model = big_model,          # → sink (large)           data = processed_data,      # → sink (large)            n_rows = n_rows,           # → regular return (small)           accuracy = model_accuracy   # → regular return (small)         )       },       schema = schema(         model = artifact(),    # Will be persisted         data = artifact(),     # Will be persisted           n_rows = int(),        # Regular return         accuracy = dbl()       # Regular return       ),       sink = my_sink)"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-sinks.html","id":"error-handling-and-overwrite-policies","dir":"Articles","previous_headings":"","what":"Error handling and overwrite policies","title":"Artifacts: clean side-effects, atomic writes, and manifests","text":"Configure sinks handle existing files: Recommendation: Use \"skip\" development faster iteration, \"overwrite\" production runs, \"error\" need ensure accidental overwrites.","code":"# Skip writing if file exists (default - fastest for reruns) sink_spec(fields = \"result\", dir = \"artifacts://\", overwrite = \"skip\")  # Always overwrite existing files   sink_spec(fields = \"result\", dir = \"artifacts://\", overwrite = \"overwrite\")  # Error if file exists (strict mode) sink_spec(fields = \"result\", dir = \"artifacts://\", overwrite = \"error\")"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"introduction-to-distributed-computing-with-parade","dir":"Articles","previous_headings":"","what":"Introduction to distributed computing with parade","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"parade separates workflow definition (DAG) execution strategy (distribution plan), allowing run computational pipeline locally development SLURM clusters production. separation enables: Local development: Test workflows laptop dist_local() Cluster scaling: Execute workflow SLURM dist_slurm() Resource optimization: Fine-tune parallelization resource allocation Flexible chunking: Balance job granularity scheduling efficiency key insight parade workflows portable - define computation choose distribute based current needs.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"local-distribution-for-development","dir":"Articles","previous_headings":"Local vs. SLURM distribution strategies","what":"Local distribution for development","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"","code":"library(parade) library(progressr)  # Initialize project structure paths_init()  # Create a parameter grid grid <- param_grid(   subject = c(\"sub01\", \"sub02\", \"sub03\"),   session = 1:2,   condition = c(\"A\", \"B\") ) # Results in 12 rows (3×2×2)  # Define a simple workflow fl <- flow(grid) |>   stage(\"process\", function(subject, session, condition) {     # Simulate computational work     Sys.sleep(runif(1, 0.1, 0.5))     list(result = paste(subject, session, condition, sep = \"_\"))   })  # Local development: test on a subset fl_local <- fl |>    distribute(dist_local(     by = \"subject\",           # Group by subject     within = \"multisession\",  # Use parallel workers within each group       workers_within = 2        # Use 2 cores per group   ))"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"slurm-distribution-for-production","dir":"Articles","previous_headings":"Local vs. SLURM distribution strategies","what":"SLURM distribution for production","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"workflow can scaled SLURM cluster:","code":"# Row-wise: one job per parameter combination fl_rowwise <- fl |> distribute(dist_slurm(   by = NULL,                                      # No grouping - each row is independent   within = \"multisession\",                        # Parallel execution within each job   workers_within = 4,                             # 4 workers per job   resources = batch_resources(                    # SLURM resource specification     nodes = 1,      cpus_per_task = 4,      time = \"30min\",     mem = \"8GB\"   ),   chunks_per_job = 1                             # One parameter row per job ))  # Subject-wise: group related work into fewer jobs fl_subject <- fl |> distribute(dist_slurm(   by = \"subject\",                                 # Group by subject   within = \"multisession\",                        # Parallel within each job   workers_within = 8,                             # More workers since we're grouping   resources = batch_resources(     nodes = 1,      cpus_per_task = 8,      time = \"2h\",                                  # Longer time for grouped work     mem = \"16GB\"   ),   chunks_per_job = 1                             # One subject per job ))"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"understanding-grouping-strategies","dir":"Articles","previous_headings":"Local vs. SLURM distribution strategies","what":"Understanding grouping strategies","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"parameter controls parameter grid partitioned: Pro: Maximum parallelization, fine-grained control Con: Many small jobs, scheduling overhead Best : Independent tasks benefit dedicated resources Pro: Fewer jobs, shared setup costs, better resource utilization Con: Less parallelization, potential load imbalance Best : Tasks share expensive initialization (data loading, model setup)","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"understanding-the-parallelization-hierarchy","dir":"Articles","previous_headings":"Resource allocation and optimization","what":"Understanding the parallelization hierarchy","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"parade provides two levels parallelization control: Job-level parallelization: many SLURM jobs submit Within-job parallelization: many tasks run concurrently within job","code":"# Example: 24 parameter combinations, grouped by subject (3 subjects × 8 combinations each) grid <- param_grid(   subject = c(\"sub01\", \"sub02\", \"sub03\"),   session = 1:4,    run = 1:2 ) # 24 total combinations  fl <- flow(grid) |> stage(\"analyze\", expensive_computation)  # Strategy 1: One job per subject, parallel within fl |> distribute(dist_slurm(   by = \"subject\",                    # 3 jobs (one per subject)   workers_within = 8,                # 8 parallel tasks per job   chunks_per_job = 1,                # Each subject in one job   resources = batch_resources(     cpus_per_task = 8,               # Match workers_within     time = \"4h\",     mem = \"32GB\"   ) ))  # Strategy 2: Split large groups across multiple jobs fl |> distribute(dist_slurm(   by = \"subject\",                    # Group by subject first   workers_within = 4,                # 4 parallel tasks per job     chunks_per_job = 2,                # Split each subject into 2 jobs   resources = batch_resources(       # Results in 6 total jobs (3 subjects × 2)     cpus_per_task = 4,               # Match workers_within     time = \"2h\",                     # Shorter time per chunk     mem = \"16GB\"   ) ))"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"throttling-concurrent-execution","dir":"Articles","previous_headings":"Resource allocation and optimization","what":"Throttling concurrent execution","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"workers_within parameter acts like xargs -P, limiting concurrent tasks within SLURM job: Guidelines workers_within: - Match slightly exceed cpus_per_task - Consider memory usage: total_memory / workers_within per task - Account /O bottlenecks shared filesystems - Start conservatively increase based monitoring","code":"# Without throttling: all tasks run simultaneously (may overwhelm resources) dist_slurm(by = \"subject\", workers_within = NULL)  # With throttling: limit to 4 concurrent tasks per job dist_slurm(by = \"subject\", workers_within = 4)"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"optimizing-job-granularity","dir":"Articles","previous_headings":"Advanced chunking strategies","what":"Optimizing job granularity","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"chunks_per_job parameter controls groups split across SLURM jobs:","code":"# Large groups: split for better parallelization grid <- param_grid(   subject = \"subject01\",  # One subject   trial = 1:1000          # But 1000 trials )  fl <- flow(grid) |> stage(\"process_trial\", trial_analysis)  # Split into smaller chunks for better scheduling fl |> distribute(dist_slurm(   by = \"subject\",                    # Group by subject   chunks_per_job = 100,              # 100 trials per job → 10 jobs total   workers_within = 4,                # 4 parallel trials per job   resources = batch_resources(     cpus_per_task = 4,     time = \"1h\",                     # Shorter jobs are easier to schedule     mem = \"8GB\"   ) ))"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"multi-dimensional-grouping","dir":"Articles","previous_headings":"Advanced chunking strategies","what":"Multi-dimensional grouping","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"","code":"# Complex parameter space grid <- param_grid(   subject = c(\"s01\", \"s02\", \"s03\"),   condition = c(\"rest\", \"task\"),   session = 1:3 )  # Group by multiple columns fl |> distribute(dist_slurm(   by = c(\"subject\", \"condition\"),    # One job per subject-condition pair   workers_within = 3,                # Parallel across sessions     chunks_per_job = 1,   resources = batch_resources(     cpus_per_task = 3,     time = \"30min\",     mem = \"4GB\"   ) ))"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"deferred-execution-workflow","dir":"Articles","previous_headings":"SLURM job submission and monitoring","what":"Deferred execution workflow","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"workflow now running cluster. Use commands monitor progress:","code":"# 1. Validate workflow locally (recommended) preflight(fl_subject)  # 2. Submit to SLURM (returns immediately) d <- submit(fl_subject, mode = \"index\") # Check job status deferred_status(d, show_progress = TRUE)  # Monitor logs in real-time  # Use scripts/parade_tail.R for continuous monitoring  # Collect completed results results <- deferred_collect(d, how = \"index\")"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"resource-specification-examples","dir":"Articles","previous_headings":"SLURM job submission and monitoring","what":"Resource specification examples","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"","code":"# CPU-intensive tasks resources <- batch_resources(   partition = \"standard\",   nodes = 1,   cpus_per_task = 16,   time = \"4h\",   mem = \"32GB\" )  # Memory-intensive tasks   resources <- batch_resources(   partition = \"himem\",    nodes = 1,   cpus_per_task = 4,   time = \"8h\",    mem = \"128GB\" )  # GPU computing resources <- batch_resources(   partition = \"gpu\",   nodes = 1,   ntasks_per_node = 1,   cpus_per_task = 8,   gres = \"gpu:1\",   time = \"2h\",   mem = \"24GB\" )  # Multi-node MPI (if supported by your workflow) resources <- batch_resources(   partition = \"standard\",   nodes = 4,   ntasks_per_node = 16,    time = \"12h\",   mem = \"64GB\" )"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"pattern-1-development-production-scaling","dir":"Articles","previous_headings":"Common patterns and best practices","what":"Pattern 1: Development → Production scaling","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"","code":"# Development: quick test on subset grid_dev <- param_grid(subject = \"sub01\", session = 1:2) fl_dev <- flow(grid_dev) |> distribute(dist_local(workers_within = 2))  # Production: full dataset on cluster   grid_prod <- param_grid(subject = paste0(\"sub\", 1:100), session = 1:4) fl_prod <- flow(grid_prod) |> distribute(dist_slurm(   by = \"subject\",   workers_within = 4,   chunks_per_job = 1,   resources = batch_resources(cpus_per_task = 4, time = \"2h\", mem = \"16GB\") ))"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"pattern-2-adaptive-chunking-based-on-data-size","dir":"Articles","previous_headings":"Common patterns and best practices","what":"Pattern 2: Adaptive chunking based on data size","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"","code":"# Small datasets: group more aggressively small_fl |> distribute(dist_slurm(   by = \"subject\",    chunks_per_job = 1,        # One job per subject   workers_within = 8         # High parallelism within job ))  # Large datasets: split into smaller chunks   large_fl |> distribute(dist_slurm(   by = \"subject\",   chunks_per_job = 4,        # Split each subject across 4 jobs   workers_within = 2         # Lower parallelism per job ))"},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"problem-jobs-fail-with-memory-errors","dir":"Articles","previous_headings":"Common pitfalls and solutions","what":"Problem: Jobs fail with memory errors","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"Solution: Increase memory allocation reduce workers_within:","code":"# Before: likely to exceed memory dist_slurm(workers_within = 16, resources = batch_resources(mem = \"8GB\"))  # After: more conservative memory usage dist_slurm(workers_within = 4, resources = batch_resources(mem = \"8GB\")) # Now each task gets ~2GB instead of ~512MB"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"problem-many-short-jobs-overwhelming-the-scheduler","dir":"Articles","previous_headings":"Common pitfalls and solutions","what":"Problem: Many short jobs overwhelming the scheduler","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"Solution: Increase chunks_per_job create fewer, longer-running jobs:","code":"# Before: 1000 small jobs dist_slurm(by = NULL, chunks_per_job = 1)  # One job per parameter row  # After: 100 medium jobs dist_slurm(by = NULL, chunks_per_job = 10)  # 10 parameter rows per job"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"problem-load-imbalance-in-grouped-jobs","dir":"Articles","previous_headings":"Common pitfalls and solutions","what":"Problem: Load imbalance in grouped jobs","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"Solution: Use row-wise distribution smaller chunks:","code":"# Before: uneven subject sizes cause load imbalance dist_slurm(by = \"subject\", chunks_per_job = 1)  # After: more even distribution dist_slurm(by = NULL, chunks_per_job = 5)  # 5 rows per job regardless of subject"},{"path":"https://bbuchsbaum.github.io/parade/articles/parade-slurm-distribution.html","id":"problem-io-bottlenecks-on-shared-filesystems","dir":"Articles","previous_headings":"Common pitfalls and solutions","what":"Problem: I/O bottlenecks on shared filesystems","title":"Distribution: local and SLURM (barriers, throttling, chunking)","text":"Solution: Reduce concurrent tasks consider /O patterns:","code":"# Before: high I/O contention   dist_slurm(workers_within = 32)  # After: reduced contention dist_slurm(workers_within = 4)  # Fewer concurrent file operations"},{"path":"https://bbuchsbaum.github.io/parade/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Parade Authors. Author, maintainer.","code":""},{"path":"https://bbuchsbaum.github.io/parade/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Authors P (2025). parade: Declarative Parallel Dataflow Future/Furrr. R package version 0.11.0, https://bbuchsbaum.github.io/parade/.","code":"@Manual{,   title = {parade: Declarative Parallel Dataflow with Future/Furrr},   author = {Parade Authors},   year = {2025},   note = {R package version 0.11.0},   url = {https://bbuchsbaum.github.io/parade/}, }"},{"path":"https://bbuchsbaum.github.io/parade/index.html","id":"parade-v0110--slurm-defaults-naomit--profiles--jobs_top","dir":"","previous_headings":"","what":"Declarative Parallel Dataflow with Future/Furrr","title":"Declarative Parallel Dataflow with Future/Furrr","text":"NA omit() drop resources: batch_resources() now removes NA/omit() values flags like --mem can intentionally omitted per site. Configurable defaults parade.json: slurm_defaults_set() / slurm_defaults_get() optional persistence; slurm_template_set() pin default template. Merged resources via slurm_resources(); submit_slurm() uses defaults automatically. jobs_top(): multi-job live dashboard alongside script_top(). Config search precedence: PARADE_CONFIG file → <project>/parade.json → <project>/.parade/parade.json.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/artifact.html","id":null,"dir":"Reference","previous_headings":"","what":"Alias for file_ref function — artifact","title":"Alias for file_ref function — artifact","text":"Alias file_ref function","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/artifact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alias for file_ref function — artifact","text":"","code":"artifact()"},{"path":"https://bbuchsbaum.github.io/parade/reference/artifact.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alias for file_ref function — artifact","text":"File reference schema","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/batch_resources.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a list of SLURM resources with friendly parsing — batch_resources","title":"Create a list of SLURM resources with friendly parsing — batch_resources","text":"Builds resource specification SLURM job submission convenient parsing time formats memory specifications. Handles common abbreviations normalizes values batchtools compatibility.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/batch_resources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a list of SLURM resources with friendly parsing — batch_resources","text":"","code":"batch_resources(   partition = NULL,   time = NULL,   nodes = NULL,   ntasks = NULL,   ntasks_per_node = NULL,   cpus_per_task = NULL,   ncpus = NULL,   mem = NULL,   account = NULL,   qos = NULL,   modules = NULL,   omp_num_threads = NULL )"},{"path":"https://bbuchsbaum.github.io/parade/reference/batch_resources.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a list of SLURM resources with friendly parsing — batch_resources","text":"partition SLURM partition name time Time limit (accepts formats like '2h', '90min', 'H:MM:SS') nodes Number nodes required ntasks Number tasks ntasks_per_node Number tasks per node cpus_per_task CPUs per task ncpus Alias cpus_per_task mem Memory requirement (e.g., \"4GB\", \"1000MB\") account SLURM account charge qos Quality service level modules Environment modules load omp_num_threads OpenMP thread count","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/batch_resources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a list of SLURM resources with friendly parsing — batch_resources","text":"Named list suitable batchtools submitJobs resources","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/batch_resources.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a list of SLURM resources with friendly parsing — batch_resources","text":"","code":"batch_resources(time = \"2h\", mem = \"4GB\", cpus_per_task = 4) #> $time #> [1] \"2:00:00\" #>  #> $cpus_per_task #> [1] 4 #>  #> $mem #> [1] \"4GB\" #>  batch_resources(partition = \"gpu\", time = \"30min\") #> $partition #> [1] \"gpu\" #>  #> $time #> [1] \"0:30:00\" #>"},{"path":"https://bbuchsbaum.github.io/parade/reference/chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a character type specification — chr","title":"Create a character type specification — chr","text":"Create character type specification","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a character type specification — chr","text":"","code":"chr()"},{"path":"https://bbuchsbaum.github.io/parade/reference/chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a character type specification — chr","text":"character vector prototype schema definitions","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/chr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a character type specification — chr","text":"","code":"schema(name = chr()) #> # A tibble: 0 × 1 #> # ℹ 1 variable: name <chr>"},{"path":"https://bbuchsbaum.github.io/parade/reference/collect.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute a parade flow and collect results — collect","title":"Execute a parade flow and collect results — collect","text":"Runs stages flow, handling dependencies parallelization according flow's distribution settings. Returns tibble results stages.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/collect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute a parade flow and collect results — collect","text":"","code":"collect(   fl,   engine = c(\"future\", \"sequential\"),   workers = NULL,   scheduling = 1,   seed_furrr = TRUE,   .progress = interactive(),   limit = NULL )"},{"path":"https://bbuchsbaum.github.io/parade/reference/collect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute a parade flow and collect results — collect","text":"fl parade_flow object stages execute engine Execution engine: \"future\" (default) \"sequential\" workers Number workers parallel execution scheduling Furrr scheduling parameter (0 < value <= 1 chunk size) seed_furrr Whether enable deterministic random number generation .progress Whether display progress bars (default: interactive()) limit Optional limit number grid rows process","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/collect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute a parade flow and collect results — collect","text":"tibble containing results executed stages","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/collect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute a parade flow and collect results — collect","text":"","code":"# \\donttest{ grid <- data.frame(x = 1:3) fl <- flow(grid) |>   stage(\"double\", function(x) x * 2, schema = returns(result = dbl())) results <- collect(fl) # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/contract.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a validation contract for stage outputs — contract","title":"Define a validation contract for stage outputs — contract","text":"Define validation contract stage outputs","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/contract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a validation contract for stage outputs — contract","text":"","code":"contract(...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/contract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a validation contract for stage outputs — contract","text":"... Named field specifications validation","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/contract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a validation contract for stage outputs — contract","text":"parade_contract object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/contract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a validation contract for stage outputs — contract","text":"","code":"my_contract <- contract(result = ctr_field(\"result\", min = 0))"},{"path":"https://bbuchsbaum.github.io/parade/reference/ctr_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a contract field specification — ctr_field","title":"Define a contract field specification — ctr_field","text":"Define contract field specification","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/ctr_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a contract field specification — ctr_field","text":"","code":"ctr_field(   name,   class = NULL,   length = 1L,   predicate = NULL,   min = NULL,   max = NULL,   choices = NULL,   allow_na = TRUE,   allow_null = FALSE )"},{"path":"https://bbuchsbaum.github.io/parade/reference/ctr_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a contract field specification — ctr_field","text":"name Field name validate class Expected class(es) field length Expected length (default 1) predicate Custom validation function min Minimum allowed value (numeric fields) max Maximum allowed value (numeric fields) choices Valid choices (categorical fields) allow_na Whether NA values allowed allow_null Whether NULL values allowed","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/ctr_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a contract field specification — ctr_field","text":"parade_ctr_field object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/ctr_field.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a contract field specification — ctr_field","text":"","code":"ctr_field(\"score\", class = \"numeric\", min = 0, max = 100) #> $name #> [1] \"score\" #>  #> $class #> [1] \"numeric\" #>  #> $length #> [1] 1 #>  #> $predicate #> NULL #>  #> $min #> [1] 0 #>  #> $max #> [1] 100 #>  #> $choices #> NULL #>  #> $allow_na #> [1] TRUE #>  #> $allow_null #> [1] FALSE #>  #> attr(,\"class\") #> [1] \"parade_ctr_field\""},{"path":"https://bbuchsbaum.github.io/parade/reference/dbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a double/numeric type specification — dbl","title":"Create a double/numeric type specification — dbl","text":"Create double/numeric type specification","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a double/numeric type specification — dbl","text":"","code":"dbl()"},{"path":"https://bbuchsbaum.github.io/parade/reference/dbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a double/numeric type specification — dbl","text":"double vector prototype schema definitions","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a double/numeric type specification — dbl","text":"","code":"schema(result = dbl()) #> # A tibble: 0 × 1 #> # ℹ 1 variable: result <dbl>"},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_await.html","id":null,"dir":"Reference","previous_headings":"","what":"Wait for deferred execution to complete — deferred_await","title":"Wait for deferred execution to complete — deferred_await","text":"Wait deferred execution complete","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_await.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wait for deferred execution to complete — deferred_await","text":"","code":"deferred_await(d, timeout = Inf, poll = 10)"},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_await.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wait for deferred execution to complete — deferred_await","text":"d parade_deferred object timeout Maximum time wait seconds poll Polling interval seconds","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_await.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wait for deferred execution to complete — deferred_await","text":"input deferred object (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_await.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wait for deferred execution to complete — deferred_await","text":"","code":"# \\donttest{ deferred <- submit(fl) #> Error: object 'fl' not found deferred_await(deferred, timeout = 600) #> Error: object 'deferred' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_cancel.html","id":null,"dir":"Reference","previous_headings":"","what":"Cancel deferred execution jobs — deferred_cancel","title":"Cancel deferred execution jobs — deferred_cancel","text":"Cancel deferred execution jobs","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_cancel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cancel deferred execution jobs — deferred_cancel","text":"","code":"deferred_cancel(d, which = c(\"running\", \"all\"))"},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_cancel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cancel deferred execution jobs — deferred_cancel","text":"d parade_deferred object jobs cancel: \"running\" \"\"","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_cancel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cancel deferred execution jobs — deferred_cancel","text":"input deferred object (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_cancel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cancel deferred execution jobs — deferred_cancel","text":"","code":"# \\donttest{ deferred <- submit(fl) #> Error: object 'fl' not found deferred_cancel(deferred, which = \"running\") #> Error: object 'deferred' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_collect.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect results from deferred execution — deferred_collect","title":"Collect results from deferred execution — deferred_collect","text":"Collect results deferred execution","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_collect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect results from deferred execution — deferred_collect","text":"","code":"deferred_collect(d, how = c(\"auto\", \"index\", \"results\"))"},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_collect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect results from deferred execution — deferred_collect","text":"d parade_deferred object collect results: \"auto\", \"index\", \"results\"","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_collect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect results from deferred execution — deferred_collect","text":"tibble collected results","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_collect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collect results from deferred execution — deferred_collect","text":"","code":"# \\donttest{ deferred <- submit(fl) #> Error: object 'fl' not found deferred_await(deferred) #> Error: object 'deferred' not found results <- deferred_collect(deferred) #> Error: object 'deferred' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Get status of a deferred execution — deferred_status","title":"Get status of a deferred execution — deferred_status","text":"Get status deferred execution","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get status of a deferred execution — deferred_status","text":"","code":"deferred_status(d, detail = FALSE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get status of a deferred execution — deferred_status","text":"d parade_deferred object detail Whether return detailed status information","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get status of a deferred execution — deferred_status","text":"tibble execution status","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/deferred_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get status of a deferred execution — deferred_status","text":"","code":"# \\donttest{ deferred <- submit(fl) #> Error: object 'fl' not found status <- deferred_status(deferred) #> Error: object 'deferred' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/diagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract diagnostic information from flow results — diagnostics","title":"Extract diagnostic information from flow results — diagnostics","text":"Extracts formats diagnostic information completed flow execution results, showing success/failure status stage.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/diagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract diagnostic information from flow results — diagnostics","text":"","code":"diagnostics(out, stage = NULL)"},{"path":"https://bbuchsbaum.github.io/parade/reference/diagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract diagnostic information from flow results — diagnostics","text":"Results tibble collect() similar stage Optional stage name filter results","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/diagnostics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract diagnostic information from flow results — diagnostics","text":"Tibble diagnostic information","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/diagnostics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract diagnostic information from flow results — diagnostics","text":"","code":"# \\donttest{ # results <- collect(flow) # diag <- diagnostics(results) # stage_diag <- diagnostics(results, stage = \"process\") # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_local.html","id":null,"dir":"Reference","previous_headings":"","what":"Create local distribution specification — dist_local","title":"Create local distribution specification — dist_local","text":"Configure local parallel execution using future framework.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_local.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create local distribution specification — dist_local","text":"","code":"dist_local(   by = NULL,   within = c(\"multisession\", \"sequential\"),   workers_within = NULL,   chunks_per_job = 1L )"},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_local.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create local distribution specification — dist_local","text":"Column names group parallelization within Execution strategy: \"multisession\" \"sequential\" workers_within Number workers within job chunks_per_job Number groups process per job","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_local.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create local distribution specification — dist_local","text":"parade_dist object local execution","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_local.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create local distribution specification — dist_local","text":"","code":"dist_local(by = \"group\", within = \"multisession\") #> $backend #> [1] \"local\" #>  #> $by #> [1] \"group\" #>  #> $within #> [1] \"multisession\" #>  #> $workers_within #> NULL #>  #> $chunks_per_job #> [1] 1 #>  #> $slurm #> NULL #>  #> attr(,\"class\") #> [1] \"parade_dist\" dist_local(chunks_per_job = 2L) #> $backend #> [1] \"local\" #>  #> $by #> character(0) #>  #> $within #> [1] \"multisession\" #>  #> $workers_within #> NULL #>  #> $chunks_per_job #> [1] 2 #>  #> $slurm #> NULL #>  #> attr(,\"class\") #> [1] \"parade_dist\""},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_slurm.html","id":null,"dir":"Reference","previous_headings":"","what":"Create SLURM distribution specification — dist_slurm","title":"Create SLURM distribution specification — dist_slurm","text":"Configure distributed execution SLURM clusters using batchtools.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_slurm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create SLURM distribution specification — dist_slurm","text":"","code":"dist_slurm(   by = NULL,   within = c(\"multisession\", \"sequential\"),   workers_within = NULL,   template = slurm_template(),   resources = list(),   chunks_per_job = 1L )"},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_slurm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create SLURM distribution specification — dist_slurm","text":"Column names group parallelization within Execution strategy within SLURM job workers_within Number workers within SLURM job template Path SLURM batch template file resources Named list SLURM resource specifications chunks_per_job Number groups process per SLURM job","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_slurm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create SLURM distribution specification — dist_slurm","text":"parade_dist object SLURM execution","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dist_slurm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create SLURM distribution specification — dist_slurm","text":"","code":"# \\donttest{ dist_slurm(by = \"condition\", resources = list(time = \"1h\", mem = \"4GB\")) #> $backend #> [1] \"slurm\" #>  #> $by #> [1] \"condition\" #>  #> $within #> [1] \"multisession\" #>  #> $workers_within #> NULL #>  #> $chunks_per_job #> [1] 1 #>  #> $slurm #> $slurm$template #> [1] \"/home/runner/work/_temp/Library/parade/batchtools/parade-slurm.tmpl\" #>  #> $slurm$resources #> $slurm$resources$time #> [1] \"1h\" #>  #> $slurm$resources$mem #> [1] \"4GB\" #>  #>  #>  #> attr(,\"class\") #> [1] \"parade_dist\" # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/distribute.html","id":null,"dir":"Reference","previous_headings":"","what":"Add distribution settings to a parade flow — distribute","title":"Add distribution settings to a parade flow — distribute","text":"Add distribution settings parade flow","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/distribute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add distribution settings to a parade flow — distribute","text":"","code":"distribute(fl, dist)"},{"path":"https://bbuchsbaum.github.io/parade/reference/distribute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add distribution settings to a parade flow — distribute","text":"fl parade_flow object dist distribution specification dist_local() dist_slurm()","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/distribute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add distribution settings to a parade flow — distribute","text":"input flow distribution settings applied","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/distribute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add distribution settings to a parade flow — distribute","text":"","code":"grid <- data.frame(x = 1:4, group = rep(c(\"A\", \"B\"), 2)) fl <- flow(grid) |> distribute(dist_local(by = \"group\"))"},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-parse_sacct_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse sacct output — .parse_sacct_output","title":"Parse sacct output — .parse_sacct_output","text":"Parse sacct output","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-parse_sacct_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse sacct output — .parse_sacct_output","text":"","code":".parse_sacct_output(output, job_id)"},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-parse_squeue_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse squeue output — .parse_squeue_output","title":"Parse squeue output — .parse_squeue_output","text":"Parse squeue output","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-parse_squeue_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse squeue output — .parse_squeue_output","text":"","code":".parse_squeue_output(output)"},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-parse_sstat_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse sstat output — .parse_sstat_output","title":"Parse sstat output — .parse_sstat_output","text":"Parse sstat output","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-parse_sstat_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse sstat output — .parse_sstat_output","text":"","code":".parse_sstat_output(output)"},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-slurm_exec.html","id":null,"dir":"Reference","previous_headings":"","what":"Execution hook for testing — .slurm_exec","title":"Execution hook for testing — .slurm_exec","text":"Execution hook testing","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-slurm_exec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execution hook for testing — .slurm_exec","text":"","code":".slurm_exec(cmd, args)"},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-slurm_sacct_info_v2.html","id":null,"dir":"Reference","previous_headings":"","what":"Refactored sacct info with injectable executor — .slurm_sacct_info_v2","title":"Refactored sacct info with injectable executor — .slurm_sacct_info_v2","text":"Refactored sacct info injectable executor","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-slurm_sacct_info_v2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Refactored sacct info with injectable executor — .slurm_sacct_info_v2","text":"","code":".slurm_sacct_info_v2(job_id, exec = .slurm_exec)"},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-slurm_squeue_info_v2.html","id":null,"dir":"Reference","previous_headings":"","what":"Refactored squeue info with injectable executor — .slurm_squeue_info_v2","title":"Refactored squeue info with injectable executor — .slurm_squeue_info_v2","text":"Refactored squeue info injectable executor","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-slurm_squeue_info_v2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Refactored squeue info with injectable executor — .slurm_squeue_info_v2","text":"","code":".slurm_squeue_info_v2(job_id, exec = .slurm_exec)"},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-slurm_sstat_info_v2.html","id":null,"dir":"Reference","previous_headings":"","what":"Refactored sstat info with injectable executor — .slurm_sstat_info_v2","title":"Refactored sstat info with injectable executor — .slurm_sstat_info_v2","text":"Refactored sstat info injectable executor","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dot-slurm_sstat_info_v2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Refactored sstat info with injectable executor — .slurm_sstat_info_v2","text":"","code":".slurm_sstat_info_v2(job_id, exec = .slurm_exec)"},{"path":"https://bbuchsbaum.github.io/parade/reference/dry_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Dry-run a flow: show plan and counts without executing — dry_run","title":"Dry-run a flow: show plan and counts without executing — dry_run","text":"Dry-run flow: show plan counts without executing","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/dry_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dry-run a flow: show plan and counts without executing — dry_run","text":"","code":"dry_run(fl)"},{"path":"https://bbuchsbaum.github.io/parade/reference/dry_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dry-run a flow: show plan and counts without executing — dry_run","text":"fl flow().","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/explain.html","id":null,"dir":"Reference","previous_headings":"","what":"Explain a flow: DAG + distribution + sinks — explain","title":"Explain a flow: DAG + distribution + sinks — explain","text":"Explain flow: DAG + distribution + sinks","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/explain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explain a flow: DAG + distribution + sinks — explain","text":"","code":"explain(fl)"},{"path":"https://bbuchsbaum.github.io/parade/reference/explain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explain a flow: DAG + distribution + sinks — explain","text":"fl flow().","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/explain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Explain a flow: DAG + distribution + sinks — explain","text":"tibble summarizing stages.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/failed.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract failed rows from flow results — failed","title":"Extract failed rows from flow results — failed","text":"Returns rows execution failed, either overall specific stage.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/failed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract failed rows from flow results — failed","text":"","code":"failed(out, stage = NULL)"},{"path":"https://bbuchsbaum.github.io/parade/reference/failed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract failed rows from flow results — failed","text":"Results tibble flow execution stage Optional stage name check failures","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/failed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract failed rows from flow results — failed","text":"Tibble containing failed rows","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/failed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract failed rows from flow results — failed","text":"","code":"# \\donttest{ # results <- collect(flow) # failures <- failed(results) # stage_failures <- failed(results, stage = \"validation\") # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/file_ref.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a file reference type specification — file_ref","title":"Create a file reference type specification — file_ref","text":"Create file reference type specification","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/file_ref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a file reference type specification — file_ref","text":"","code":"file_ref()"},{"path":"https://bbuchsbaum.github.io/parade/reference/file_ref.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a file reference type specification — file_ref","text":"packed schema file reference metadata","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/file_ref.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a file reference type specification — file_ref","text":"","code":"file_schema <- returns(output = file_ref())"},{"path":"https://bbuchsbaum.github.io/parade/reference/flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a parade flow for declarative data processing — flow","title":"Create a parade flow for declarative data processing — flow","text":"flow defines computational pipeline typed stages operate parameter grid. stage can depend previous stages produce typed outputs optional error handling policies.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/flow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a parade flow for declarative data processing — flow","text":"","code":"flow(grid, seed_col = NULL, error = c(\"propagate\", \"keep\", \"omit\", \"stop\"))"},{"path":"https://bbuchsbaum.github.io/parade/reference/flow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a parade flow for declarative data processing — flow","text":"grid data frame tibble containing parameter combinations seed_col Optional column name reproducible random seeds error Error handling policy: \"propagate\" (default), \"keep\", \"omit\", \"stop\"","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/flow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a parade flow for declarative data processing — flow","text":"parade_flow object containing grid, stages, options","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/flow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a parade flow for declarative data processing — flow","text":"","code":"# Create a simple flow grid <- data.frame(x = 1:3, y = letters[1:3]) fl <- flow(grid) print(fl) #> <parade_flow> #>   Grid rows : 3 #>   Stages    : 0 [] #>   Error     : propagate  # Flow with seed column for reproducibility fl_seed <- flow(grid, seed_col = \"x\")"},{"path":"https://bbuchsbaum.github.io/parade/reference/grapes-or-or-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Null-coalescing operator — %||%","title":"Null-coalescing operator — %||%","text":"Null-coalescing operator","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/grapes-or-or-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Null-coalescing operator — %||%","text":"","code":"x %||% y"},{"path":"https://bbuchsbaum.github.io/parade/reference/int.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an integer type specification — int","title":"Create an integer type specification — int","text":"Create integer type specification","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an integer type specification — int","text":"","code":"int()"},{"path":"https://bbuchsbaum.github.io/parade/reference/int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an integer type specification — int","text":"integer vector prototype schema definitions","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/int.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an integer type specification — int","text":"","code":"schema(count = int()) #> # A tibble: 0 × 1 #> # ℹ 1 variable: count <int>"},{"path":"https://bbuchsbaum.github.io/parade/reference/jobs_top.html","id":null,"dir":"Reference","previous_headings":"","what":"Live dashboard for multiple SLURM jobs — jobs_top","title":"Live dashboard for multiple SLURM jobs — jobs_top","text":"Interactive text dashboard showing status, resource usage, logs multiple SLURM jobs simultaneously.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/jobs_top.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Live dashboard for multiple SLURM jobs — jobs_top","text":"","code":"jobs_top(jobs, refresh = 3, nlog = 20, clear = TRUE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/jobs_top.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Live dashboard for multiple SLURM jobs — jobs_top","text":"jobs List parade_script_job objects, data frame, registry paths refresh Refresh interval seconds nlog Number log lines show running job clear Whether clear screen updates","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/jobs_top.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Live dashboard for multiple SLURM jobs — jobs_top","text":"input jobs object (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/jobs_top.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Live dashboard for multiple SLURM jobs — jobs_top","text":"","code":"# \\donttest{ job1 <- submit_slurm(\"script1.R\") #> Error in submit_slurm(\"script1.R\"): Script not found: script1.R job2 <- submit_slurm(\"script2.R\") #> Error in submit_slurm(\"script2.R\"): Script not found: script2.R jobs_top(list(job1, job2)) #> Error: object 'job1' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/lgl.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a logical type specification — lgl","title":"Create a logical type specification — lgl","text":"Create logical type specification","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/lgl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a logical type specification — lgl","text":"","code":"lgl()"},{"path":"https://bbuchsbaum.github.io/parade/reference/lgl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a logical type specification — lgl","text":"logical vector prototype schema definitions","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/lgl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a logical type specification — lgl","text":"","code":"schema(is_valid = lgl()) #> # A tibble: 0 × 1 #> # ℹ 1 variable: is_valid <lgl>"},{"path":"https://bbuchsbaum.github.io/parade/reference/lst.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a list type specification — lst","title":"Create a list type specification — lst","text":"Create list type specification","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/lst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a list type specification — lst","text":"","code":"lst(ptype = list())"},{"path":"https://bbuchsbaum.github.io/parade/reference/lst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a list type specification — lst","text":"ptype Prototype list elements","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/lst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a list type specification — lst","text":"list_of vector prototype schema definitions","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/lst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a list type specification — lst","text":"","code":"schema(items = lst()) #> # A tibble: 0 × 1 #> # ℹ 1 variable: items <list<list>>"},{"path":"https://bbuchsbaum.github.io/parade/reference/manifest.html","id":null,"dir":"Reference","previous_headings":"","what":"Create artifact manifest from sidecar files — manifest","title":"Create artifact manifest from sidecar files — manifest","text":"Scans directory tree JSON sidecar files combines manifest artifacts.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/manifest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create artifact manifest from sidecar files — manifest","text":"","code":"manifest(root)"},{"path":"https://bbuchsbaum.github.io/parade/reference/manifest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create artifact manifest from sidecar files — manifest","text":"root Root directory scan artifacts","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/manifest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create artifact manifest from sidecar files — manifest","text":"Tibble artifact metadata","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/manifest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create artifact manifest from sidecar files — manifest","text":"","code":"manifest_data <- manifest(\"artifacts://results\")"},{"path":"https://bbuchsbaum.github.io/parade/reference/pack.html","id":null,"dir":"Reference","previous_headings":"","what":"Pack a schema into a structured type — pack","title":"Pack a schema into a structured type — pack","text":"Pack schema structured type","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/pack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pack a schema into a structured type — pack","text":"","code":"pack(.returns)"},{"path":"https://bbuchsbaum.github.io/parade/reference/pack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pack a schema into a structured type — pack","text":".returns schema specification returns()","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/pack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pack a schema into a structured type — pack","text":"parade_pack object nested data structures","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/pack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pack a schema into a structured type — pack","text":"","code":"nested_schema <- pack(returns(x = dbl(), y = chr()))"},{"path":"https://bbuchsbaum.github.io/parade/reference/parade.html","id":null,"dir":"Reference","previous_headings":"","what":"Declarative parallel dataflow with Future/Furrr and SLURM utilities — parade","title":"Declarative parallel dataflow with Future/Furrr and SLURM utilities — parade","text":"parade package provides declarative, lazy, compositional approach parallel dataflow R. Built top future/furrr ecosystem, offers typed schemas, artifact management, diagnostics, HPC-friendly distribution including seamless SLURM integration via future.batchtools.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Declarative parallel dataflow with Future/Furrr and SLURM utilities — parade","text":"Key features include: Typed dataflow pipelines dependency management Local SLURM distributed execution Artifact persistence automatic metadata Real-time job monitoring dashboards Configurable resource management profiles Comprehensive error handling diagnostics","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/parade/reference/parade.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Declarative parallel dataflow with Future/Furrr and SLURM utilities — parade","text":"Maintainer: Parade Authors parade@example.org","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Locate the parade configuration file — parade_config_path","title":"Locate the parade configuration file — parade_config_path","text":"Finds appropriate location parade configuration file, checking environment variables standard locations.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locate the parade configuration file — parade_config_path","text":"","code":"parade_config_path(create_dirs = TRUE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locate the parade configuration file — parade_config_path","text":"create_dirs Whether create directories needed","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locate the parade configuration file — parade_config_path","text":"Path configuration file","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Locate the parade configuration file — parade_config_path","text":"","code":"config_path <- parade_config_path() #> Error in dir.create(p, recursive = TRUE, showWarnings = FALSE): invalid 'path' argument"},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read parade configuration — parade_config_read","title":"Read parade configuration — parade_config_read","text":"Read parade configuration","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read parade configuration — parade_config_read","text":"","code":"parade_config_read(path = NULL)"},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read parade configuration — parade_config_read","text":"path Optional path config file (uses default NULL)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read parade configuration — parade_config_read","text":"List containing configuration settings","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read parade configuration — parade_config_read","text":"","code":"config <- parade_config_read() #> Error in dir.create(p, recursive = TRUE, showWarnings = FALSE): invalid 'path' argument"},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Write parade configuration — parade_config_write","title":"Write parade configuration — parade_config_write","text":"Write parade configuration","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write parade configuration — parade_config_write","text":"","code":"parade_config_write(cfg, path = NULL)"},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write parade configuration — parade_config_write","text":"cfg Configuration list write path Optional path config file (uses default NULL)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_write.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write parade configuration — parade_config_write","text":"Path written config file (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_config_write.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write parade configuration — parade_config_write","text":"","code":"cfg <- list(slurm = list(defaults = list(time = \"1h\"))) parade_config_write(cfg) #> Error in dir.create(p, recursive = TRUE, showWarnings = FALSE): invalid 'path' argument"},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Global parade options (get/set) — parade_options","title":"Global parade options (get/set) — parade_options","text":"Set per session control defaults collect() / submit().","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global parade options (get/set) — parade_options","text":"","code":"parade_options(   error = NULL,   scheduling = NULL,   seed_furrr = NULL,   progress = NULL )"},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global parade options (get/set) — parade_options","text":"error Default error policy: 'propagate', 'keep', 'omit', 'stop'. scheduling Furrr scheduling (0 < scheduling <= 1 integer chunk size). seed_furrr Set furrr's deterministic RNG (TRUE/FALSE). progress Default logical progress bars (progressr).","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/parade_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global parade options (get/set) — parade_options","text":"named list current options (invisibly).","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/param_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a parameter grid using tidyr::crossing — param_grid","title":"Create a parameter grid using tidyr::crossing — param_grid","text":"Create parameter grid using tidyr::crossing","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/param_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a parameter grid using tidyr::crossing — param_grid","text":"","code":"param_grid(...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/param_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a parameter grid using tidyr::crossing — param_grid","text":"... Named vectors lists cross","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/param_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a parameter grid using tidyr::crossing — param_grid","text":"tibble parameter combinations","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/param_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a parameter grid using tidyr::crossing — param_grid","text":"","code":"grid <- param_grid(x = 1:3, method = c(\"A\", \"B\"))"},{"path":"https://bbuchsbaum.github.io/parade/reference/path_here.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve a path using configured aliases — path_here","title":"Resolve a path using configured aliases — path_here","text":"Resolve path using configured aliases","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/path_here.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve a path using configured aliases — path_here","text":"","code":"path_here(alias, ..., create = TRUE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/path_here.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve a path using configured aliases — path_here","text":"alias Path alias (\"project\", \"data\", \"artifacts\", etc.) ... Additional path components append create Whether create directory exist","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/path_here.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resolve a path using configured aliases — path_here","text":"Resolved absolute path","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/path_here.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resolve a path using configured aliases — path_here","text":"","code":"path_here(\"data\", \"input\", \"file.csv\") #> [1] \"/home/runner/work/parade/parade/docs/reference/data/input/file.csv\" path_here(\"artifacts\", create = FALSE) #> character(0)"},{"path":"https://bbuchsbaum.github.io/parade/reference/paths_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get current parade path configuration — paths_get","title":"Get current parade path configuration — paths_get","text":"Get current parade path configuration","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/paths_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get current parade path configuration — paths_get","text":"","code":"paths_get()"},{"path":"https://bbuchsbaum.github.io/parade/reference/paths_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get current parade path configuration — paths_get","text":"Named list configured paths","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/paths_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get current parade path configuration — paths_get","text":"","code":"paths <- paths_get() paths$data #> [1] \"/home/runner/work/parade/parade/docs/reference/data\""},{"path":"https://bbuchsbaum.github.io/parade/reference/paths_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize parade path configuration — paths_init","title":"Initialize parade path configuration — paths_init","text":"Sets standard directory paths parade projects, automatically detecting HPC environments configuring appropriate scratch data directories.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/paths_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize parade path configuration — paths_init","text":"","code":"paths_init(profile = c(\"auto\", \"local\", \"hpc\"), quiet = FALSE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/paths_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize parade path configuration — paths_init","text":"profile Path profile: \"auto\" (default), \"local\", \"hpc\" quiet Whether suppress initialization messages","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/paths_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize parade path configuration — paths_init","text":"Named list configured paths (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/paths_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize parade path configuration — paths_init","text":"","code":"paths_init(profile = \"local\") #> parade paths: project=/home/runner/work/parade/parade/docs/reference; scratch=/tmp/RtmpguEm4C; data=/home/runner/work/parade/parade/docs/reference/data; artifacts=/tmp/RtmpguEm4C/parade-artifacts; registry=/tmp/RtmpguEm4C/parade-registry; config=/home/runner/work/parade/parade/docs/reference/.parade; cache=/home/runner/.cache/R/parade paths_init(quiet = TRUE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/paths_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set specific parade paths — paths_set","title":"Set specific parade paths — paths_set","text":"Set specific parade paths","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/paths_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set specific parade paths — paths_set","text":"","code":"paths_set(...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/paths_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set specific parade paths — paths_set","text":"... Named path specifications update","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/paths_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set specific parade paths — paths_set","text":"Updated paths list (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/paths_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set specific parade paths — paths_set","text":"","code":"paths_set(data = \"/custom/data\", artifacts = \"/tmp/artifacts\")"},{"path":"https://bbuchsbaum.github.io/parade/reference/pipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a parade pipeline (alias for flow) — pipeline","title":"Create a parade pipeline (alias for flow) — pipeline","text":"Create parade pipeline (alias flow)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/pipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a parade pipeline (alias for flow) — pipeline","text":"","code":"pipeline(grid, seed_col = NULL, error = c(\"propagate\", \"keep\", \"omit\", \"stop\"))"},{"path":"https://bbuchsbaum.github.io/parade/reference/pipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a parade pipeline (alias for flow) — pipeline","text":"grid data frame tibble containing parameter combinations seed_col Optional column name reproducible random seeds error Error handling policy: \"propagate\", \"keep\", \"omit\", \"stop\"","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/pipeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a parade pipeline (alias for flow) — pipeline","text":"parade_flow object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/pipeline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a parade pipeline (alias for flow) — pipeline","text":"","code":"grid <- data.frame(a = 1:2) pl <- pipeline(grid)"},{"path":"https://bbuchsbaum.github.io/parade/reference/preflight.html","id":null,"dir":"Reference","previous_headings":"","what":"Preflight checks for a flow — preflight","title":"Preflight checks for a flow — preflight","text":"Preflight checks flow","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/preflight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preflight checks for a flow — preflight","text":"","code":"preflight(fl)"},{"path":"https://bbuchsbaum.github.io/parade/reference/preflight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preflight checks for a flow — preflight","text":"fl flow().","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for parade flows — print.parade_flow","title":"Print method for parade flows — print.parade_flow","text":"Print method parade flows","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_flow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for parade flows — print.parade_flow","text":"","code":"# S3 method for class 'parade_flow' print(x, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_flow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for parade flows — print.parade_flow","text":"x parade_flow object ... Additional arguments (ignored)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_flow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for parade flows — print.parade_flow","text":"input object (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_script_job.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for parade script jobs — print.parade_script_job","title":"Print method for parade script jobs — print.parade_script_job","text":"Print method parade script jobs","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_script_job.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for parade script jobs — print.parade_script_job","text":"","code":"# S3 method for class 'parade_script_job' print(x, ...)"},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_script_job.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for parade script jobs — print.parade_script_job","text":"x parade_script_job object ... Additional arguments (ignored)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/print.parade_script_job.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for parade script jobs — print.parade_script_job","text":"input object (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/resolve_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve paths with URI-style aliases — resolve_path","title":"Resolve paths with URI-style aliases — resolve_path","text":"Resolves path strings may contain URI-style aliases like \"data://input/file.csv\" \"artifacts://results\".","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/resolve_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve paths with URI-style aliases — resolve_path","text":"","code":"resolve_path(x, create = TRUE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/resolve_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve paths with URI-style aliases — resolve_path","text":"x Path string potentially containing aliases create Whether create directories needed","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/resolve_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resolve paths with URI-style aliases — resolve_path","text":"Resolved absolute path","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/resolve_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resolve paths with URI-style aliases — resolve_path","text":"","code":"resolve_path(\"data://processed/output.rds\") #> [1] \"/custom/data/processed/output.rds\" resolve_path(\"/absolute/path\") #> [1] \"/absolute/path\""},{"path":"https://bbuchsbaum.github.io/parade/reference/returns.html","id":null,"dir":"Reference","previous_headings":"","what":"Define expected return schema for a stage function — returns","title":"Define expected return schema for a stage function — returns","text":"Creates typed schema specification defines expected structure types data returned stage function.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/returns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define expected return schema for a stage function — returns","text":"","code":"returns(..., .contract = NULL)"},{"path":"https://bbuchsbaum.github.io/parade/reference/returns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define expected return schema for a stage function — returns","text":"... Named type specifications (e.g., result = dbl(), name = chr()) .contract Optional contract validation","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/returns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define expected return schema for a stage function — returns","text":"tibble prototype defining expected return structure","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/returns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define expected return schema for a stage function — returns","text":"","code":"returns(result = dbl(), status = chr()) #> # A tibble: 0 × 2 #> # ℹ 2 variables: result <dbl>, status <chr> returns(data = lst(), valid = lgl()) #> # A tibble: 0 × 2 #> # ℹ 2 variables: data <list<list>>, valid <lgl>"},{"path":"https://bbuchsbaum.github.io/parade/reference/scaffold_batch_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a basic SLURM batch template — scaffold_batch_template","title":"Create a basic SLURM batch template — scaffold_batch_template","text":"Create basic SLURM batch template","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/scaffold_batch_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a basic SLURM batch template — scaffold_batch_template","text":"","code":"scaffold_batch_template(   system = c(\"slurm\"),   out = file.path(\"batchtools\", paste0(\"parade-\", match.arg(system), \".tmpl\")),   modules = \"R\",   exports = c(PARADE_SCRATCH = \"${SLURM_TMPDIR:-${TMPDIR:-/tmp}}/parade-$SLURM_JOB_ID\",     OMP_NUM_THREADS = \"1\", MKL_NUM_THREADS = \"1\", OPENBLAS_NUM_THREADS = \"1\"),   preamble = character(),   overwrite = FALSE )"},{"path":"https://bbuchsbaum.github.io/parade/reference/scaffold_batch_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a basic SLURM batch template — scaffold_batch_template","text":"path Path template created (temp file NULL)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/scaffold_batch_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a basic SLURM batch template — scaffold_batch_template","text":"Path created template file (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/scaffold_batch_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a basic SLURM batch template — scaffold_batch_template","text":"","code":"template_path <- scaffold_batch_template() #> Error in scaffold_batch_template(): File exists: /home/runner/work/parade/parade/docs/reference/batchtools/parade-slurm.tmpl (set overwrite=TRUE)."},{"path":"https://bbuchsbaum.github.io/parade/reference/scaffold_flow_job.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate scaffold scripts for SLURM flow execution — scaffold_flow_job","title":"Generate scaffold scripts for SLURM flow execution — scaffold_flow_job","text":"Creates set helper scripts submitting, monitoring, collecting results parade flow SLURM systems.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/scaffold_flow_job.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate scaffold scripts for SLURM flow execution — scaffold_flow_job","text":"","code":"scaffold_flow_job(   flow,   name = \"parade_job\",   registry_dir = NULL,   dir = getwd(),   modules = NULL,   exports = NULL )"},{"path":"https://bbuchsbaum.github.io/parade/reference/scaffold_flow_job.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate scaffold scripts for SLURM flow execution — scaffold_flow_job","text":"flow parade_flow object name Base name generated scripts registry_dir Registry directory job execution dir Directory scripts created modules SLURM modules load exports Environment variables export","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/scaffold_flow_job.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate scaffold scripts for SLURM flow execution — scaffold_flow_job","text":"List created script paths (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/scaffold_flow_job.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate scaffold scripts for SLURM flow execution — scaffold_flow_job","text":"","code":"# \\donttest{ flow <- flow(data.frame(x = 1:3)) scaffold_flow_job(flow, name = \"my_job\") #> Created scaffold scripts: #>   - /home/runner/work/parade/parade/docs/reference/scripts/my_job_submit.R #>   - /home/runner/work/parade/parade/docs/reference/scripts/my_job_sbatch.sh #>   - /home/runner/work/parade/parade/docs/reference/scripts/my_job_status.R #>   - /home/runner/work/parade/parade/docs/reference/scripts/my_job_collect.R #>   - /home/runner/work/parade/parade/docs/reference/scripts/my_job_cancel.sh # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Alias for returns function — schema","title":"Alias for returns function — schema","text":"Alias returns function","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alias for returns function — schema","text":"","code":"schema(..., .contract = NULL)"},{"path":"https://bbuchsbaum.github.io/parade/reference/schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alias for returns function — schema","text":"... Named type specifications .contract Optional contract validation","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alias for returns function — schema","text":"tibble prototype defining expected structure","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/schema.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Alias for returns function — schema","text":"","code":"schema(value = dbl(), label = chr()) #> # A tibble: 0 × 2 #> # ℹ 2 variables: value <dbl>, label <chr>"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_await.html","id":null,"dir":"Reference","previous_headings":"","what":"Wait for a SLURM script job to complete — script_await","title":"Wait for a SLURM script job to complete — script_await","text":"Wait SLURM script job complete","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_await.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wait for a SLURM script job to complete — script_await","text":"","code":"script_await(job, timeout = Inf, poll = 10)"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_await.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wait for a SLURM script job to complete — script_await","text":"job parade_script_job object timeout Maximum time wait seconds (default: Inf) poll Polling interval seconds","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_await.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wait for a SLURM script job to complete — script_await","text":"input job object (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_await.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wait for a SLURM script job to complete — script_await","text":"","code":"# \\donttest{ job <- submit_slurm(\"script.R\") #> Error in submit_slurm(\"script.R\"): Script not found: script.R script_await(job, timeout = 300)  # Wait up to 5 minutes #> Error: object 'job' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_cancel.html","id":null,"dir":"Reference","previous_headings":"","what":"Cancel a running SLURM script job — script_cancel","title":"Cancel a running SLURM script job — script_cancel","text":"Cancel running SLURM script job","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_cancel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cancel a running SLURM script job — script_cancel","text":"","code":"script_cancel(job)"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_cancel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cancel a running SLURM script job — script_cancel","text":"job parade_script_job object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_cancel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cancel a running SLURM script job — script_cancel","text":"input job object (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_cancel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cancel a running SLURM script job — script_cancel","text":"","code":"# \\donttest{ job <- submit_slurm(\"script.R\") #> Error in submit_slurm(\"script.R\"): Script not found: script.R script_cancel(job) #> Error: object 'job' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_done.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a SLURM job has completed — script_done","title":"Check if a SLURM job has completed — script_done","text":"Check SLURM job completed","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_done.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a SLURM job has completed — script_done","text":"","code":"script_done(job)"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_done.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a SLURM job has completed — script_done","text":"job parade_script_job object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_done.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a SLURM job has completed — script_done","text":"Logical indicating completion status","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_done.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a SLURM job has completed — script_done","text":"","code":"# \\donttest{ job <- submit_slurm(\"script.R\") #> Error in submit_slurm(\"script.R\"): Script not found: script.R is_done <- script_done(job) #> Error: object 'job' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_find_latest.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the most recently created script job registries — script_find_latest","title":"Find the most recently created script job registries — script_find_latest","text":"Find recently created script job registries","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_find_latest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the most recently created script job registries — script_find_latest","text":"","code":"script_find_latest(n = 5, pattern = NULL)"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_find_latest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the most recently created script job registries — script_find_latest","text":"n Maximum number registries return pattern Optional pattern filter registry names","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_find_latest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the most recently created script job registries — script_find_latest","text":"tibble registry paths modification times","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_find_latest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the most recently created script job registries — script_find_latest","text":"","code":"latest_jobs <- script_find_latest(n = 3)"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_load.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a script job from its registry directory — script_load","title":"Load a script job from its registry directory — script_load","text":"Load script job registry directory","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_load.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a script job from its registry directory — script_load","text":"","code":"script_load(registry_dir)"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_load.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a script job from its registry directory — script_load","text":"registry_dir Path batchtools registry directory","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_load.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a script job from its registry directory — script_load","text":"parade_script_job object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_load.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a script job from its registry directory — script_load","text":"","code":"# \\donttest{ job <- script_load(\"/path/to/registry\") #> Error in script_load(\"/path/to/registry\"): No script_job.rds found under: /path/to/registry # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_logs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get log file paths for a SLURM job — script_logs","title":"Get log file paths for a SLURM job — script_logs","text":"Get log file paths SLURM job","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_logs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get log file paths for a SLURM job — script_logs","text":"","code":"script_logs(job)"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_logs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get log file paths for a SLURM job — script_logs","text":"job parade_script_job object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_logs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get log file paths for a SLURM job — script_logs","text":"Tibble log file paths modification times","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_logs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get log file paths for a SLURM job — script_logs","text":"","code":"# \\donttest{ job <- submit_slurm(\"script.R\") #> Error in submit_slurm(\"script.R\"): Script not found: script.R logs <- script_logs(job) #> Error: object 'job' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Get CPU and memory metrics for a SLURM job — script_metrics","title":"Get CPU and memory metrics for a SLURM job — script_metrics","text":"Retrieves current resource usage statistics SLURM commands including CPU utilization, memory consumption, job status.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get CPU and memory metrics for a SLURM job — script_metrics","text":"","code":"script_metrics(job)"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get CPU and memory metrics for a SLURM job — script_metrics","text":"job parade_script_job object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get CPU and memory metrics for a SLURM job — script_metrics","text":"Named list job metrics resource usage","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get CPU and memory metrics for a SLURM job — script_metrics","text":"","code":"# \\donttest{ job <- submit_slurm(\"script.R\") #> Error in submit_slurm(\"script.R\"): Script not found: script.R metrics <- script_metrics(job) #> Error: object 'job' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Get status of a SLURM script job — script_status","title":"Get status of a SLURM script job — script_status","text":"Get status SLURM script job","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get status of a SLURM script job — script_status","text":"","code":"script_status(job, detail = FALSE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get status of a SLURM script job — script_status","text":"job parade_script_job object detail Whether return detailed job information","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get status of a SLURM script job — script_status","text":"tibble job status information","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get status of a SLURM script job — script_status","text":"","code":"# \\donttest{ job <- submit_slurm(\"script.R\") #> Error in submit_slurm(\"script.R\"): Script not found: script.R status <- script_status(job) #> Error: object 'job' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_tail.html","id":null,"dir":"Reference","previous_headings":"","what":"Display recent log output from a SLURM job — script_tail","title":"Display recent log output from a SLURM job — script_tail","text":"Display recent log output SLURM job","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_tail.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display recent log output from a SLURM job — script_tail","text":"","code":"script_tail(job, n = 200)"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_tail.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display recent log output from a SLURM job — script_tail","text":"job parade_script_job object n Number lines show end log","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_tail.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display recent log output from a SLURM job — script_tail","text":"Log lines (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_tail.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display recent log output from a SLURM job — script_tail","text":"","code":"# \\donttest{ job <- submit_slurm(\"script.R\") #> Error in submit_slurm(\"script.R\"): Script not found: script.R script_tail(job, n = 50) #> Error: object 'job' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_top.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactive text monitor for a single SLURM job — script_top","title":"Interactive text monitor for a single SLURM job — script_top","text":"Displays real-time CPU, memory, log information running SLURM job continuously updating text interface.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_top.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactive text monitor for a single SLURM job — script_top","text":"","code":"script_top(job, refresh = 2, nlog = 30, clear = TRUE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/script_top.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interactive text monitor for a single SLURM job — script_top","text":"job parade_script_job object refresh Refresh interval seconds nlog Number log lines display clear Whether clear screen updates","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_top.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interactive text monitor for a single SLURM job — script_top","text":"input job object (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/script_top.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interactive text monitor for a single SLURM job — script_top","text":"","code":"# \\donttest{ job <- submit_slurm(\"script.R\") #> Error in submit_slurm(\"script.R\"): Script not found: script.R script_top(job, refresh = 5) #> Error: object 'job' not found # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/sink_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a sink specification for artifact persistence — sink_spec","title":"Create a sink specification for artifact persistence — sink_spec","text":"Defines stage outputs persisted disk, configurable directory structure, file formats, metadata handling.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/sink_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a sink specification for artifact persistence — sink_spec","text":"","code":"sink_spec(   fields,   dir,   template = NULL,   format = c(\"rds\"),   writer = NULL,   overwrite = c(\"skip\", \"overwrite\", \"error\"),   checksum = TRUE,   sidecar = c(\"json\", \"none\"),   compress = \"gzip\",   reader = readRDS,   autoload = TRUE )"},{"path":"https://bbuchsbaum.github.io/parade/reference/sink_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a sink specification for artifact persistence — sink_spec","text":"fields Character vector field names persist dir Base directory function artifact storage template Optional glue template file path generation format File format (currently \"rds\" supported) writer Optional custom writer function overwrite Overwrite policy: \"skip\", \"overwrite\", \"error\" checksum Whether compute SHA256 checksums sidecar Sidecar metadata format: \"json\" \"none\" compress Compression method RDS files reader Function read persisted files autoload Whether automatically load artifacts","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/sink_spec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a sink specification for artifact persistence — sink_spec","text":"parade_sink specification object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/sink_spec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a sink specification for artifact persistence — sink_spec","text":"","code":"sink_spec(\"result\", dir = \"artifacts://results\") #> $fields #> [1] \"result\" #>  #> $dir #> [1] \"artifacts://results\" #>  #> $template #> NULL #>  #> $format #> [1] \"rds\" #>  #> $writer #> NULL #>  #> $overwrite #> [1] \"skip\" #>  #> $checksum #> [1] TRUE #>  #> $sidecar #> [1] \"json\" #>  #> $compress #> [1] \"gzip\" #>  #> $reader #> function (file, refhook = NULL)  #> { #>     if (is.character(file)) { #>         con <- gzfile(file, \"rb\") #>         on.exit(close(con)) #>     } #>     else if (inherits(file, \"connection\"))  #>         con <- if (inherits(file, \"url\"))  #>             gzcon(file) #>         else file #>     else stop(\"bad 'file' argument\") #>     .Internal(unserializeFromConn(con, refhook)) #> } #> <bytecode: 0x55e1cfc28b30> #> <environment: namespace:base> #>  #> $autoload #> [1] TRUE #>  #> attr(,\"class\") #> [1] \"parade_sink\" sink_spec(c(\"model\", \"metrics\"), dir = \"/tmp/output\", compress = \"xz\") #> $fields #> [1] \"model\"   \"metrics\" #>  #> $dir #> [1] \"/tmp/output\" #>  #> $template #> NULL #>  #> $format #> [1] \"rds\" #>  #> $writer #> NULL #>  #> $overwrite #> [1] \"skip\" #>  #> $checksum #> [1] TRUE #>  #> $sidecar #> [1] \"json\" #>  #> $compress #> [1] \"xz\" #>  #> $reader #> function (file, refhook = NULL)  #> { #>     if (is.character(file)) { #>         con <- gzfile(file, \"rb\") #>         on.exit(close(con)) #>     } #>     else if (inherits(file, \"connection\"))  #>         con <- if (inherits(file, \"url\"))  #>             gzcon(file) #>         else file #>     else stop(\"bad 'file' argument\") #>     .Internal(unserializeFromConn(con, refhook)) #> } #> <bytecode: 0x55e1cfc28b30> #> <environment: namespace:base> #>  #> $autoload #> [1] TRUE #>  #> attr(,\"class\") #> [1] \"parade_sink\""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_defaults_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get defaults for SLURM (merged from options() and config) — slurm_defaults_get","title":"Get defaults for SLURM (merged from options() and config) — slurm_defaults_get","text":"Get defaults SLURM (merged options() config)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_defaults_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get defaults for SLURM (merged from options() and config) — slurm_defaults_get","text":"","code":"slurm_defaults_get(profile = \"default\")"},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_defaults_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get defaults for SLURM (merged from options() and config) — slurm_defaults_get","text":"profile character name; 'default' default","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_defaults_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set defaults for SLURM (R session and optionally persist to config) — slurm_defaults_set","title":"Set defaults for SLURM (R session and optionally persist to config) — slurm_defaults_set","text":"Set defaults SLURM (R session optionally persist config)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_defaults_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set defaults for SLURM (R session and optionally persist to config) — slurm_defaults_set","text":"","code":"slurm_defaults_set(..., .list = NULL, profile = \"default\", persist = FALSE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_defaults_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set defaults for SLURM (R session and optionally persist to config) — slurm_defaults_set","text":"... key=value pairs (e.g., mem = NA, time = \"2h\") .list optional named list profile profile name; defaults 'default' persist write config file TRUE","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_resources.html","id":null,"dir":"Reference","previous_headings":"","what":"Build SLURM resources with defaults and normalization — slurm_resources","title":"Build SLURM resources with defaults and normalization — slurm_resources","text":"Merges user-specified resources configured defaults applies normalization batch_resources().","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_resources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build SLURM resources with defaults and normalization — slurm_resources","text":"","code":"slurm_resources(resources = NULL, profile = \"default\")"},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_resources.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build SLURM resources with defaults and normalization — slurm_resources","text":"resources Named list resource specifications merge profile Configuration profile use defaults","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_resources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build SLURM resources with defaults and normalization — slurm_resources","text":"Normalized resource specification list","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_resources.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build SLURM resources with defaults and normalization — slurm_resources","text":"","code":"slurm_resources(list(time = \"2h\"), profile = \"default\") #> Error in dir.create(p, recursive = TRUE, showWarnings = FALSE): invalid 'path' argument"},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path to default SLURM template — slurm_template","title":"Get path to default SLURM template — slurm_template","text":"Get path default SLURM template","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path to default SLURM template — slurm_template","text":"","code":"slurm_template()"},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get path to default SLURM template — slurm_template","text":"Path package SLURM template file","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get path to default SLURM template — slurm_template","text":"","code":"template_path <- slurm_template()"},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_template_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the default SLURM template path — slurm_template_default","title":"Get the default SLURM template path — slurm_template_default","text":"Retrieves configured SLURM template path falls back package default template.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_template_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the default SLURM template path — slurm_template_default","text":"","code":"slurm_template_default()"},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_template_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the default SLURM template path — slurm_template_default","text":"Path SLURM template file","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_template_default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the default SLURM template path — slurm_template_default","text":"","code":"template_path <- slurm_template_default() #> Error in dir.create(p, recursive = TRUE, showWarnings = FALSE): invalid 'path' argument"},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_template_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the default SLURM template path — slurm_template_set","title":"Set the default SLURM template path — slurm_template_set","text":"Set default SLURM template path","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_template_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the default SLURM template path — slurm_template_set","text":"","code":"slurm_template_set(path, persist = TRUE)"},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_template_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the default SLURM template path — slurm_template_set","text":"path Path SLURM template file persist Whether save configuration file","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_template_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the default SLURM template path — slurm_template_set","text":"Resolved template path (invisibly)","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/slurm_template_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the default SLURM template path — slurm_template_set","text":"","code":"# \\donttest{ slurm_template_set(\"/path/to/custom.tmpl\") #> Error in dir.create(p, recursive = TRUE, showWarnings = FALSE): invalid 'path' argument # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/stage.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a processing stage to a parade flow — stage","title":"Add a processing stage to a parade flow — stage","text":"stage defines computational step flow typed inputs outputs, optional dependencies, configurable data handling options.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/stage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a processing stage to a parade flow — stage","text":"","code":"stage(   fl,   id,   f,   needs = character(),   schema,   prefix = TRUE,   sink = NULL,   skip_when = NULL,   hoist_struct = FALSE,   ... )"},{"path":"https://bbuchsbaum.github.io/parade/reference/stage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a processing stage to a parade flow — stage","text":"fl parade_flow object id Unique stage identifier (character) f Function execute stage needs Character vector stage IDs stage depends schema Schema defining expected output structure (returns()) prefix Whether prefix output columns stage ID (logical) sink Optional sink specification artifact persistence skip_when Optional function determine skip stage hoist_struct Whether hoist nested data structures (logical) ... Additional constant arguments passed stage function","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/stage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a processing stage to a parade flow — stage","text":"input flow new stage added","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/stage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a processing stage to a parade flow — stage","text":"","code":"grid <- data.frame(x = 1:3) fl <- flow(grid) |>   stage(\"double\", function(x) x * 2, schema = returns(result = dbl()))"},{"path":"https://bbuchsbaum.github.io/parade/reference/struct.html","id":null,"dir":"Reference","previous_headings":"","what":"Alias for pack function — struct","title":"Alias for pack function — struct","text":"Alias pack function","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/struct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alias for pack function — struct","text":"","code":"struct(.returns)"},{"path":"https://bbuchsbaum.github.io/parade/reference/struct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alias for pack function — struct","text":".returns Schema specification","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/struct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alias for pack function — struct","text":"parade_pack object","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/submit.html","id":null,"dir":"Reference","previous_headings":"","what":"Submit a flow for deferred execution — submit","title":"Submit a flow for deferred execution — submit","text":"Submits parade flow asynchronous execution, either locally using future SLURM using batchtools. Returns handle monitoring collecting results.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/submit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Submit a flow for deferred execution — submit","text":"","code":"submit(   fl,   mode = c(\"index\", \"results\"),   run_id = NULL,   registry_dir = NULL,   index_dir = NULL,   seed_furrr = TRUE,   scheduling = 1 )"},{"path":"https://bbuchsbaum.github.io/parade/reference/submit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Submit a flow for deferred execution — submit","text":"fl parade_flow object distribution settings mode Execution mode: \"index\" (default) \"results\" run_id Optional run identifier (auto-generated NULL) registry_dir Directory execution registry index_dir Directory result indices seed_furrr Whether enable deterministic random number generation scheduling Furrr scheduling parameter","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/submit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Submit a flow for deferred execution — submit","text":"parade_deferred object monitoring execution","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/submit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Submit a flow for deferred execution — submit","text":"","code":"# \\donttest{ grid <- data.frame(x = 1:4, group = rep(c(\"A\", \"B\"), 2)) fl <- flow(grid) |>   stage(\"calc\", function(x) x^2, schema = returns(result = dbl())) |>   distribute(dist_local(by = \"group\"))  deferred <- submit(fl) # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/submit_slurm.html","id":null,"dir":"Reference","previous_headings":"","what":"Submit an R script to SLURM and monitor it from R — submit_slurm","title":"Submit an R script to SLURM and monitor it from R — submit_slurm","text":"Submits R script SLURM job using batchtools, configurable resources environment. Returns handle monitoring retrieving results.","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/submit_slurm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Submit an R script to SLURM and monitor it from R — submit_slurm","text":"","code":"submit_slurm(   script,   args = character(),   name = NULL,   template = NULL,   resources = NULL,   registry_dir = NULL,   env = character(),   lib_paths = .libPaths(),   rscript = file.path(R.home(\"bin\"), \"Rscript\"),   wd = dirname(normalizePath(script)) )"},{"path":"https://bbuchsbaum.github.io/parade/reference/submit_slurm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Submit an R script to SLURM and monitor it from R — submit_slurm","text":"script Path R script file execute args Character vector command line arguments pass script name Optional job name (defaults script basename) template Path SLURM template file (uses default NULL) resources Named list SLURM resource specifications registry_dir Directory batchtools registry (auto-generated NULL) env Named character vector environment variables set lib_paths Character vector library paths use rscript Path Rscript executable wd Working directory script execution","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/submit_slurm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Submit an R script to SLURM and monitor it from R — submit_slurm","text":"parade_script_job object monitoring job","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/submit_slurm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Submit an R script to SLURM and monitor it from R — submit_slurm","text":"","code":"# \\donttest{ # Create a simple R script script_path <- tempfile(fileext = \".R\") writeLines(\"cat('Hello from SLURM!')\", script_path)  # Submit to SLURM job <- submit_slurm(script_path, resources = list(time = \"5min\")) #> Error in dir.create(p, recursive = TRUE, showWarnings = FALSE): invalid 'path' argument # }"},{"path":"https://bbuchsbaum.github.io/parade/reference/with_parade_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporarily set parade options for code execution — with_parade_options","title":"Temporarily set parade options for code execution — with_parade_options","text":"Temporarily set parade options code execution","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/with_parade_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporarily set parade options for code execution — with_parade_options","text":"","code":"with_parade_options(..., code)"},{"path":"https://bbuchsbaum.github.io/parade/reference/with_parade_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temporarily set parade options for code execution — with_parade_options","text":"... Named parade option values set temporarily code Code execute modified options","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/with_parade_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Temporarily set parade options for code execution — with_parade_options","text":"Result executing code","code":""},{"path":"https://bbuchsbaum.github.io/parade/reference/with_parade_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temporarily set parade options for code execution — with_parade_options","text":"","code":"with_parade_options(error = \"stop\", {   # code runs with error = \"stop\" }) #> Error in with_parade_options(error = \"stop\", {}): argument \"code\" is missing, with no default"}]
